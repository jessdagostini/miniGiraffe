#+TITLE: IISWC 25 Paper LabBook
#+AUTHOR: Jessica Dagostini
#+STARTUP: overview indent
#+TAGS: noexport(n) deprecated(d)
#+EXPORT_SELECT_TAGS: export
#+EXPORT_EXCLUDE_TAGS: noexport
#+SEQ_TODO: TODO(t!) STARTED(s!) WAITING(w!) | DONE(d!) CANCELLED(c!) DEFERRED(f!)

* Planning the story of the paper
  - Introduce Giraffe and the pangenome mapping workload
  - Talk about the complexity of this workload and how important it is
  - Workload characterization of Giraffe
  - Discuss complexity, how hard is to make changes to code, etc
  - Present the proxy
  - Validate proxy: needs to run new experiments to validate proxy
    with the version with caching
    Collect hardware metrics and runtime
  - Scalability analysis of the proxy/workload in different CPU
    architectures
    Use Intel (Kaffirlime), AMD (Tangerine), and ARM
    (Chameleon). Might be good to run in another Intel and AMD
    machines (that have different cache capacities)?
  - Discuss different scheduling (omp and workstealing)? Workstealing
    in all machines? Keep discussion of batch sizes?
  - Playing with CachedGBWT
    Explain what it is. Run in different machines with it enabled and
    not. Discuss the potential of autotuning this with different
    sizes. Resizing as needed - doing rehashing to increase
    capacity. Show how this rehash can impact performance on some
    input sets. Try to find a metric or characteristic that make this
    happen (work per thread? hardware characteristcs?)
  - Distributed version with MPI
    Show scalability when running with big number of threads. Link
    this to the caching bottleneck and show how scalability without
    this caching can be good for the application.

  - Contributions
    - Providing a lightweight tool to explore pangenomes
      and sequence-to-graph DNA mapping -- an emerging workflow in HPC
      systems
    - Characterizing the workload of this workflow in different
      architectures using this proxy. Showcase the potential
      benefits of running the full application in different hardware,
      pinpointing what are the characteristics that matter the most for
      performance. This will be one of the few studies in pangenomes that focus on
      computational performance only (other studies on pangenome tools
      focus more on accuracy). Address how the proxy made this study easier.
    - (1) Exploring an existing optimization in the mapping process
      (CachedGBWT) and possible bottlenecks in the current version. OR
      (2) Investigating the scalability in a distributed scenario and
      showcasing possible benefits. Given the complexity of the scheduler in the original
      application, showing how the proxy enabled an easy way to test
      this strategy.
  - Outline per section
    1. Introduction - Brief explanations and motivation with genomics, pangenomes, importance of its
       research. Complexity of scientific applications. Present VG
       Giraffe. Discuss briefly its complexity. Motivate proxies and
       why they are important. Present the work and our contributions.
    2. Background - Further discuss what are pangenomes and the
       process of genome mapping. Explains the variation graph
       strucutre and sequence-to-graph mapping strategy. Present VG
       Giraffe, discussing its procedure and novelty. Discuss the GBWT
       and the other indexing structure VG uses. Explain what are
       proxy applications and their applicability.
    3. Methodology - Describe our proxification strategy,
       coding choices and the analysis workflow. Present the
       characteristics of the machines used in the
       experiemnts. Discuss the input sets, their sizes and their
       representation on the workflow of the application (single and
       pair-ended)
    4. Characterizing Giraffe - Describe Giraffe's execution and
       structure. Present the tracing results and the different steps
       performed by the application to map each read. Discuss the
       parallelization strategy applied and the cost of each
       region. Deep discussion on the most consuming regions and the
       computation they perform. Runtime characteristics. 
    5. Present proxy - Motivate the decision to build the proxy based
       on complexities of the parent application. Describe
       miniGiraffe and what regions it reproduces in the
       code. Describe its input and output, and features that it
       supports (e.g., enable/disable hw counters, tracing). Describe the
       parallelization strategy and the abstractions made on the code. Present
       performance validation data to show how representative miniGiraffe is
       compared to its parent application (hardware metrics like IPC,
       cache hit/miss, # of instructions). Compare scalability
       performance with VG Giraffe. Discuss validation of extension
       results (binary validation of output)
    6. Characterizing pangenome mapping on different hardware -
       Present results of scalability of the different input sets on
       different machines. Showcase the potential benefits of
       different architecture characteristics in this
       workload (with hardware metrics). Pinpoint what matter the most for
       performance, explaining why. Demonstrate how easy it was to test this workload
       in different machines with the proxy.
    (Possible) 7. CachedGBWT - Explain what is this strategy and what it aims to
       bring to the application. Present an analysis of the impact of
       this improvement to the workload on different archs and
       different input sets. Discuss bottlenecks of the current way it
       is structured, linking to a possible metric to identify when
       the bottleneck happens
    (Possible) 7. Distributed version with MPI - Showcase how the
    proxy enabled us to test different approaches by extending this
    application to run in distributed memory. Demonstrate scalability,
    explain why/how the application scales and how the input sets
    determine its scalability (from previous results/conclusions, the
    size of the input set will determine the scalability of the
    application, being bounded by how many reads we are mapping). Use
    this as a use case of the proxy, and motivate how easy it was to
    test this strategy with the proxy instead of the original
    application due to complexities in code and scheduling

    How to justify in the narrative why, of all possible things, we
    decided to choose to go for the CachedGBWT or the MPI path.
* To-do's
  - [X] Find results from the previous submission for Figures 3 and 4
  (Giraffe characterization)
  - [X] Organize ispass-paper folder to backup locally and remove from
  the servers
  - [ ] Design the experiments, creating a python script to run
  everything needed
  - [ ] Crete a new branch on github repo with the submission version of
  the proxy (to make it easy for later)
  - [ ] Upload ~ispass11-all-times.csv.gz~, ~ispass12-all-times.csv.gz~
  ~ispass13-test-all-times.csv.gz~ ~ispass13-Giraffe-all-times.csv.gz~ from HD
* Experiments
- [ ] #1 Validate hw metrics between miniGiraffe vs Giraffe on
  Kaffirlime, sequential execution, 1000GP
- [ ] #2 Validate the output between miniGiraffe vs Giraffe, 1000GP
  and yeast
- [ ] #3 Validate parallel scalability on Kaffirlime, 1000GP and yeast
- [-] #5 Workload analysis of miniGiraffe over Intel, AMD, and ARM
  architectures
  - [X] #5.1 Collect scalability on Kaffirlime (Intel)
  - [X] #5.2 Collect scalability on Tangerine (AMD)
  - [ ] #5.3 Collect scalability on Chameleon (ARM)
  - [X] #5.4 Collect hw metrics on Tangerine (Sequential, one input
    set)
  - [ ] #5.5 Collect hw metrics on Chameleon (Sequential, one input
    set)
  - [X] #5.6 Collect hw metrics on Tangerine, parallel, using perf
- [X] #6 Impact of CacheGBWT on the application
  - [X] #6.1 Collect runtime of running miniGiraffe with maximum
    number of threads without the CachedGBWT on Kaffirlime, all test cases
  - [X] #6.2 Collect runtime of running miniGiraffe with maximum
    number of threads without the CachedGBWT and with no-rehash on Tangerine, all test cases
  - [X] #6.3 Collect runtime of running miniGiraffe with maximum
    number of threads without the CachedGBWT on Chameleon, all test cases
  - [X] #6.4 Rehash invesigation for missing test cases (two big ones)
  - [X] #6.5 Validate rehash bottlenech for 1000GP input set
  - [X] #6.6 Understand if the bottleneck for 1000GP is linked to
    number of threads or because of using logical threads
  - [X] #6.7 Find rehash bottleneck for yeast input set
- [ ] #7 - Explore different tuning for each test case
  - [ ] #7.1 Tuning execution on Kaffirlime
  - [ ] #7.2 Tuning execution on Tangerine
  - [ ] #7.3 Tuning execution on another machine
* File location and scripts
- Class/library with general calls (run, copy files, etc) -
  iiswc25/MiniGiraffePipeline.py
* R template for analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 144 Ã— 1
   SOURCE                                                                                                              
   <chr>                                                                                                               
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffe2048.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffeNC.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffe2048.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffeNC.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_ws_0_1000GP_miniGiraffe2048.csv 
# â„¹ 134 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.5
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 4,910 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query          Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>            <dbl>  <dbl>
 1     512       1 omp                0      2048 reading-gbz      44.8       0
 2     512       1 omp                0      2048 reading-seeds    16.8       0
 3     512       1 omp                0      2048 seeds-loop      191.        0
 4     512       1 omp                0      2048 writing-output    5.27      0
 5     512       1 omp                0       256 reading-gbz      44.7       0
 6     512       1 omp                0       256 reading-seeds    16.9       0
 7     512       1 omp                0       256 seeds-loop      189.        0
 8     512       1 omp                0       256 writing-output    5.28      0
 9     512       1 omp                0         0 reading-gbz      44.7       0
10     512       1 omp                0         0 reading-seeds    16.9       0
# â„¹ 4,900 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.5 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.5.makespan
#+end_src

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.5.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.5.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.5.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 48 Ã— 4
# Groups:   Threads, Scheduler [16]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1       1 omp               0    1   
 2       1 omp             256    1.10
 3       1 omp            2048    1.08
 4       1 ws                0    1   
 5       1 ws              256    1.12
 6       1 ws             2048    1.12
 7       2 omp               0    1   
 8       2 omp             256    1.10
 9       2 omp            2048    1.09
10       2 ws                0    1   
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Line plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.2.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src
* 1 - Validate hw metrics between miniGiraffe and Giraffe on kaffirlime
We will use this data to understand scalability as well
** miniGiraffe
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 6,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Counter = X1, Total = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=FALSE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 9 Ã— 1
  SOURCE                                                                                             
  <chr>                                                                                              
1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_ipc_miniGiraffe.csv
2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_l1_miniGiraffe.csv 
3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_llc_miniGiraffe.csv
4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_ipc_miniGiraffe.csv
5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_l1_miniGiraffe.csv 
6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_llc_miniGiraffe.csv
7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_ipc_miniGiraffe.csv
8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_l1_miniGiraffe.csv 
9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_llc_miniGiraffe.csv
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Threads", "Repetition", "XX7", "Source"), sep="_") %>%
    mutate(Source = str_replace_all(Source, "(.csv)", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.hw.mini
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 18 Ã— 6
   Threads Repetition Source      Counter              Total Thread
   <chr>   <chr>      <chr>       <chr>                <dbl>  <dbl>
 1 1       1          miniGiraffe instructions 1489659364650      0
 2 1       1          miniGiraffe cycles        779157454795      0
 3 1       1          miniGiraffe L1-access     418819439122      0
 4 1       1          miniGiraffe L1-misses       1730374863      0
 5 1       1          miniGiraffe LLC-access       286368977      0
 6 1       1          miniGiraffe LLC-misses       208933546      0
 7 1       2          miniGiraffe instructions 1489196827585      0
 8 1       2          miniGiraffe cycles        778193653873      0
 9 1       2          miniGiraffe L1-access     418838358314      0
10 1       2          miniGiraffe L1-misses       1680533430      0
11 1       2          miniGiraffe LLC-access       288797264      0
12 1       2          miniGiraffe LLC-misses       212049409      0
13 1       3          miniGiraffe instructions 1489413195470      0
14 1       3          miniGiraffe cycles        778774357632      0
15 1       3          miniGiraffe L1-access     418836834870      0
16 1       3          miniGiraffe L1-misses       1659617350      0
17 1       3          miniGiraffe LLC-access       287808206      0
18 1       3          miniGiraffe LLC-misses       212325636      0
#+end_example

#+begin_src R :results output :session *R* :exports both
df.hw.mini %>%
  group_by(Counter) %>%
  summarize(Result = mean(Total))
#+end_src

#+RESULTS:
: # A tibble: 6 Ã— 2
:   Counter       Result
:   <chr>          <dbl>
: 1 L1-access    4.19e11
: 2 L1-misses    1.69e 9
: 3 LLC-access   2.88e 8
: 4 LLC-misses   2.11e 8
: 5 cycles       7.79e11
: 6 instructions 1.49e12

#+begin_src R :results output :session *R* :exports both
1.49e12 / 7.79e11
1.69e9 / 4.19e11
2.11e8 / 2.88e8
#+end_src

#+RESULTS:
: [1] 1.912709
: [1] 0.004033413
: [1] 0.7326389

** Giraffe
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Counter = X1, Total = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="giraffe_parsed",
                                 recursive=FALSE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 9 Ã— 1
  SOURCE                                                                                                
  <chr>                                                                                                 
1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_ipc_giraffe_parsed.csv
2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_l1_giraffe_parsed.csv 
3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_1_ll_giraffe_parsed.csv 
4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_ipc_giraffe_parsed.csv
5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_l1_giraffe_parsed.csv 
6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_2_ll_giraffe_parsed.csv 
7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_ipc_giraffe_parsed.csv
8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_l1_giraffe_parsed.csv 
9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_3_ll_giraffe_parsed.csv
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Threads", "Repetition", "XX7", "Source", "XX8"), sep="_") %>%
    #mutate(Source = str_replace_all(Source, "(.csv)", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.hw.gir
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 222,702,612 Ã— 6
   Threads Repetition Source  Counter       Total Thread
   <chr>   <chr>      <chr>   <chr>         <dbl>  <dbl>
 1 1       1          giraffe cycles       175174      0
 2 1       1          giraffe instructions 204237      0
 3 1       1          giraffe cycles        34071      0
 4 1       1          giraffe instructions  30284      0
 5 1       1          giraffe cycles       117272      0
 6 1       1          giraffe instructions 183397      0
 7 1       1          giraffe cycles        98269      0
 8 1       1          giraffe instructions 175806      0
 9 1       1          giraffe cycles        47323      0
10 1       1          giraffe instructions  53715      0
# â„¹ 222,702,602 more rows
# â„¹ Use `print(n = ...)` to see more rows
Warning message:
There were 3 warnings in `mutate()`.
The first warning was:
â„¹ In argument: `DATA = map(SOURCE, read_traces)`.
Caused by warning:
! One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)
â„¹ Run `dplyr::last_dplyr_warnings()` to see the 2 remaining warnings.
#+end_example

#+begin_src R :results output :session *R* :exports both
df.hw.gir %>%
  group_by(Repetition, Counter) %>%
  summarize(TotalSum = sum(Total)) %>%
  print() -> df.hw.gir.tot
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Repetition'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 3
# Groups:   Repetition [3]
   Repetition Counter                                                                                               TotalSum
   <chr>      <chr>                                                                                                    <dbl>
 1 1          L1-access                                                                                              3.87e11
 2 1          L1-misses                                                                                              4.55e 9
 3 1          LL-access                                                                                              3.79e 8
 4 1          LL-misses                                                                                              2.10e 8
 5 1          Mapping slowness: 3.95678 M instructions per read at 2469.94 M mapping instructions per inclusive CPâ€¦ NA      
 6 1          Used 3956781932928 CPU instructions (not including output).                                           NA      
 7 1          cycles                                                                                                 7.84e11
 8 1          instructions                                                                                           1.33e12
 9 2          L1-access                                                                                              3.87e11
10 2          L1-misses                                                                                              4.52e 9
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.hw.gir.tot %>%
  filter(!is.na(TotalSum)) %>%
  ungroup() %>%
  group_by(Counter) %>%
  summarize(Mean = mean(TotalSum))
#+end_src

#+RESULTS:
: # A tibble: 6 Ã— 2
:   Counter         Mean
:   <chr>          <dbl>
: 1 L1-access    3.87e11
: 2 L1-misses    4.54e 9
: 3 LL-access    3.83e 8
: 4 LL-misses    2.12e 8
: 5 cycles       7.95e11
: 6 instructions 1.33e12

#+begin_src R :results output :session *R* :exports both
1.33e12 / 7.95e11
#(Number of Cache Hits) / (Number of Cache Hits + Number of Cache Misses) * 100% 
4.54e9 / 3.87e11
2.12e8 / 3.83e8 
#+end_src

#+RESULTS:
: [1] 1.672956
: [1] 0.01173127
: [1] 0.5535248


** Giraffe
#+begin_src R :results output :session *R* :exports both
df <- read_csv("./iiswc25/intelxeonplatinum8260cpu@240ghz/1/1_0_vg_cache_ipc_giraffe.csv",
               col_names=FALSE,
               col_types=cols()) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
indexing 1_0_vg_cache_ipc_giraffe.csv [=--------------------------------------------------------------] 265.44GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [==============-------------------------------------------------] 848.09MB/s, eta:  1sindexing 1_0_vg_cache_ipc_giraffe.csv [=================----------------------------------------------] 976.72MB/s, eta:  1sindexing 1_0_vg_cache_ipc_giraffe.csv [=====================--------------------------------------------] 1.10GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=========================----------------------------------------] 1.24GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=============================------------------------------------] 1.36GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [================================---------------------------------] 1.45GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===================================------------------------------] 1.52GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=======================================--------------------------] 1.61GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [==========================================-----------------------] 1.68GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===============================================------------------] 1.79GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=================================================----------------] 1.83GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=====================================================------------] 1.89GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=======================================================----------] 1.92GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===========================================================------] 1.96GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=============================================================----] 1.99GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===============================================================--] 1.93GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===============================================================--] 1.89GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [===============================================================--] 1.84GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [================================================================-] 1.82GB/s, eta:  0sindexing 1_0_vg_cache_ipc_giraffe.csv [=================================================================] 1.82GB/s, eta:  0s                                                                                                                            # A tibble: 24,744,736 Ã— 3
   X1               X2    X3
   <chr>         <dbl> <dbl>
 1 cycles       349625     0
 2 instructions 305622     0
 3 cycles        31925     0
 4 instructions  30718     0
 5 cycles       134748     0
 6 instructions 194132     0
 7 cycles       107164     0
 8 instructions 182294     0
 9 cycles        46681     0
10 instructions  57136     0
# â„¹ 24,744,726 more rows
# â„¹ Use `print(n = ...)` to see more rows
Warning message:
One or more parsing issues, call `problems()` on your data frame for details, e.g.:
  dat <- vroom(...)
  problems(dat)
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
  group_by(X1) %>%
  summarize(Total = sum(X2))
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 2
:   X1                                                                                                                   Total
:   <chr>                                                                                                                <dbl>
: 1 Mapping slowness: 4.30638 M instructions per read at 2769.42 M mapping instructions per inclusive CPU-second            NA
: 2 Used 4306384243517 CPU instructions (not including output).                                                             NA
: 3 cycles                                                                                                        902552009713
: 4 instructions                                                                                                 1333599330390


#+begin_example
instructions, 1375523537087.3535156250, 0
cycles, 705191815715.5950927734, 0
#+end_example

#+begin_src R :results output :session *R* :exports both
1333599330390 * 100 / 1375523537087
#+end_src

#+RESULTS:
: [1] 96.95213

#+begin_src R :results output :session *R* :exports both
1375523537087 / 705191815715 # Proxy
1333599330390 / 902552009713 # Giraffe
#+end_src

#+RESULTS:
: [1] 1.950567
: [1] 1.477587

* 3 - Validate scalability between miniGiraffe and Giraffe on kaffirlime
** Using kaffirlime and old data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=TRUE,
             col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="scalability_local-intel",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 1
:   SOURCE                                                               
:   <chr>                                                                
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/scalability_local-intel.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "EXP"), sep="/") %>%
    separate(EXP, c("XX6", "Machine"), sep="-") %>%
    mutate(Machine = str_replace_all(Machine, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.mini
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 64 Ã— 8
   Machine Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
   <chr>     <dbl> <chr>         <dbl> <chr>          <dbl>    <dbl>   <dbl>
 1 intel         1 omp             256 1000GP         186.      186.    1   
 2 intel         1 omp             256 chm13        27045.    27045.    1   
 3 intel         1 omp             256 grch38        2741.     2741.    1   
 4 intel         1 omp             256 yeast         4302.     4302.    1   
 5 intel         1 ws              256 1000GP         187.      187.    1   
 6 intel         1 ws              256 chm13        27395.    27395.    1   
 7 intel         1 ws              256 grch38        2767.     2767.    1   
 8 intel         1 ws              256 yeast         4322.     4322.    1   
 9 intel         2 omp             256 1000GP          95.5     186.    1.95
10 intel         2 omp             256 chm13        13687.    27045.    1.98
# â„¹ 54 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.gir <- read_csv("./ispass-paper/ispass7-all-times.csv.gz",
               col_names=TRUE,
               progress=FALSE,
               col_types=cols()) %>%
    print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 2,148 Ã— 6
   TestCase Repetition TotalThreads Query           Thread Total
   <chr>         <dbl>        <dbl> <chr>            <dbl> <dbl>
 1 A                 1            1 total_extension      0 171. 
 2 A                 1            1 total_main           0 686. 
 3 A                 1           16 total_extension      0  11.2
 4 A                 1           16 total_extension      1  12.0
 5 A                 1           16 total_extension      2  11.8
 6 A                 1           16 total_extension      3  11.7
 7 A                 1           16 total_extension      4  12.0
 8 A                 1           16 total_extension      5  11.6
 9 A                 1           16 total_extension      6  11.8
10 A                 1           16 total_extension      7  11.9
# â„¹ 2,138 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.mini %>%
  filter(Scheduler == "omp") %>%
  mutate(TestCase = case_when(InputSet == "1000GP" ~ "A",
                              InputSet == "chm13" ~ "C",
                              InputSet == "grch38" ~ "D",
                              InputSet == "yeast" ~ "B")) %>%
  rename(Makespan = AvgMakespan) %>%
  select(TestCase, Threads, Makespan, Baseline, Speedup) %>%
  mutate(Origin = "miniGiraffe") %>%
  print() -> df.mini
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 Ã— 6
   TestCase Threads Makespan Baseline Speedup Origin     
   <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>      
 1 A              1    186.      186.    1    miniGiraffe
 2 C              1  27045.    27045.    1    miniGiraffe
 3 D              1   2741.     2741.    1    miniGiraffe
 4 B              1   4302.     4302.    1    miniGiraffe
 5 A              2     95.5     186.    1.95 miniGiraffe
 6 C              2  13687.    27045.    1.98 miniGiraffe
 7 D              2   1395.     2741.    1.96 miniGiraffe
 8 B              2   2209.     4302.    1.95 miniGiraffe
 9 A              4     50.1     186.    3.71 miniGiraffe
10 C              4   7264.    27045.    3.72 miniGiraffe
# â„¹ 22 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.gir %>%
  filter(Query == "total_extension") %>%
  rename(Threads = TotalThreads) %>%
  group_by(TestCase, Threads) %>%
  summarize(Makespan = max(Total)) %>%
  ungroup() %>%
  group_by(TestCase) %>%
  mutate(Baseline = first(Makespan),
         Speedup = Baseline/Makespan,
         Origin = "Giraffe") %>%
  print() -> df.gir
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'TestCase'. You can override using the `.groups` argument.
# A tibble: 36 Ã— 6
# Groups:   TestCase [4]
   TestCase Threads Makespan Baseline Speedup Origin 
   <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>  
 1 A              1   171.       171.    1    Giraffe
 2 A              2    88.1      171.    1.94 Giraffe
 3 A              4    45.8      171.    3.73 Giraffe
 4 A              8    24.1      171.    7.08 Giraffe
 5 A             16    12.4      171.   13.8  Giraffe
 6 A             24     8.59     171.   19.9  Giraffe
 7 A             32     7.26     171.   23.5  Giraffe
 8 A             35     6.87     171.   24.9  Giraffe
 9 A             48     6.65     171.   25.6  Giraffe
10 B              1  4068.      4068.    1    Giraffe
# â„¹ 26 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.mini %>%
  bind_rows(df.gir) %>%
  print() -> df.3
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 68 Ã— 6
   TestCase Threads Makespan Baseline Speedup Origin     
   <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>      
 1 A              1    186.      186.    1    miniGiraffe
 2 C              1  27045.    27045.    1    miniGiraffe
 3 D              1   2741.     2741.    1    miniGiraffe
 4 B              1   4302.     4302.    1    miniGiraffe
 5 A              2     95.5     186.    1.95 miniGiraffe
 6 C              2  13687.    27045.    1.98 miniGiraffe
 7 D              2   1395.     2741.    1.96 miniGiraffe
 8 B              2   2209.     4302.    1.95 miniGiraffe
 9 A              4     50.1     186.    3.71 miniGiraffe
10 C              4   7264.    27045.    3.72 miniGiraffe
# â„¹ 58 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.3 %>%
  filter(Threads == 1) %>%
  arrange(TestCase)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 6
  TestCase Threads Makespan Baseline Speedup Origin     
  <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>      
1 A              1     186.     186.       1 miniGiraffe
2 A              1     171.     171.       1 Giraffe    
3 B              1    4302.    4302.       1 miniGiraffe
4 B              1    4068.    4068.       1 Giraffe    
5 C              1   27045.   27045.       1 miniGiraffe
6 C              1   24989.   24989.       1 Giraffe    
7 D              1    2741.    2741.       1 miniGiraffe
8 D              1    2561.    2561.       1 Giraffe
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 600 :session *R*
df.3 %>%
  filter(Threads %in% c(1, 2, 4, 8, 24, 48)) %>%
  mutate(Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Origin)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~TestCase, scales="free") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figuremEGwN3.png]]

Line plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 600 :session *R*
df.3 %>%
  filter(Threads %in% c(1, 2, 4, 5, 24, 48)) %>%
  ggplot(aes(x=Threads, y=Speedup, color=Origin)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.3$Threads) +
  facet_wrap(~TestCase, scales="free_x") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figurecz2gJI.png]]

#+begin_src R :results output :session *R* :exports both
df.3 %>%
  filter(Threads %in% c(1, 2, 4, 8, 16, 24, 48)) %>%
  group_by(TestCase, Threads) %>%
  arrange(TestCase, Makespan) %>%
  mutate(Og = first(Makespan),
         Diff = 100 * Makespan / first(Makespan)) %>%
  filter(Origin == "miniGiraffe") %>%
  print(n=24)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 8
# Groups:   TestCase, Threads [24]
   TestCase Threads Makespan Baseline Speedup Origin            Og  Diff
   <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>          <dbl> <dbl>
 1 A             48     9.06     186.   20.5  miniGiraffe     6.65  136.
 2 A             24    10.6      186.   17.5  miniGiraffe     8.59  124.
 3 A              8    26.6      186.    7.00 miniGiraffe    24.1   110.
 4 A              4    50.1      186.    3.71 miniGiraffe    45.8   109.
 5 A              2    95.5      186.    1.95 miniGiraffe    88.1   108.
 6 A              1   186.       186.    1    miniGiraffe   171.    109.
 7 B             48   149.      4302.   28.8  miniGiraffe   121.    124.
 8 B             24   206.      4302.   20.9  miniGiraffe   188.    109.
 9 B              8   577.      4302.    7.46 miniGiraffe   555.    104.
10 B              4  1128.      4302.    3.81 miniGiraffe  1075.    105.
11 B              2  2209.      4302.    1.95 miniGiraffe  2082.    106.
12 B              1  4302.      4302.    1    miniGiraffe  4068.    106.
13 C             48   825.     27045.   32.8  miniGiraffe   770.    107.
14 C             24  1275.     27045.   21.2  miniGiraffe  1190.    107.
15 C              8  3721.     27045.    7.27 miniGiraffe  3518.    106.
16 C              4  7264.     27045.    3.72 miniGiraffe  6573.    111.
17 C              2 13687.     27045.    1.98 miniGiraffe 12566.    109.
18 C              1 27045.     27045.    1    miniGiraffe 24989.    108.
19 D             48    93.9     2741.   29.2  miniGiraffe    81.9   115.
20 D             24   139.      2741.   19.7  miniGiraffe   126.    110.
21 D              8   379.      2741.    7.24 miniGiraffe   354.    107.
22 D              4   735.      2741.    3.73 miniGiraffe   685.    107.
23 D              2  1395.      2741.    1.96 miniGiraffe  1299.    107.
24 D              1  2741.      2741.    1    miniGiraffe  2561.    107.
#+end_example

#+begin_src R :results output :session *R* :exports both
df.3 %>%
  filter(Threads == 48) %>%
  arrange(Origin) %>%
  group_by(TestCase) %>%
  mutate(Og = 100 * Makespan / first(Makespan)) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 7
# Groups:   TestCase [4]
  TestCase Threads Makespan Baseline Speedup Origin         Og
  <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>       <dbl>
1 A             48     6.65     171.    25.6 Giraffe      100 
2 B             48   121.      4068.    33.7 Giraffe      100 
3 C             48   770.     24989.    32.5 Giraffe      100 
4 D             48    81.9     2561.    31.3 Giraffe      100 
5 A             48     9.06     186.    20.5 miniGiraffe  136.
6 C             48   825.     27045.    32.8 miniGiraffe  107.
7 D             48    93.9     2741.    29.2 miniGiraffe  115.
8 B             48   149.      4302.    28.8 miniGiraffe  124.
#+end_example

** Using keylime new data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
      rename(Query = X1, Start = X2, End = X3, Thread = X4)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="A-human(.*)parsed",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 6 Ã— 1
:   SOURCE                                                                                                        
:   <chr>                                                                                                         
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_1_A-human_giraffe_parsed.csv    
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_1_A-human_miniGiraffe_parsed.csv
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_2_A-human_giraffe_parsed.csv    
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_2_A-human_miniGiraffe_parsed.csv
: 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_3_A-human_giraffe_parsed.csv    
: 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/3/1_3_A-human_miniGiraffe_parsed.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Threads", "Repetition", "InputSet", "Source", "XX8"), sep="_") %>%
    #mutate(Machine = str_replace_all(Machine, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.val
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 74,234,205 Ã— 8
   Threads Repetition InputSet Source  Query               Start       End Thread
   <chr>   <chr>      <chr>    <chr>   <chr>               <dbl>     <dbl>  <dbl>
 1 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 2 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 3 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 4 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 5 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 6 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 7 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 8 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
 9 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
10 1       1          A-human  giraffe total_extension 13589144. 13589144.      0
# â„¹ 74,234,195 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.val %>%
  mutate(Duration = End - Start) %>%
  group_by(Repetition, InputSet, Source, Query) %>%
  summarize(Runtime = sum(Duration)) %>%
  print() -> df.val.run
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Repetition', 'InputSet', 'Source'. You can override using the `.groups` argument.
# A tibble: 9 Ã— 5
# Groups:   Repetition, InputSet, Source [6]
  Repetition InputSet Source      Query           Runtime
  <chr>      <chr>    <chr>       <chr>             <dbl>
1 1          A-human  giraffe     total_extension    181.
2 1          A-human  giraffe     total_main         704.
3 1          A-human  miniGiraffe seeds-loop         204.
4 2          A-human  giraffe     total_extension    180.
5 2          A-human  giraffe     total_main         706.
6 2          A-human  miniGiraffe seeds-loop         203.
7 3          A-human  giraffe     total_extension    179.
8 3          A-human  giraffe     total_main         705.
9 3          A-human  miniGiraffe seeds-loop         210.
#+end_example

#+begin_src R :results output :session *R* :exports both
df.val.run %>%
  filter(Query %in% c("total_extension", "seeds-loop")) %>%
  ungroup() %>%
  group_by(InputSet, Source) %>%
  summarize(AvgRun = mean(Runtime))
#+end_src

#+RESULTS:
: `summarise()` has grouped output by 'InputSet'. You can override using the `.groups` argument.
: # A tibble: 2 Ã— 3
: # Groups:   InputSet [1]
:   InputSet Source      AvgRun
:   <chr>    <chr>        <dbl>
: 1 A-human  giraffe       180.
: 2 A-human  miniGiraffe   206.

There are the results from previuos run

#+begin_example
# A tibble: 8 Ã— 6
  TestCase Threads Makespan Baseline Speedup Origin     
  <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>      
1 A              1     186.     186.       1 miniGiraffe
2 A              1     171.     171.       1 Giraffe    
3 B              1    4302.    4302.       1 miniGiraffe
4 B              1    4068.    4068.       1 Giraffe    
5 C              1   27045.   27045.       1 miniGiraffe
6 C              1   24989.   24989.       1 Giraffe    
7 D              1    2741.    2741.       1 miniGiraffe
8 D              1    2561.    2561.       1 Giraffe
#+end_example

The difference is even higher in the new results...

#+begin_src R :results output :session *R* :exports both
(180 - 206) / 180 * 100
(171 - 186) / 171 * 100
#+end_src

#+RESULTS:
: [1] -14.44444
: [1] -8.77193

** Small check
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

df <- read_csv("./iiswc25/ispass7-A-1-48.csv.gz",
             col_names=FALSE,
             progress=FALSE,
             col_types=cols())
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
df %>%
  rename(Query = X1, Start = X2, End = X3, Thread = X4) %>%
  mutate(Duration = End - Start) %>%
  group_by(Query, Thread) %>%
  summarize(Runtime = sum(Duration)) %>%
  ungroup() %>%
  group_by(Query) %>%
  summarize(Makespan = max(Runtime)) %>%
  filter(Query == "total_extension") %>%
  print() -> df.test
#+end_src

#+RESULTS:
: `summarise()` has grouped output by 'Query'. You can override using the `.groups` argument.
: # A tibble: 1 Ã— 2
:   Query           Makespan
:   <chr>              <dbl>
: 1 total_extension     6.97

#+begin_src R :results output :session *R* :exports both
df.3 %>%
  filter(Threads == 48 & TestCase == "A")
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 6
:   TestCase Threads Makespan Baseline Speedup Origin     
:   <chr>      <dbl>    <dbl>    <dbl>   <dbl> <chr>      
: 1 A             48     9.06     186.    20.5 miniGiraffe
: 2 A             48     6.65     171.    25.6 Giraffe

Ok, there's a difference between Giraffe and miniGiraffe.
* 5 - Scalability analysis
** Runtime
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=TRUE,
             col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="scalability(.*).csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 1
:   SOURCE                                                               
:   <chr>                                                                
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/scalability_chi-arm.csv    
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/scalability_chi-intel.csv  
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/scalability_local-amd.csv  
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/scalability_local-intel.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "EXP"), sep="/") %>%
    separate(EXP, c("XX6", "Machine"), sep="_") %>%
    mutate(Machine = str_replace_all(Machine, "(.csv)", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                                InputSet == "yeast" ~ "B-yeast",
                                InputSet == "grch38" ~ "C-HPRC",
                                InputSet == "chm13" ~ "D-HPRC")) %>%
    print() -> df.5
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 212 Ã— 8
   Machine Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
   <chr>     <dbl> <chr>         <dbl> <chr>          <dbl>    <dbl>   <dbl>
 1 chi-arm       1 omp             256 A-human         401.     401.    1   
 2 chi-arm       1 omp             256 C-HPRC         5706.    5706.    1   
 3 chi-arm       1 omp             256 B-yeast        8682.    8682.    1   
 4 chi-arm       1 ws              256 A-human         400.     400.    1   
 5 chi-arm       1 ws              256 C-HPRC         5626.    5626.    1   
 6 chi-arm       2 omp             256 A-human         211.     401.    1.90
 7 chi-arm       2 omp             256 C-HPRC         2864.    5706.    1.99
 8 chi-arm       2 omp             256 B-yeast        4348.    8682.    2.00
 9 chi-arm       2 ws              256 A-human         209.     400.    1.92
10 chi-arm       2 ws              256 C-HPRC         2838.    5626.    1.98
# â„¹ 202 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 600 :session *R*
df.5 %>%
  mutate(Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=InputSet)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Machine, scales="free") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figureSTIuMd.png]]

Line plot

#+begin_src R :results output :session *R* :exports both
colors_list <- c(
  "#f1a346",  # Light Amber
  "#7a4f91",  # Lavender Purple
  "#3c6e91",  # Steel Blue
  "#e67e22"  # Vivid Orange
)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session *R*
p <- df.5 %>%
  filter(Scheduler == "omp") %>%
  mutate(Machine = factor(Machine, c("local-intel", "local-amd", "chi-arm", "chi-intel"))) %>%
  ggplot(aes(x=Threads, y=Speedup, color=InputSet)) +
  geom_line() +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black") +
  scale_color_manual(values=colors_list) + 
  scale_x_continuous("Threads", breaks=df.5$Threads) +
  facet_wrap(~Machine, scales="free_x") +
  ylim(0, 100) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figureCsLz6J.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/scalability-diff-machines.pdf :exports both :width 8 :height 6 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/scalability-diff-machines.pdf]]

#+begin_src R :results output :session *R* :exports both
options(digits = 5)
df.5 %>%
  filter(Machine == "chi-intel") %>%
  group_by(InputSet) %>%
  arrange(AvgMakespan) %>%
  filter(AvgMakespan == first(AvgMakespan)) %>%
  print() -> best_result
#+end_src

#+RESULTS:
: # A tibble: 3 Ã— 8
: # Groups:   InputSet [3]
:   Machine   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
:   <chr>       <dbl> <chr>         <dbl> <chr>          <dbl>    <dbl>   <dbl>
: 1 chi-intel     128 omp             256 A-human         3.44     214.    62.3
: 2 chi-intel     160 omp             256 C-HPRC         59.4     3162.    53.3
: 3 chi-intel     160 omp             256 B-yeast        73.4     4946.    67.3

#+begin_src R :results output :session *R* :exports both
best_result$AvgMakespan
#+end_src

#+RESULTS:
: [1]  3.4376 59.3609 73.4389

** Hw metrics
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
      rename(Metric = X1, Result = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="hwmetrics",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_0_1000GP_hwmetrics1_miniGiraffe.csv  
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_0_1000GP_hwmetrics2_miniGiraffe.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_1_1000GP_hwmetrics1_miniGiraffe.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_1_1000GP_hwmetrics2_miniGiraffe.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_2_1000GP_hwmetrics1_miniGiraffe.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-4/512_1_omp_2_1000GP_hwmetrics2_miniGiraffe.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_0_1000GP_hwmetrics1_miniGiraffe.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_0_1000GP_hwmetrics2_miniGiraffe.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_1_1000GP_hwmetrics1_miniGiraffe.csv
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_1_1000GP_hwmetrics2_miniGiraffe.csv
11 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_2_1000GP_hwmetrics1_miniGiraffe.csv
12 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/1/512_1_omp_2_1000GP_hwmetrics2_miniGiraffe.csv
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "Machine", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("XX8", "XX9", "XX10", "Repetition", "InputSet", "XX11", "XX12"), sep="_") %>%
    select(-contains("XX")) %>%
    mutate(Machine = case_when(Machine == "amdepyc955464-coreprocessor" ~ "amd",
                               Machine == "intelxeonplatinum8260cpu@240ghz" ~ "intel")) %>% 
    unnest(DATA) %>%
    print() -> df.hw5
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 72 Ã— 6
   Machine Repetition InputSet Metric         Result Thread
   <chr>   <chr>      <chr>    <chr>           <dbl>  <dbl>
 1 amd     0          1000GP   instructions  1.37e12      0
 2 amd     0          1000GP   cycles        5.05e11      0
 3 amd     0          1000GP   L1-access     5.88e11      0
 4 amd     0          1000GP   L1-misses     1.79e 9      0
 5 amd     0          1000GP   LLC-access    5.88e11      0
 6 amd     0          1000GP   LLC-misses    1.79e 9      0
 7 amd     0          1000GP   branch-issued 2.22e11      0
 8 amd     0          1000GP   branch-misses 3.97e 9      0
 9 amd     0          1000GP   DTLB-access   2.19e 8      0
10 amd     0          1000GP   DTLB-misses   3.83e 7      0
# â„¹ 62 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.hw5 %>%
  group_by(Machine, InputSet, Metric) %>%
  summarize(Avg = mean(Result),
            Median = median(Result)) %>%
  print() -> df.hw5.summ
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Machine', 'InputSet'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Machine, InputSet [2]
   Machine InputSet Metric                  Avg        Median
   <chr>   <chr>    <chr>                 <dbl>         <dbl>
 1 amd     1000GP   DTLB-access      205425758.    200024367.
 2 amd     1000GP   DTLB-misses       38084535.     37960571.
 3 amd     1000GP   ITLB-access         811999.       817038.
 4 amd     1000GP   ITLB-misses        6590708.      6590472.
 5 amd     1000GP   L1-access     587677517376. 587483372985.
 6 amd     1000GP   L1-misses       1768983342.   1759938080.
 7 amd     1000GP   LLC-access    587682260354. 587661929911.
 8 amd     1000GP   LLC-misses      1768338075.   1759547043.
 9 amd     1000GP   branch-issued 221723711256. 221712129097.
10 amd     1000GP   branch-misses   3982139181.   3976449007.
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.hw5.summ %>%
  select(-Median) %>%
  filter(Metric %in% c("LLC-access", "LLC-misses", "L1-access", "L1-misses")) %>%
  pivot_wider(names_from = Metric, values_from = Avg) %>%
  mutate(RatioLC = 100 * `LLC-misses` / `LLC-access`) %>%
  mutate(RatioL1 = 100 * `L1-misses` / `L1-access`)
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 8
: # Groups:   Machine, InputSet [2]
:   Machine InputSet   `L1-access` `L1-misses`  `LLC-access` `LLC-misses` RatioLC RatioL1
:   <chr>   <chr>            <dbl>       <dbl>         <dbl>        <dbl>   <dbl>   <dbl>
: 1 amd     1000GP   587677517376. 1768983342. 587682260354.  1768338075.   0.301   0.301
: 2 intel   1000GP   388765411147. 1177250224. 388734700182.  1175801258.   0.302   0.303

#+begin_src R :results output :session *R* :exports both
df.hw5.summ %>%
  select(-Median) %>%
  filter(Metric %in% c("instructions", "cycles")) %>%
  pivot_wider(names_from = Metric, values_from = Avg) %>%
  mutate(IPC = instructions/cycles)
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 5
: # Groups:   Machine, InputSet [2]
:   Machine InputSet        cycles instructions   IPC
:   <chr>   <chr>            <dbl>        <dbl> <dbl>
: 1 amd     1000GP   505707810086.      1.37e12  2.71
: 2 intel   1000GP   704101787983.      1.38e12  1.95

#+begin_src R :results output :session *R* :exports both
df.hw5.summ %>%
  select(-Median) %>%
  filter(Metric %in% c("DTLB-access", "DTLB-misses", "branch-issued", "branch-misses")) %>%
  pivot_wider(names_from = Metric, values_from = Avg) %>%
  mutate(RatioDTLB = `DTLB-misses` * 100/`DTLB-access`,
         RatioBranch = `branch-misses` * 100/`branch-issued`)
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 8
: # Groups:   Machine, InputSet [2]
:   Machine InputSet `DTLB-access` `DTLB-misses` `branch-issued` `branch-misses` RatioDTLB RatioBranch
:   <chr>   <chr>            <dbl>         <dbl>           <dbl>           <dbl>     <dbl>       <dbl>
: 1 amd     1000GP      205425758.     38084535.   221723711256.     3982139181.  18.5            1.80
: 2 intel   1000GP   388735976158.     36153698.   222991333209.     4770835122.   0.00930        2.14

* 5.1 - Collect scalability on Intel
** 1000GP
Ran for 6.5 test (can reuse)
** Yeast
Running on June 3
** Grch38
Ran on June 3 (1 exec)
** Chm13
Ran on May 25 (1 exec)
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

Getting some results from another experiment id
#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5"
df.1000GP <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="1000GP(.*)256",
                                 recursive=TRUE,
                                 full.names=TRUE)
             ) %>% print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 48 Ã— 1
   SOURCE                                                                                                             
   <chr>                                                                                                              
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffe256.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffe256.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffe256.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_ws_0_1000GP_miniGiraffe256.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_ws_1_1000GP_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_ws_2_1000GP_miniGiraffe256.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_2_omp_0_1000GP_miniGiraffe256.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_2_omp_1_1000GP_miniGiraffe256.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_2_omp_2_1000GP_miniGiraffe256.csv
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_2_ws_0_1000GP_miniGiraffe256.csv 
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Now get from current experiment id
#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             ) %>%
  bind_rows(df.1000GP) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 96 Ã— 1
   SOURCE                                                                                                             
   <chr>                                                                                                              
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_chm13_miniGiraffe256.csv 
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_grch38_miniGiraffe256.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_yeast_miniGiraffe256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_chm13_miniGiraffe256.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_grch38_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_yeast_miniGiraffe256.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_chm13_miniGiraffe256.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_grch38_miniGiraffe256.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_yeast_miniGiraffe256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_ws_0_chm13_miniGiraffe256.csv  
# â„¹ 86 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "InputSet", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.5.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 3,260 Ã— 9
   Batches Threads Scheduler Repetition InputSet CacheSize Query           Runtime Thread
     <int>   <int> <chr>          <int> <chr>        <int> <chr>             <dbl>  <dbl>
 1     512       1 omp                0 chm13          256 reading-gbz      31.7        0
 2     512       1 omp                0 chm13          256 reading-seeds  1431.         0
 3     512       1 omp                0 chm13          256 seeds-loop    27045.         0
 4     512       1 omp                0 grch38         256 reading-gbz      21.8        0
 5     512       1 omp                0 grch38         256 reading-seeds   138.         0
 6     512       1 omp                0 grch38         256 seeds-loop     2741.         0
 7     512       1 omp                0 yeast          256 reading-gbz       0.612      0
 8     512       1 omp                0 yeast          256 reading-seeds    54.1        0
 9     512       1 omp                0 yeast          256 seeds-loop     4302.         0
10     512       1 ws                 0 chm13          256 reading-gbz      32.7        0
# â„¹ 3,250 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.5.1 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize, InputSet) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize, InputSet) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.5.1.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can override using the `.groups`
argument.
`summarise()` has grouped output by 'Threads', 'Scheduler', 'CacheSize'. You can override using the `.groups` argument.
# A tibble: 64 Ã— 6
# Groups:   Threads, Scheduler, CacheSize [16]
   Threads Scheduler CacheSize InputSet AvgMakespan MedianMakespan
     <int> <chr>         <int> <chr>          <dbl>          <dbl>
 1       1 omp             256 1000GP         186.           185. 
 2       1 omp             256 chm13        27045.         27045. 
 3       1 omp             256 grch38        2741.          2741. 
 4       1 omp             256 yeast         4302.          4302. 
 5       1 ws              256 1000GP         187.           187. 
 6       1 ws              256 chm13        27395.         27395. 
 7       1 ws              256 grch38        2767.          2767. 
 8       1 ws              256 yeast         4322.          4322. 
 9       2 omp             256 1000GP          95.5           95.1
10       2 omp             256 chm13        13687.         13687. 
# â„¹ 54 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.1.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(InputSet~Scheduler, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureCr1Ifm.png]]

#+begin_src R :results output :session *R* :exports both
df.5.1.makespan %>%
  ungroup() %>%
  arrange(Threads) %>%
  group_by(Scheduler, InputSet) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(-MedianMakespan) %>%
  write_csv("iiswc25/scalability_local-intel.csv") %>%
  print() -> df.5.1.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 62.60PB/s                                                                                                                          # A tibble: 64 Ã— 7
# Groups:   Scheduler, InputSet [8]
   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
     <int> <chr>         <int> <chr>          <dbl>    <dbl>   <dbl>
 1       1 omp             256 1000GP         186.      186.    1   
 2       1 omp             256 chm13        27045.    27045.    1   
 3       1 omp             256 grch38        2741.     2741.    1   
 4       1 omp             256 yeast         4302.     4302.    1   
 5       1 ws              256 1000GP         187.      187.    1   
 6       1 ws              256 chm13        27395.    27395.    1   
 7       1 ws              256 grch38        2767.     2767.    1   
 8       1 ws              256 yeast         4322.     4322.    1   
 9       2 omp             256 1000GP          95.5     186.    1.95
10       2 omp             256 chm13        13687.    27045.    1.98
# â„¹ 54 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.1.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figure8F4cTP.png]]

* 5.2 - Collect scalability on AMD
** 1000GP
Ran on May 22
** Yeast
Ran 1 exec on May 26
** Grch38
Ran on May 22
** Chm13
Ran on May 23 (1 exec) - Should set to run one more on the weekend
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 120 Ã— 1
   SOURCE                                                                                                         
   <chr>                                                                                                          
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_0_1000GP_miniGiraffe256.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_0_chm13_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_0_grch38_miniGiraffe256.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_0_yeast_miniGiraffe256.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_1_1000GP_miniGiraffe256.csv
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_2_1000GP_miniGiraffe256.csv
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_ws_0_1000GP_miniGiraffe256.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_ws_0_chm13_miniGiraffe256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_ws_0_grch38_miniGiraffe256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_ws_0_yeast_miniGiraffe256.csv  
# â„¹ 110 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "InputSet", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.5.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 5,316 Ã— 9
   Batches Threads Scheduler Repetition InputSet CacheSize Query           Runtime Thread
     <int>   <int> <chr>          <int> <chr>        <int> <chr>             <dbl>  <dbl>
 1     512       1 omp                0 1000GP         256 reading-gbz      31.1        0
 2     512       1 omp                0 1000GP         256 reading-seeds    13.4        0
 3     512       1 omp                0 1000GP         256 seeds-loop      141.         0
 4     512       1 omp                0 chm13          256 reading-gbz      17.3        0
 5     512       1 omp                0 chm13          256 reading-seeds  1080.         0
 6     512       1 omp                0 chm13          256 seeds-loop    20355.         0
 7     512       1 omp                0 grch38         256 reading-gbz      16.0        0
 8     512       1 omp                0 grch38         256 reading-seeds   109.         0
 9     512       1 omp                0 grch38         256 seeds-loop     2054.         0
10     512       1 omp                0 yeast          256 reading-gbz       0.410      0
# â„¹ 5,306 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.5.2 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize, InputSet) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize, InputSet) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.5.2.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can override using the `.groups`
argument.
`summarise()` has grouped output by 'Threads', 'Scheduler', 'CacheSize'. You can override using the `.groups` argument.
# A tibble: 80 Ã— 6
# Groups:   Threads, Scheduler, CacheSize [20]
   Threads Scheduler CacheSize InputSet AvgMakespan MedianMakespan
     <int> <chr>         <int> <chr>          <dbl>          <dbl>
 1       1 omp             256 1000GP         139.           140. 
 2       1 omp             256 chm13        20355.         20355. 
 3       1 omp             256 grch38        2054.          2054. 
 4       1 omp             256 yeast         3290.          3290. 
 5       1 ws              256 1000GP         140.           140. 
 6       1 ws              256 chm13        20453.         20453. 
 7       1 ws              256 grch38        2072.          2072. 
 8       1 ws              256 yeast         3223.          3223. 
 9       2 omp             256 1000GP          69.9           69.9
10       2 omp             256 chm13        10190.         10190. 
# â„¹ 70 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.2.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(InputSet~Scheduler, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-cnMNF9/figurenLpVZo.png]]

#+begin_src R :results output :session *R* :exports both
df.5.2.makespan %>%
  ungroup() %>%
  arrange(Threads) %>%
  group_by(Scheduler, InputSet) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(-MedianMakespan) %>%
  write_csv("iiswc25/scalability_local-amd.csv") %>%
  print() -> df.5.2.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 66.58PB/s                                                                                                                          # A tibble: 80 Ã— 7
# Groups:   Scheduler, InputSet [8]
   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
     <int> <chr>         <int> <chr>          <dbl>    <dbl>   <dbl>
 1       1 omp             256 1000GP         139.      139.    1   
 2       1 omp             256 chm13        20355.    20355.    1   
 3       1 omp             256 grch38        2054.     2054.    1   
 4       1 omp             256 yeast         3290.     3290.    1   
 5       1 ws              256 1000GP         140.      140.    1   
 6       1 ws              256 chm13        20453.    20453.    1   
 7       1 ws              256 grch38        2072.     2072.    1   
 8       1 ws              256 yeast         3223.     3223.    1   
 9       2 omp             256 1000GP          69.9     139.    1.99
10       2 omp             256 chm13        10190.    20355.    2.00
# â„¹ 70 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.2.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-cnMNF9/figureJTOkFP.png]]

* 5.3 - Collect scalability on ARM
** 1000GP
Ran on May22 with miniGiraffe 256, NC, and 2048
** Yeast
** Grch38
Ran on May23 miniGiraffe256
** Chm13
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="256",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 91 Ã— 1
   SOURCE                                                                                           
   <chr>                                                                                            
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_0_1000GP_miniGiraffe256.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_0_grch38_miniGiraffe256.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_0_yeast_256.csv            
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_1_1000GP_miniGiraffe256.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_1_grch38_miniGiraffe256.csv
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_2_1000GP_miniGiraffe256.csv
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_omp_2_grch38_miniGiraffe256.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_ws_0_1000GP_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_ws_0_grch38_miniGiraffe256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/5-3/512_1_ws_1_1000GP_miniGiraffe256.csv 
# â„¹ 81 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "InputSet", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.5.3
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,833 Ã— 9
   Batches Threads Scheduler Repetition InputSet CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int> <chr>        <int> <chr>           <dbl>  <dbl>
 1     512       1 omp                0 1000GP         256 reading-gbz    123.        0
 2     512       1 omp                0 1000GP         256 reading-seeds   35.0       0
 3     512       1 omp                0 1000GP         256 seeds-loop     401.        0
 4     512       1 omp                0 grch38         256 reading-gbz     76.5       0
 5     512       1 omp                0 grch38         256 reading-seeds  287.        0
 6     512       1 omp                0 grch38         256 seeds-loop    5689.        0
 7     512       1 omp                0 yeast          256 reading-gbz      1.36      0
 8     512       1 omp                0 yeast          256 reading-seeds  107.        0
 9     512       1 omp                0 yeast          256 seeds-loop    8682.        0
10     512       1 omp                1 1000GP         256 reading-gbz    120.        0
# â„¹ 1,823 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.5.3 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize, InputSet) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize, InputSet) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.5.3.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can override using the `.groups`
argument.
`summarise()` has grouped output by 'Threads', 'Scheduler', 'CacheSize'. You can override using the `.groups` argument.
# A tibble: 35 Ã— 6
# Groups:   Threads, Scheduler, CacheSize [14]
   Threads Scheduler CacheSize InputSet AvgMakespan MedianMakespan
     <int> <chr>         <int> <chr>          <dbl>          <dbl>
 1       1 omp             256 1000GP          401.           401.
 2       1 omp             256 grch38         5706.          5689.
 3       1 omp             256 yeast          8682.          8682.
 4       1 ws              256 1000GP          400.           402.
 5       1 ws              256 grch38         5626.          5631.
 6       2 omp             256 1000GP          211.           211.
 7       2 omp             256 grch38         2864.          2866.
 8       2 omp             256 yeast          4348.          4348.
 9       2 ws              256 1000GP          209.           209.
10       2 ws              256 grch38         2838.          2835.
# â„¹ 25 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.3.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(InputSet~Scheduler, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureTSlIka.png]]

#+begin_src R :results output :session *R* :exports both
df.5.3.makespan %>%
  ungroup() %>%
  arrange(Threads) %>%
  group_by(Scheduler, InputSet) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(-MedianMakespan) %>%
  write_csv("iiswc25/scalability_chi-arm.csv") %>%
  print() -> df.5.3.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 59.07PB/s                                                                                                                          # A tibble: 35 Ã— 7
# Groups:   Scheduler, InputSet [5]
   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
     <int> <chr>         <int> <chr>          <dbl>    <dbl>   <dbl>
 1       1 omp             256 1000GP          401.     401.    1   
 2       1 omp             256 grch38         5706.    5706.    1   
 3       1 omp             256 yeast          8682.    8682.    1   
 4       1 ws              256 1000GP          400.     400.    1   
 5       1 ws              256 grch38         5626.    5626.    1   
 6       2 omp             256 1000GP          211.     401.    1.90
 7       2 omp             256 grch38         2864.    5706.    1.99
 8       2 omp             256 yeast          4348.    8682.    2.00
 9       2 ws              256 1000GP          209.     400.    1.92
10       2 ws              256 grch38         2838.    5626.    1.98
# â„¹ 25 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.3.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figurePVMjRc.png]]

* 5.5 - Collect scalability on chi-intel
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="256",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 66 Ã— 1
   SOURCE                                                                                                    
   <chr>                                                                                                     
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_0_1000GP_256.csv  
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_0_grch38_256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_0_yeast_256.csv   
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_1_1000GP_256.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_1_grch38_256.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_1_omp_1_yeast_256.csv   
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_128_omp_0_1000GP_256.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_128_omp_0_grch38_256.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_128_omp_0_yeast_256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/5-5/512_128_omp_1_1000GP_256.csv
# â„¹ 56 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "InputSet", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.5.5
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 3,630 Ã— 9
   Batches Threads Scheduler Repetition InputSet CacheSize Query          Runtime Thread
     <int>   <int> <chr>          <int> <chr>        <int> <chr>            <dbl>  <dbl>
 1     512       1 omp                0 1000GP         256 reading-gbz     93.0        0
 2     512       1 omp                0 1000GP         256 reading-seeds   19.7        0
 3     512       1 omp                0 1000GP         256 seeds-loop     215.         0
 4     512       1 omp                0 grch38         256 reading-gbz     31.9        0
 5     512       1 omp                0 grch38         256 reading-seeds  160.         0
 6     512       1 omp                0 grch38         256 seeds-loop    3175.         0
 7     512       1 omp                0 yeast          256 reading-gbz      0.907      0
 8     512       1 omp                0 yeast          256 reading-seeds   61.6        0
 9     512       1 omp                0 yeast          256 seeds-loop    4941.         0
10     512       1 omp                1 1000GP         256 reading-gbz     49.9        0
# â„¹ 3,620 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.5.5 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize, InputSet) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize, InputSet) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print(n=33) -> df.5.5.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can override using the `.groups`
argument.
`summarise()` has grouped output by 'Threads', 'Scheduler', 'CacheSize'. You can override using the `.groups` argument.
# A tibble: 33 Ã— 6
# Groups:   Threads, Scheduler, CacheSize [11]
   Threads Scheduler CacheSize InputSet AvgMakespan MedianMakespan
     <int> <chr>         <int> <chr>          <dbl>          <dbl>
 1       1 omp             256 1000GP        214.           214.  
 2       1 omp             256 grch38       3162.          3162.  
 3       1 omp             256 yeast        4946.          4946.  
 4       2 omp             256 1000GP        106.           106.  
 5       2 omp             256 grch38       1582.          1582.  
 6       2 omp             256 yeast        2471.          2471.  
 7       4 omp             256 1000GP         54.1           54.1 
 8       4 omp             256 grch38        801.           801.  
 9       4 omp             256 yeast        1241.          1241.  
10       8 omp             256 1000GP         28.0           28.0 
11       8 omp             256 grch38        401.           401.  
12       8 omp             256 yeast         620.           620.  
13      16 omp             256 1000GP         14.3           14.3 
14      16 omp             256 grch38        202.           202.  
15      16 omp             256 yeast         311.           311.  
16      32 omp             256 1000GP          7.23           7.23
17      32 omp             256 grch38        108.           108.  
18      32 omp             256 yeast         157.           157.  
19      64 omp             256 1000GP          4.55           4.55
20      64 omp             256 grch38         92.7           92.7 
21      64 omp             256 yeast          80.8           80.8 
22      72 omp             256 1000GP          4.52           4.52
23      72 omp             256 grch38         74.8           74.8 
24      72 omp             256 yeast          73.8           73.8 
25      96 omp             256 1000GP          3.78           3.78
26      96 omp             256 grch38         60.4           60.4 
27      96 omp             256 yeast          77.5           77.5 
28     128 omp             256 1000GP          3.44           3.44
29     128 omp             256 grch38         63.7           63.7 
30     128 omp             256 yeast          77.3           77.3 
31     160 omp             256 1000GP          6.70           6.70
32     160 omp             256 grch38         59.4           59.4 
33     160 omp             256 yeast          73.4           73.4
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.5.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(InputSet~Scheduler, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureQWeZRm.png]]

#+begin_src R :results output :session *R* :exports both
df.5.5.makespan %>%
  ungroup() %>%
  arrange(Threads) %>%
  group_by(Scheduler, InputSet) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(-MedianMakespan) %>%
  write_csv("iiswc25/scalability_chi-intel.csv") %>%
  print() -> df.5.5.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 28.73PB/s                                                                                                                          # A tibble: 33 Ã— 7
# Groups:   Scheduler, InputSet [3]
   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
     <int> <chr>         <int> <chr>          <dbl>    <dbl>   <dbl>
 1       1 omp             256 1000GP         214.      214.    1   
 2       1 omp             256 grch38        3162.     3162.    1   
 3       1 omp             256 yeast         4946.     4946.    1   
 4       2 omp             256 1000GP         106.      214.    2.02
 5       2 omp             256 grch38        1582.     3162.    2.00
 6       2 omp             256 yeast         2471.     4946.    2.00
 7       4 omp             256 1000GP          54.1     214.    3.96
 8       4 omp             256 grch38         801.     3162.    3.95
 9       4 omp             256 yeast         1241.     4946.    3.98
10       8 omp             256 1000GP          28.0     214.    7.65
# â„¹ 23 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.3.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figureF7yPIM.png]]

* 5.4 - Getting hardware metrics on AMD
From the scalability results in 5, we have a considerable difference
on performance from the intel and arm machines to the amd one.
* 5.6 - Getting hardware metrics in parallel
I will try to compare the cache references and misses on AMD using
~perf stat~ with the non-cache version and the 256 version, with the
smallest test case

Collected on AMD and Intel
#+begin_src shell :results output :exports both
perf stat -e cache-references,cache-misses ./miniGiraffe2048 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96 > miniGiraffe2048_cache_parallel_amd.txt 2>&1
perf stat -e cache-references,cache-misses ./miniGiraffe256 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96 > miniGiraffe256_cache_parallel_amd.txt 2>&1
perf stat -e cache-references,cache-misses ./miniGiraffeNC dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96 > miniGiraffeNC_cache_parallel_amd.txt 2>&1
#+end_src

#+begin_src shell :results output :exports both
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-6/miniGiraffeNC_cache_parallel_amd.txt
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-6/miniGiraffe256_cache_parallel_amd.txt
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-6/miniGiraffe2048_cache_parallel_amd.txt
#+end_src

#+RESULTS:
#+begin_example

 Performance counter stats for './miniGiraffeNC dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

    15,721,926,247      cache-references                                                   
       764,787,554      cache-misses                     #    4.864 % of all cache refs    

      53.845671557 seconds time elapsed

     472.341458000 seconds user
      93.699216000 seconds sys



 Performance counter stats for './miniGiraffe256 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

    16,761,796,804      cache-references                                                   
       765,253,777      cache-misses                     #    4.565 % of all cache refs    

      55.747799121 seconds time elapsed

     430.365385000 seconds user
     110.941608000 seconds sys



 Performance counter stats for './miniGiraffe2048 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

    19,578,633,096      cache-references                                                   
       771,269,403      cache-misses                     #    3.939 % of all cache refs    

      55.914327766 seconds time elapsed

     426.776485000 seconds user
     101.489918000 seconds sys


#+end_example

#+begin_src shell :results output :exports both
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-6/miniGiraffeNC_cache_parallel_intel.txt
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-6/miniGiraffe256_cache_parallel_intel.txt
tail -n 12 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-6/miniGiraffe2048_cache_parallel_intel.txt
#+end_src

#+RESULTS:
#+begin_example

 Performance counter stats for './miniGiraffeNC dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

     5,766,195,264      cache-references                                                   
     1,388,556,536      cache-misses                     #   24.081 % of all cache refs    

     100.635771367 seconds time elapsed

    1125.371033000 seconds user
     117.227572000 seconds sys



 Performance counter stats for './miniGiraffe256 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

     6,125,908,380      cache-references                                                   
     1,402,051,645      cache-misses                     #   22.887 % of all cache refs    

      99.691432308 seconds time elapsed

    1004.449677000 seconds user
     121.240763000 seconds sys



 Performance counter stats for './miniGiraffe2048 dump_proxy_novaseq.bin 1000GPlons_hs38d1_filter.giraffe.gbz -t 96':

     6,815,845,803      cache-references                                                   
     1,478,343,942      cache-misses                     #   21.690 % of all cache refs    

      99.639350448 seconds time elapsed

    1023.318066000 seconds user
     120.170780000 seconds sys


#+end_example

| Test Case + Machine        | Cache ref      | Cache miss    | Miss rate % |
| NoCacheGBWT + Intel        | 5,766,195,264  | 1,388,556,536 |     24.081% |
| DefaultCacheGBWT + Intek   | 6,125,908,380  | 1,402,051,645 |     22.887% |
| NoRehashCachedGBWT + Intel | 6,815,845,803  | 1,478,343,942 |     21.690% |
| NoCacheGBWT + AMD          | 15,721,926,247 | 764,787,554   |      4.864% |
| DefaultCacheGBWT + AMD     | 16,761,796,804 | 765,253,777   |      4.565% |
| NoRehashCachedGBW + AMD    | 19,578,633,096 | 771,269,403   |      3.939% |

The percentage of cache misses is way bigger on intel, but the
difference on number of access is huge. why?
It is a significant difference in terms of number of accesses and the
cache miss percentage, and it is the exact same workload.
The caching structure increases the number of cache references in both
machines when comparing with the non-caching version

* 6.1 - Collect runtime of running version without cache and without rehash on Intel
** 1000GP
Almost done. Results are on 6.5
** Yeast
Almost done. Results are on 6.7
** Chm13
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 51 Ã— 1
   SOURCE                                                                                                                
   <chr>                                                                                                                 
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_omp_0_grch38_miniGiraffe2048.csv 
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_omp_0_grch38_miniGiraffe256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_omp_0_grch38_miniGiraffe65536.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_omp_0_grch38_miniGiraffeNC.csv   
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe16384.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe2048.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe256.csv   
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe32768.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe65536.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-1/512_24_ws_0_grch38_miniGiraffe8192.csv  
# â„¹ 41 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 3,270 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz      23.3      0
 2     512      24 omp                0      2048 reading-seeds   138.       0
 3     512      24 omp                0      2048 seeds-loop      132.       0
 4     512      24 omp                0      2048 seeds-loop      131.       1
 5     512      24 omp                0      2048 seeds-loop      131.       2
 6     512      24 omp                0      2048 seeds-loop      130.       3
 7     512      24 omp                0      2048 seeds-loop      131.       4
 8     512      24 omp                0      2048 seeds-loop      130.       5
 9     512      24 omp                0      2048 seeds-loop      130.       6
10     512      24 omp                0      2048 seeds-loop      130.       7
# â„¹ 3,260 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.1 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.1.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 51 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        166.           166.
 2      24 omp             256        133.           133.
 3      24 omp            2048        132.           132.
 4      24 omp           65536        940.           940.
 5      24 ws                0        165.           165.
 6      24 ws              256        140.           140.
 7      24 ws             2048        134.           134.
 8      24 ws             8192        144.           144.
 9      24 ws            16384        139.           139.
10      24 ws            32768        154.           154.
# â„¹ 41 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.1.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-cnMNF9/figurehCIr6Q.png]]

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.1.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.1.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 51 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0   1    
 2      24 omp             256   1.25 
 3      24 omp            2048   1.26 
 4      24 omp           65536   0.177
 5      24 ws                0   1    
 6      24 ws              256   1.17 
 7      24 ws             2048   1.23 
 8      24 ws             8192   1.14 
 9      24 ws            16384   1.18 
10      24 ws            32768   1.07 
# â„¹ 41 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.1.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-cnMNF9/figurea3n2ym.png]]
Avoid rehash is not good for input sets too big, as is the case
GRCH38.
However, increasing initial capacity and avoiding some rehashing still
brings benefits (see 2048 results).
We could try to find a sweet spot for this.

* 6.4 - Investigate rehash on missing tests
** GRCH38
Ran corrected version May 26.
Tried to run with 131072 but it never ended executing, so I am
guessing it is not possible to run... Since there were just two
occurrences that needed that much of thread, I will try the half one,
65536.
**Update** - Running with this new size was 10x more slow. Let's try to
  find a sweeter spot. I will try to reduce to half agai. Let's go
  with 32768
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 61 Ã— 1
   SOURCE                                                                                                                
   <chr>                                                                                                                 
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe16384.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe2048.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe256.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe4096.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe65536.csv
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffe8192.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_omp_0_grch38_miniGiraffeNC.csv   
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_ws_0_grch38_miniGiraffe16384.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_ws_0_grch38_miniGiraffe2048.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-4/512_24_ws_0_grch38_miniGiraffe256.csv   
# â„¹ 51 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.4
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 3,818 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz      22.0      0
 2     512      24 omp                0     16384 reading-seeds   140.       0
 3     512      24 omp                0     16384 seeds-loop      142.       0
 4     512      24 omp                0     16384 seeds-loop      141.       1
 5     512      24 omp                0     16384 seeds-loop      141.       2
 6     512      24 omp                0     16384 seeds-loop      141.       3
 7     512      24 omp                0     16384 seeds-loop      142.       4
 8     512      24 omp                0     16384 seeds-loop      142.       5
 9     512      24 omp                0     16384 seeds-loop      141.       6
10     512      24 omp                0     16384 seeds-loop      142.       7
# â„¹ 3,808 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.4 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.4.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 61 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        166.           166.
 2      24 omp             256        133.           133.
 3      24 omp            2048        132.           132.
 4      24 omp            4096        138.           138.
 5      24 omp            8192        136.           136.
 6      24 omp           16384        143.           143.
 7      24 omp           65536        940.           940.
 8      24 ws                0        165.           165.
 9      24 ws              256        140.           140.
10      24 ws             2048        134.           134.
# â„¹ 51 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.4.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-EnaHuF/figureJYsvEF.png]]

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.4.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.4.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 61 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0   1    
 2      24 omp             256   1.25 
 3      24 omp            2048   1.26 
 4      24 omp            4096   1.20 
 5      24 omp            8192   1.22 
 6      24 omp           16384   1.16 
 7      24 omp           65536   0.177
 8      24 ws                0   1    
 9      24 ws              256   1.17 
10      24 ws             2048   1.23 
# â„¹ 51 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.4.speedup %>%
  filter(Threads == 96)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [2]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      96 omp               0  1     
 2      96 omp             256  1.40  
 3      96 omp            2048  1.44  
 4      96 omp            4096  1.36  
 5      96 omp            8192  1.36  
 6      96 omp           16384  1.21  
 7      96 omp           32768  0.705 
 8      96 omp           65536  0.0626
 9      96 ws                0  1     
10      96 ws              256  1.21  
11      96 ws             2048  1.24  
12      96 ws             4096  1.25  
13      96 ws             8192  1.25  
14      96 ws            16384  1.08  
15      96 ws            32768  0.730 
16      96 ws            65536  0.0550
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 300 :session *R*
my_custom_colors <- c("#D95F02", "#7570B3", "#E7298A", 
                      "#66A61E", "#E6AB02", "#A6761D", "#666666")
df.6.4.speedup %>%
  filter(CacheSize > 0 & Threads == 96) %>%
  mutate(CacheSize = factor(CacheSize, levels = c(0, 256, 2048, 4096, 8192, 16384, 32768, 65536), ordered=TRUE),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  geom_hline(yintercept = 1, linetype = "dashed") +
  scale_fill_manual(values = my_custom_colors) +
  facet_wrap(~Scheduler) +
  labs(fill = "Init. CacheGBWT") +
  theme_bw()+
  theme(legend.position = "top",
        text = element_text(size = 14),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15)) -> p
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figureRr13Lz.png]]

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 500 :height 250 :session *R*
my_custom_colors <- c("#D95F02", "#7570B3", "#E7298A", 
                      "#66A61E", "#E6AB02", "#A6761D", "#666666")
df.6.4.speedup %>%
  filter(CacheSize > 0 & Threads == 96) %>%
  mutate(CacheSize = factor(CacheSize, levels = c(256, 2048, 4096, 8192, 16384, 32768, 65536), ordered=TRUE),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=CacheSize, y=Speedup, color=Scheduler)) +
  #geom_bar(stat="identity", width=.8, position = "dodge") +
  geom_point() +
  geom_line(aes(x=as.numeric(CacheSize))) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  #scale_x_continuous("Init. CacheGBWT", breaks=df.6.4.speedup$CacheSize) +
  scale_fill_manual(values = my_custom_colors) +
  #facet_wrap(~Scheduler) +
  labs(x = "Init. CachedGBWT Capacity") +
  theme_bw()+
  theme(legend.position = "top",
        text = element_text(size = 13),
        axis.text.y = element_text(angle = 45, hjust = 1, size=12),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=12)) -> p
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figurekTmjex.png]]


#+begin_src R :results graphics file :file ./iiswc25/img/testing-different-cache-size.pdf :exports both :width 5 :height 2.5 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/testing-different-cache-size.pdf]]


Avoid rehash is not good for input sets too big, as is the case
GRCH38.
However, increasing initial capacity and avoiding some rehashing still
brings benefits (see 2048 results).
We could try to find a sweet spot for this.
UPDATE: in fact, avoid rehash completely for this test case reduces
speed significantly. My guess goes to the hashing structure used to
store this cached GBWT structure.
However, for most of the tests, the best speedup was not with the
default size of 256, but with increased size of 2048 (on OMP this can
be seen with 24, 48, and 96 threads, WS this happens with 24, 48, and
72 threads)

* 6.2 - Collect runtime of running version without cached and wihtout rehash on AMD
I will run with 32, 64, 96, 128 threads for each input set
** 1000GP
Running 2048 and NC on May 27. 256 already ran on 5.2
** Yeast
** Grch38
Need to re-run, need to find out the maximum cache resize (have run
with 2048, which is the max size for other test case)
** Chm13
** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                          
   <chr>                                                                                                           
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_omp_0_grch38_miniGiraffeNC.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_omp_1_grch38_miniGiraffeNC.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_omp_2_grch38_miniGiraffeNC.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_ws_0_grch38_miniGiraffeNC.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_ws_1_grch38_miniGiraffeNC.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_128_ws_2_grch38_miniGiraffeNC.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_32_omp_0_grch38_miniGiraffeNC.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_32_omp_1_grch38_miniGiraffeNC.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_32_omp_2_grch38_miniGiraffeNC.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-2/512_32_ws_0_grch38_miniGiraffeNC.csv  
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,968 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512     128 omp                0         0 reading-gbz      13.9      0
 2     512     128 omp                0         0 reading-seeds   106.       0
 3     512     128 omp                0         0 seeds-loop       27.4      0
 4     512     128 omp                0         0 seeds-loop       27.5      1
 5     512     128 omp                0         0 seeds-loop       28.6      2
 6     512     128 omp                0         0 seeds-loop       27.4      3
 7     512     128 omp                0         0 seeds-loop       26.9      4
 8     512     128 omp                0         0 seeds-loop       27.5      5
 9     512     128 omp                0         0 seeds-loop       27.4      6
10     512     128 omp                0         0 seeds-loop       26.0      7
# â„¹ 1,958 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="grch38",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 20 Ã— 1
   SOURCE                                                                                                           
   <chr>                                                                                                            
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_omp_0_grch38_miniGiraffe256.csv  
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_1_ws_0_grch38_miniGiraffe256.csv   
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_128_omp_0_grch38_miniGiraffe256.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_128_ws_0_grch38_miniGiraffe256.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_16_omp_0_grch38_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_16_ws_0_grch38_miniGiraffe256.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_2_omp_0_grch38_miniGiraffe256.csv  
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_2_ws_0_grch38_miniGiraffe256.csv   
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_32_omp_0_grch38_miniGiraffe256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_32_ws_0_grch38_miniGiraffe256.csv  
11 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_4_omp_0_grch38_miniGiraffe256.csv  
12 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_4_ws_0_grch38_miniGiraffe256.csv   
13 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_64_omp_0_grch38_miniGiraffe256.csv 
14 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_64_ws_0_grch38_miniGiraffe256.csv  
15 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_72_omp_0_grch38_miniGiraffe256.csv 
16 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_72_ws_0_grch38_miniGiraffe256.csv  
17 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_8_omp_0_grch38_miniGiraffe256.csv  
18 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_8_ws_0_grch38_miniGiraffe256.csv   
19 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_96_omp_0_grch38_miniGiraffe256.csv 
20 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/5-2/512_96_ws_0_grch38_miniGiraffe256.csv
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  filter(Threads %in% c(128, 96, 64, 32)) %>%
  print() -> df.5.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 656 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512     128 omp                0       256 reading-gbz      15.9      0
 2     512     128 omp                0       256 reading-seeds   109.       0
 3     512     128 omp                0       256 seeds-loop       21.7      0
 4     512     128 omp                0       256 seeds-loop       22.0      1
 5     512     128 omp                0       256 seeds-loop       21.8      2
 6     512     128 omp                0       256 seeds-loop       21.7      3
 7     512     128 omp                0       256 seeds-loop       21.5      4
 8     512     128 omp                0       256 seeds-loop       21.6      5
 9     512     128 omp                0       256 seeds-loop       21.2      6
10     512     128 omp                0       256 seeds-loop       21.3      7
# â„¹ 646 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.2 %>%
  bind_rows(df.5.2) %>%
  print() -> df.6.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 2,624 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512     128 omp                0         0 reading-gbz      13.9      0
 2     512     128 omp                0         0 reading-seeds   106.       0
 3     512     128 omp                0         0 seeds-loop       27.4      0
 4     512     128 omp                0         0 seeds-loop       27.5      1
 5     512     128 omp                0         0 seeds-loop       28.6      2
 6     512     128 omp                0         0 seeds-loop       27.4      3
 7     512     128 omp                0         0 seeds-loop       26.9      4
 8     512     128 omp                0         0 seeds-loop       27.5      5
 9     512     128 omp                0         0 seeds-loop       27.4      6
10     512     128 omp                0         0 seeds-loop       26.0      7
# â„¹ 2,614 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.2 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.2.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 16 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      32 omp               0        80.3           80.2
 2      32 omp             256        66.8           66.8
 3      32 ws                0        82.8           82.8
 4      32 ws              256        67.9           67.9
 5      64 omp               0        43.5           43.0
 6      64 omp             256        34.8           34.8
 7      64 ws                0        47.7           47.9
 8      64 ws              256        37.5           37.5
 9      96 omp               0        36.9           37.0
10      96 omp             256        28.4           28.4
11      96 ws                0        40.0           40.0
12      96 ws              256        30.9           30.9
13     128 omp               0        29.4           29.3
14     128 omp             256        23.3           23.3
15     128 ws                0        34.9           35.1
16     128 ws              256        25.3           25.3
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.2.makespan %>%
  filter(Scheduler == "omp") %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figurexTBKp0.png]]

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.2.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.2.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      32 omp               0    1   
 2      32 omp             256    1.20
 3      32 ws                0    1   
 4      32 ws              256    1.22
 5      64 omp               0    1   
 6      64 omp             256    1.25
 7      64 ws                0    1   
 8      64 ws              256    1.27
 9      96 omp               0    1   
10      96 omp             256    1.30
11      96 ws                0    1   
12      96 ws              256    1.29
13     128 omp               0    1   
14     128 omp             256    1.27
15     128 ws                0    1   
16     128 ws              256    1.38
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.2.speedup %>%
  filter(Scheduler == "omp" & CacheSize > 0) %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  ylim(0.0, 1.5) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15)) 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureqJAfcQ.png]]
#+begin_src R :results output :session *R* :exports both
df.6.2.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.2.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 4
# Groups:   Threads, Scheduler [8]
  Threads Scheduler CacheSize Speedup
    <int> <chr>         <int>   <dbl>
1      32 omp             256       1
2      32 ws              256       1
3      64 omp             256       1
4      64 ws              256       1
5      96 omp             256       1
6      96 ws              256       1
7     128 omp             256       1
8     128 ws              256       1
#+end_example

* 6.5 - Validate rehash bottleneck 1000GP
Pipeline file - pipeline-6-5.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 144 Ã— 1
   SOURCE                                                                                                              
   <chr>                                                                                                               
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_0_1000GP_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffe2048.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_1_1000GP_miniGiraffeNC.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffe2048.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_omp_2_1000GP_miniGiraffeNC.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-5/512_1_ws_0_1000GP_miniGiraffe2048.csv 
# â„¹ 134 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.5
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 4,910 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query          Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>            <dbl>  <dbl>
 1     512       1 omp                0      2048 reading-gbz      44.8       0
 2     512       1 omp                0      2048 reading-seeds    16.8       0
 3     512       1 omp                0      2048 seeds-loop      191.        0
 4     512       1 omp                0      2048 writing-output    5.27      0
 5     512       1 omp                0       256 reading-gbz      44.7       0
 6     512       1 omp                0       256 reading-seeds    16.9       0
 7     512       1 omp                0       256 seeds-loop      189.        0
 8     512       1 omp                0       256 writing-output    5.28      0
 9     512       1 omp                0         0 reading-gbz      44.7       0
10     512       1 omp                0         0 reading-seeds    16.9       0
# â„¹ 4,900 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.5 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.5.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 48 Ã— 5
# Groups:   Threads, Scheduler [16]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1       1 omp               0       205.           205. 
 2       1 omp             256       186.           185. 
 3       1 omp            2048       189.           190. 
 4       1 ws                0       210.           209. 
 5       1 ws              256       187.           187. 
 6       1 ws             2048       187.           187. 
 7       2 omp               0       105.           106. 
 8       2 omp             256        95.5           95.1
 9       2 omp            2048        96.9           97.2
10       2 ws                0       108.           107. 
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.5.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-EnaHuF/figuremXho58.png]]

#+begin_src R :results output :session *R* :exports both
df.6.5.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  write_csv("iiswc25/xeonplatinum8260.csv") %>%
  print() -> df.6.5.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 17.55PB/s                                                                                                                          # A tibble: 48 Ã— 4
# Groups:   Threads, Scheduler [16]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1       1 omp               0    1   
 2       1 omp             256    1.10
 3       1 omp            2048    1.08
 4       1 ws                0    1   
 5       1 ws              256    1.12
 6       1 ws             2048    1.12
 7       2 omp               0    1   
 8       2 omp             256    1.10
 9       2 omp            2048    1.09
10       2 ws                0    1   
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.5.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figurelP17u9.png]]
There is a metric that makes the rehash to be a bottleneck from 48
threads. It get even slower than no using cache at all.
I want to check if the slowdown of the cached version is because we
are using logic threads or it is linked to the number of threads.

One more thing to observe.
#+begin_src R :results output :session *R* :exports both
df.6.5.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.5.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 Ã— 4
# Groups:   Threads, Scheduler [16]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1       1 omp             256   1    
 2       1 omp            2048   0.982
 3       1 ws              256   1    
 4       1 ws             2048   1.00 
 5       2 omp             256   1    
 6       2 omp            2048   0.986
 7       2 ws              256   1    
 8       2 ws             2048   0.998
 9       4 omp             256   1    
10       4 omp            2048   0.953
# â„¹ 22 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.5.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figurejc1zxQ.png]]
Comparing speedup between rehash or not, not doing rehash almost get
2x speedup for this test with 96 threads in this machine.

* 6.6 - Understand bottleneck - Logical threads vs Number of threads
To validate this, I will reserve a node in Chameleon that has at least
72 physical threads, and validate the behavior.

Differences between this intel machine and kaffirlime     
|               | Kaffirlime - Platinum 8260 | Chameleon - Platinum 8380 | Chameleon - Gold6240R | Chameleon - Gold6126 |
| Frequency     | 2.40GHz                    | 2.30GHz                   | 2.40GHz               | 2.60GHz              |
| L1 Cache      | 1.5MB                      | 3.8MB                     | 1.5MB                 | 768KiB               |
| L3 Cache      | 71.5MB                     | 120MB                     | 71.5MB                | 38.5MiB              |
| # of cores    | 24 * 2                     | 40 * 2                    | 24 * 2                | 12 * 2               |
| Total threads | 96                         |                           | 96                    | 48                   |

Cache is way bigger on this machine.

lscpu of the machine I used for the first test
#+begin_src shell :results output :exports both
Architecture:             x86_64
  CPU op-mode(s):         32-bit, 64-bit
  Address sizes:          46 bits physical, 57 bits virtual
  Byte Order:             Little Endian
CPU(s):                   160
  On-line CPU(s) list:    0-159
Vendor ID:                GenuineIntel
  Model name:             Intel(R) Xeon(R) Platinum 8380 CPU @ 2.30GHz
    CPU family:           6
    Model:                106
    Thread(s) per core:   2
    Core(s) per socket:   40
    Socket(s):            2
    Stepping:             6
    CPU(s) scaling MHz:   26%
    CPU max MHz:          3400.0000
    CPU min MHz:          800.0000
    BogoMIPS:             4600.00
    Flags:                fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc cpui
                          d aperfmperf pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch cpuid_fault epb cat
                          _l3 intel_ppin ssbd mba ibrs ibpb stibp ibrs_enhanced tpr_shadow flexpriority ept vpid ept_ad fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid cqm rdt_a avx512f avx512dq rdseed adx smap avx512ifma clflushopt clwb intel_pt av
                          x512cd sha_ni avx512bw avx512vl xsaveopt xsavec xgetbv1 xsaves cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local split_lock_detect wbnoinvd dtherm ida arat pln pts vnmi avx512vbmi umip pku ospke avx512_vbmi2 gfni vaes vpclmulqdq
                           avx512_vnni avx512_bitalg tme avx512_vpopcntdq la57 rdpid fsrm md_clear pconfig flush_l1d arch_capabilities
Virtualization features:  
  Virtualization:         VT-x
Caches (sum of all):      
  L1d:                    3.8 MiB (80 instances)
  L1i:                    2.5 MiB (80 instances)
  L2:                     100 MiB (80 instances)
  L3:                     120 MiB (2 instances)
NUMA:                     
  NUMA node(s):           2
  NUMA node0 CPU(s):      0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140
                          ,142,144,146,148,150,152,154,156,158
  NUMA node1 CPU(s):      1,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99,101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141
                          ,143,145,147,149,151,153,155,157,159
Vulnerabilities:          
  Gather data sampling:   Mitigation; Microcode
  Itlb multihit:          Not affected
  L1tf:                   Not affected
  Mds:                    Not affected
  Meltdown:               Not affected
  Mmio stale data:        Mitigation; Clear CPU buffers; SMT vulnerable
  Reg file data sampling: Not affected
  Retbleed:               Not affected
  Spec rstack overflow:   Not affected
  Spec store bypass:      Mitigation; Speculative Store Bypass disabled via prctl
  Spectre v1:             Mitigation; usercopy/swapgs barriers and __user pointer sanitization
  Spectre v2:             Mitigation; Enhanced / Automatic IBRS; IBPB conditional; RSB filling; PBRSB-eIBRS SW sequence; BHI SW loop, KVM SW loop
  Srbds:                  Not affected
  Tsx async abort:        Not affected
#+end_src

Pipeline file - pipeline-6-6.py
** Analysis
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                               
   <chr>                                                                                                                
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_omp_0_1000GP_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_omp_0_1000GP_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_omp_0_1000GP_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_ws_0_1000GP_miniGiraffe2048.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_ws_0_1000GP_miniGiraffe256.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_24_ws_0_1000GP_miniGiraffeNC.csv   
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_48_omp_0_1000GP_miniGiraffe2048.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_48_omp_0_1000GP_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_48_omp_0_1000GP_miniGiraffeNC.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/6-6/512_48_ws_0_1000GP_miniGiraffe2048.csv 
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.6
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,512 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz     52.2       0
 2     512      24 omp                0      2048 reading-seeds   18.8       0
 3     512      24 omp                0      2048 seeds-loop       9.28      0
 4     512      24 omp                0      2048 seeds-loop       9.54      1
 5     512      24 omp                0      2048 seeds-loop       9.59      2
 6     512      24 omp                0      2048 seeds-loop       9.48      3
 7     512      24 omp                0      2048 seeds-loop       9.52      4
 8     512      24 omp                0      2048 seeds-loop       9.55      5
 9     512      24 omp                0      2048 seeds-loop       9.50      6
10     512      24 omp                0      2048 seeds-loop       9.50      7
# â„¹ 1,502 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.6 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.6.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       10.6           10.6 
 2      24 omp             256        9.49           9.49
 3      24 omp            2048        9.59           9.59
 4      24 ws                0       10.4           10.4 
 5      24 ws              256        9.54           9.54
 6      24 ws             2048        9.52           9.52
 7      48 omp               0        5.71           5.71
 8      48 omp             256        6.03           6.03
 9      48 omp            2048        5.19           5.19
10      48 ws                0        6.24           6.24
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figureHUYbKK.png]]

#+begin_src R :results output :session *R* :exports both
df.6.6.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  write_csv("iiswc25/xeonplatinum8380.csv") %>%
  print() -> df.6.6.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 45.59PB/s                                                                                                                          # A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0   1    
 2      24 omp             256   1.12 
 3      24 omp            2048   1.11 
 4      24 ws                0   1    
 5      24 ws              256   1.09 
 6      24 ws             2048   1.10 
 7      48 omp               0   1    
 8      48 omp             256   0.947
 9      48 omp            2048   1.10 
10      48 ws                0   1    
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figureSRbyFZ.png]]
This is a good result! This means that the speedup of avoiding rehash
with a bigger number of threads for 1000GP input set is due to some
metric linked to number of reads being processed, or something like
that, and not because of using virtual threads. CachedGBWT is in fact
a bottleneck for performance in some settings, mainly when the test
case is not that big.

I need to validate this behavior with a bigger test (i.e. yeast or
something). I should repeat this test with yeast, but trying to
reduce its size until I can see this bottleneck happening there.
** Another machine with less cache
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 72 Ã— 1
   SOURCE                                                                                                           
   <chr>                                                                                                            
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_0_1000GP_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_0_1000GP_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_0_1000GP_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_1_1000GP_miniGiraffe2048.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_1_1000GP_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_1_1000GP_miniGiraffeNC.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_2_1000GP_miniGiraffe2048.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_2_1000GP_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_omp_2_1000GP_miniGiraffeNC.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6126cpu@260ghz/6-6/512_24_ws_0_1000GP_miniGiraffe2048.csv 
# â„¹ 62 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.6
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 4,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz      62.9      0
 2     512      24 omp                0      2048 reading-seeds    20.1      0
 3     512      24 omp                0      2048 seeds-loop       11.8      0
 4     512      24 omp                0      2048 seeds-loop       12.1      1
 5     512      24 omp                0      2048 seeds-loop       11.9      2
 6     512      24 omp                0      2048 seeds-loop       11.8      3
 7     512      24 omp                0      2048 seeds-loop       12.1      4
 8     512      24 omp                0      2048 seeds-loop       12.2      5
 9     512      24 omp                0      2048 seeds-loop       12.0      6
10     512      24 omp                0      2048 seeds-loop       11.8      7
# â„¹ 4,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.6 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.6.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        14.6           14.4
 2      24 omp             256        13.0           12.8
 3      24 omp            2048        12.2           12.2
 4      24 ws                0        15.2           15.2
 5      24 ws              256        13.9           13.9
 6      24 ws             2048        13.9           14.1
 7      48 omp               0        14.2           13.9
 8      48 omp             256        11.6           11.2
 9      48 omp            2048        10.3           10.3
10      48 ws                0        13.6           13.6
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-xe2tVe/figurekoCudp.png]]

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.6.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  write_csv("iiswc25/xeongold6126.csv") %>%
  print() -> df.6.6.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 45.59PB/s                                                                                                                          # A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.12
 3      24 omp            2048    1.19
 4      24 ws                0    1   
 5      24 ws              256    1.09
 6      24 ws             2048    1.09
 7      48 omp               0    1   
 8      48 omp             256    1.22
 9      48 omp            2048    1.38
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-xe2tVe/figurel2L9O9.png]]
Despite the good results, this machine just have 24 physical threads
and 48 logical threads. This means that the reuslts with 72 and 96
threads are not exactly valids, since I am using way more threads than
available.
Still, we got better results with the avoiding rehash version with 24
and 48 threads, so this might be promising.
** Another machine different CPU same cache
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 40 Ã— 1
   SOURCE                                                                                                            
   <chr>                                                                                                             
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_omp_0_1000GP_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_omp_0_1000GP_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_omp_0_1000GP_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_omp_1_1000GP_miniGiraffeNC.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_omp_2_1000GP_miniGiraffeNC.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_ws_0_1000GP_miniGiraffe2048.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_ws_0_1000GP_miniGiraffe256.csv  
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_ws_0_1000GP_miniGiraffeNC.csv   
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_ws_1_1000GP_miniGiraffeNC.csv   
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeongold6240rcpu@240ghz/6-6/512_24_ws_2_1000GP_miniGiraffeNC.csv   
# â„¹ 30 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.6
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 2,520 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz      62.3      0
 2     512      24 omp                0      2048 reading-seeds    22.5      0
 3     512      24 omp                0      2048 seeds-loop       12.2      0
 4     512      24 omp                0      2048 seeds-loop       12.1      1
 5     512      24 omp                0      2048 seeds-loop       12.1      2
 6     512      24 omp                0      2048 seeds-loop       12.1      3
 7     512      24 omp                0      2048 seeds-loop       12.2      4
 8     512      24 omp                0      2048 seeds-loop       12.1      5
 9     512      24 omp                0      2048 seeds-loop       12.1      6
10     512      24 omp                0      2048 seeds-loop       12.1      7
# â„¹ 2,510 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.6.6 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.6.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       13.0           12.9 
 2      24 omp             256       11.9           11.9 
 3      24 omp            2048       12.2           12.2 
 4      24 ws                0       12.6           12.6 
 5      24 ws              256       11.5           11.5 
 6      24 ws             2048       11.4           11.4 
 7      48 omp               0        8.19           8.23
 8      48 omp             256        7.29           7.29
 9      48 omp            2048        7.06           7.06
10      48 ws                0        9.43           9.47
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figure3VYpJG.png]]

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.6.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  write_csv("iiswc25/xeongold6240r.csv") %>%
  print() -> df.6.6.speedup
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 62.60PB/s                                                                                                                          # A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.09
 3      24 omp            2048    1.06
 4      24 ws                0    1   
 5      24 ws              256    1.10
 6      24 ws             2048    1.11
 7      48 omp               0    1   
 8      48 omp             256    1.12
 9      48 omp            2048    1.16
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-3a1M9r/figureYJiU2g.png]]
What is going on with 96 threads?? How to explain this?
** Everything together
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=TRUE,
             col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="xeon",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 1
:   SOURCE                                                        
:   <chr>                                                         
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/xeongold6126.csv    
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/xeongold6240r.csv   
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/xeonplatinum8260.csv
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/xeonplatinum8380.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "Machine"), sep="/") %>%
    mutate(Machine = str_replace_all(Machine, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
  print() -> df.6.6
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 120 Ã— 5
   Machine      Threads Scheduler CacheSize Speedup
   <chr>          <dbl> <chr>         <dbl>   <dbl>
 1 xeongold6126      24 omp               0    1   
 2 xeongold6126      24 omp             256    1.12
 3 xeongold6126      24 omp            2048    1.19
 4 xeongold6126      24 ws                0    1   
 5 xeongold6126      24 ws              256    1.09
 6 xeongold6126      24 ws             2048    1.09
 7 xeongold6126      48 omp               0    1   
 8 xeongold6126      48 omp             256    1.22
 9 xeongold6126      48 omp            2048    1.38
10 xeongold6126      48 ws                0    1   
# â„¹ 110 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.6 %>%
  group_by(Machine, CacheSize) %>%
  summarize(max(Speedup))
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Machine'. You can override using the `.groups` argument.
# A tibble: 12 Ã— 3
# Groups:   Machine [4]
   Machine          CacheSize `max(Speedup)`
   <chr>                <dbl>          <dbl>
 1 xeongold6126             0           1   
 2 xeongold6126           256           1.22
 3 xeongold6126          2048           1.38
 4 xeongold6240r            0           1   
 5 xeongold6240r          256           2.44
 6 xeongold6240r         2048           2.25
 7 xeonplatinum8260         0           1   
 8 xeonplatinum8260       256           1.15
 9 xeonplatinum8260      2048           1.51
10 xeonplatinum8380         0           1   
11 xeonplatinum8380       256           1.16
12 xeonplatinum8380      2048           1.15
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.6 %>%
  filter(Scheduler == "omp" & Threads > 24 & CacheSize > 0 & Machine %in% c("xeonplatinum8260", "xeonplatinum8380")) %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  geom_hline(yintercept = 1, linetype = "dashed") +
  facet_grid(Scheduler~Machine) +
  theme_bw()+
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureZ3acr3.png]]
What is going on with 96 threads?? How to explain this?
* 6.7 - Find yeast bottleneck
I need to first downsize yeast by more than I was doing.
According to previous investigation, I have 33713104 sequences to map
in yeast. I have tried cutting by half and 1/4 and still did not see
any bottleneck happening with rehashing and cachegbwt.
** First trial - 1/6
I will try to cut even more this time, by 6
#+begin_src R :results output :session *R* :exports both
33713104 / 6
#+end_src

#+RESULTS:
: [1] 5618851

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast_miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                              
   <chr>                                                                                                               
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast_miniGiraffeNC.csv  
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast_miniGiraffe2048.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast_miniGiraffe256.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast_miniGiraffeNC.csv   
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast_miniGiraffe2048.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast_miniGiraffe256.csv 
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast_miniGiraffeNC.csv  
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_ws_0_yeast_miniGiraffe2048.csv 
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz     0.617      0
 2     512      24 omp                0      2048 reading-seeds   9.07       0
 3     512      24 omp                0      2048 seeds-loop     37.1        0
 4     512      24 omp                0      2048 seeds-loop     37.2        1
 5     512      24 omp                0      2048 seeds-loop     37.0        2
 6     512      24 omp                0      2048 seeds-loop     37.1        3
 7     512      24 omp                0      2048 seeds-loop     37.1        4
 8     512      24 omp                0      2048 seeds-loop     37.1        5
 9     512      24 omp                0      2048 seeds-loop     37.1        6
10     512      24 omp                0      2048 seeds-loop     37.2        7
# â„¹ 1,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        46.0           46.0
 2      24 omp             256        34.2           34.2
 3      24 omp            2048        37.2           37.2
 4      24 ws                0        48.1           48.1
 5      24 ws              256        35.1           35.1
 6      24 ws             2048        35.5           35.5
 7      48 omp               0        29.4           29.4
 8      48 omp             256        21.3           21.3
 9      48 omp            2048        22.9           22.9
10      48 ws                0        29.5           29.5
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureJPeHvx.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.34
 3      24 omp            2048    1.24
 4      24 ws                0    1   
 5      24 ws              256    1.37
 6      24 ws             2048    1.36
 7      48 omp               0    1   
 8      48 omp             256    1.38
 9      48 omp            2048    1.29
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureBRRPNO.png]]
No-rehash seems to be good when running on workstealing, but by too
slightly thing. Let's try to get it more small.
** Second trial - 1/7
#+begin_src R :results output :session *R* :exports both
33713104 / 7
#+end_src

#+RESULTS:
: [1] 4816158

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-seve",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-seven_miniGiraffe2048.câ€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-seven_miniGiraffe256.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-seven_miniGiraffeNC.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-seven_miniGiraffe2048.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-seven_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-seven_miniGiraffeNC.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-seven_miniGiraffe2048.câ€¦
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-seven_miniGiraffe256.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-seven_miniGiraffeNC.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_ws_0_yeast-seven_miniGiraffe2048.csv
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz     0.620      0
 2     512      24 omp                0      2048 reading-seeds   7.64       0
 3     512      24 omp                0      2048 seeds-loop     28.1        0
 4     512      24 omp                0      2048 seeds-loop     28.1        1
 5     512      24 omp                0      2048 seeds-loop     28.1        2
 6     512      24 omp                0      2048 seeds-loop     28.1        3
 7     512      24 omp                0      2048 seeds-loop     28.1        4
 8     512      24 omp                0      2048 seeds-loop     28.1        5
 9     512      24 omp                0      2048 seeds-loop     28.1        6
10     512      24 omp                0      2048 seeds-loop     28.1        7
# â„¹ 1,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        36.9           36.9
 2      24 omp             256        29.0           29.0
 3      24 omp            2048        28.1           28.1
 4      24 ws                0        34.7           34.7
 5      24 ws              256        28.4           28.4
 6      24 ws             2048        28.3           28.3
 7      48 omp               0        23.6           23.6
 8      48 omp             256        18.6           18.6
 9      48 omp            2048        20.5           20.5
10      48 ws                0        25.9           25.9
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-xe2tVe/figureZ1WHvM.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.27
 3      24 omp            2048    1.31
 4      24 ws                0    1   
 5      24 ws              256    1.22
 6      24 ws             2048    1.23
 7      48 omp               0    1   
 8      48 omp             256    1.27
 9      48 omp            2048    1.15
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-xe2tVe/figureb4Gguj.png]]
No-rehash seems to be good when running on workstealing, but by too
slightly thing. Let's try to get it more small.
** Third trial - 1/8
#+begin_src R :results output :session *R* :exports both
33713104 / 8
#+end_src

#+RESULTS:
: [1] 4214138

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-eight",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-eight_miniGiraffe16384.â€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-eight_miniGiraffe2048.câ€¦
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-eight_miniGiraffe256.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-eight_miniGiraffeNC.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-eight_miniGiraffe16384.câ€¦
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-eight_miniGiraffe2048.csv
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-eight_miniGiraffe256.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-eight_miniGiraffeNC.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-eight_miniGiraffe16384.â€¦
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-eight_miniGiraffe2048.câ€¦
# â„¹ 22 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,984 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.621      0
 2     512      24 omp                0     16384 reading-seeds   6.72       0
 3     512      24 omp                0     16384 seeds-loop     24.8        0
 4     512      24 omp                0     16384 seeds-loop     24.8        1
 5     512      24 omp                0     16384 seeds-loop     24.7        2
 6     512      24 omp                0     16384 seeds-loop     24.7        3
 7     512      24 omp                0     16384 seeds-loop     24.8        4
 8     512      24 omp                0     16384 seeds-loop     24.8        5
 9     512      24 omp                0     16384 seeds-loop     24.8        6
10     512      24 omp                0     16384 seeds-loop     24.8        7
# â„¹ 1,974 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop" & CacheSize != 2048) %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        30.6           30.6
 2      24 omp             256        26.0           26.0
 3      24 omp           16384        24.9           24.9
 4      24 ws                0        33.0           33.0
 5      24 ws              256        28.8           28.8
 6      24 ws            16384        24.8           24.8
 7      48 omp               0        23.4           23.4
 8      48 omp             256        18.5           18.5
 9      48 omp           16384        18.2           18.2
10      48 ws                0        24.1           24.1
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figuret78H55.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "Intel") %>%
  mutate(Inputset = "1/8") %>%
  print() -> df.intel.1.8
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 7
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0        30.6           30.6 Intel   1/8     
 2      24 omp             256        26.0           26.0 Intel   1/8     
 3      24 omp           16384        24.9           24.9 Intel   1/8     
 4      24 ws                0        33.0           33.0 Intel   1/8     
 5      24 ws              256        28.8           28.8 Intel   1/8     
 6      24 ws            16384        24.8           24.8 Intel   1/8     
 7      48 omp               0        23.4           23.4 Intel   1/8     
 8      48 omp             256        18.5           18.5 Intel   1/8     
 9      48 omp           16384        18.2           18.2 Intel   1/8     
10      48 ws                0        24.1           24.1 Intel   1/8     
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.18
 3      24 omp           16384    1.23
 4      24 ws                0    1   
 5      24 ws              256    1.15
 6      24 ws            16384    1.33
 7      48 omp               0    1   
 8      48 omp             256    1.26
 9      48 omp           16384    1.28
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureb28jc9.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp           16384   1.04 
 3      24 ws              256   1    
 4      24 ws            16384   1.16 
 5      48 omp             256   1    
 6      48 omp           16384   1.01 
 7      48 ws              256   1    
 8      48 ws            16384   0.970
 9      72 omp             256   1    
10      72 omp           16384   1.02 
11      72 ws              256   1    
12      72 ws            16384   0.993
13      96 omp             256   1    
14      96 omp           16384   1.00 
15      96 ws              256   1    
16      96 ws            16384   1.04
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureA9FGqX.png]]
Speedup of not doing rehash is not that significant on yeast, even
with a really smaller number of sequences to map. Still, we do have
some scenarios where not doing rehash is better than doing.
** Fourth trial - 1/10
#+begin_src R :results output :session *R* :exports both
33713104 / 10
#+end_src

#+RESULTS:
: [1] 3371310

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-ten",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-ten_miniGiraffe16384.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-ten_miniGiraffe256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-ten_miniGiraffeNC.csv   
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-ten_miniGiraffe16384.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-ten_miniGiraffe256.csv   
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_yeast-ten_miniGiraffeNC.csv    
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-ten_miniGiraffe16384.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-ten_miniGiraffe256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-ten_miniGiraffeNC.csv   
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_ws_0_yeast-ten_miniGiraffe16384.csv 
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.616      0
 2     512      24 omp                0     16384 reading-seeds   5.41       0
 3     512      24 omp                0     16384 seeds-loop     20.1        0
 4     512      24 omp                0     16384 seeds-loop     20.0        1
 5     512      24 omp                0     16384 seeds-loop     19.9        2
 6     512      24 omp                0     16384 seeds-loop     20.0        3
 7     512      24 omp                0     16384 seeds-loop     20.0        4
 8     512      24 omp                0     16384 seeds-loop     20.0        5
 9     512      24 omp                0     16384 seeds-loop     20.0        6
10     512      24 omp                0     16384 seeds-loop     20.0        7
# â„¹ 1,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 24 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        25.9           25.9
 2      24 omp             256        20.3           20.3
 3      24 omp           16384        20.1           20.1
 4      24 ws                0        24.8           24.8
 5      24 ws              256        20.2           20.2
 6      24 ws            16384        20.8           20.8
 7      48 omp               0        17.3           17.3
 8      48 omp             256        13.8           13.8
 9      48 omp           16384        15.2           15.2
10      48 ws                0        19.1           19.1
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figure9Tbcwa.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "Intel") %>%
  mutate(Inputset = "1/10") %>%
  print() -> df.intel.1.10
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 7
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0        25.9           25.9 Intel   1/10    
 2      24 omp             256        20.3           20.3 Intel   1/10    
 3      24 omp           16384        20.1           20.1 Intel   1/10    
 4      24 ws                0        24.8           24.8 Intel   1/10    
 5      24 ws              256        20.2           20.2 Intel   1/10    
 6      24 ws            16384        20.8           20.8 Intel   1/10    
 7      48 omp               0        17.3           17.3 Intel   1/10    
 8      48 omp             256        13.8           13.8 Intel   1/10    
 9      48 omp           16384        15.2           15.2 Intel   1/10    
10      48 ws                0        19.1           19.1 Intel   1/10    
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.27
 3      24 omp           16384    1.29
 4      24 ws                0    1   
 5      24 ws              256    1.23
 6      24 ws            16384    1.19
 7      48 omp               0    1   
 8      48 omp             256    1.25
 9      48 omp           16384    1.14
10      48 ws                0    1   
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureQh2wJl.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp           16384   1.01 
 3      24 ws              256   1    
 4      24 ws            16384   0.970
 5      48 omp             256   1    
 6      48 omp           16384   0.910
 7      48 ws              256   1    
 8      48 ws            16384   1.12 
 9      72 omp             256   1    
10      72 omp           16384   0.976
11      72 ws              256   1    
12      72 ws            16384   1.00 
13      96 omp             256   1    
14      96 omp           16384   1.11 
15      96 ws              256   1    
16      96 ws            16384   0.987
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figurePMT8CG.png]]
Speedup of not doing rehash is not that significant on yeast, even
with a really smaller number of sequences to map. Still, we do have
some scenarios where not doing rehash is better than doing.
** Fourth trial - 1/50
#+begin_src R :results output :session *R* :exports both
33713104 / 50
#+end_src

#+RESULTS:
: [1] 674262.1

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-fifth",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 28 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-fifth_miniGiraffe16384.â€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-fifth_miniGiraffe2048.câ€¦
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-fifth_miniGiraffe256.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-fifth_miniGiraffe8192.câ€¦
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_yeast-fifth_miniGiraffeNC.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_1_yeast-fifth_miniGiraffe2048.câ€¦
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_1_yeast-fifth_miniGiraffe8192.câ€¦
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-fifth_miniGiraffe16384.â€¦
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-fifth_miniGiraffe2048.câ€¦
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_yeast-fifth_miniGiraffe256.csv
# â„¹ 18 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,736 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.617      0
 2     512      24 omp                0     16384 reading-seeds   1.08       0
 3     512      24 omp                0     16384 seeds-loop      4.39       0
 4     512      24 omp                0     16384 seeds-loop      4.35       1
 5     512      24 omp                0     16384 seeds-loop      4.33       2
 6     512      24 omp                0     16384 seeds-loop      4.45       3
 7     512      24 omp                0     16384 seeds-loop      4.40       4
 8     512      24 omp                0     16384 seeds-loop      4.36       5
 9     512      24 omp                0     16384 seeds-loop      4.35       6
10     512      24 omp                0     16384 seeds-loop      4.36       7
# â„¹ 1,726 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 20 Ã— 5
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0        4.77           4.77
 2      24 omp             256        4.37           4.37
 3      24 omp            2048        3.85           3.85
 4      24 omp            8192        3.88           3.88
 5      24 omp           16384        4.45           4.45
 6      48 omp               0        2.97           2.97
 7      48 omp             256        2.39           2.39
 8      48 omp            2048        2.41           2.41
 9      48 omp            8192        2.42           2.42
10      48 omp           16384        3.20           3.20
11      72 omp               0        2.96           2.96
12      72 omp             256        2.34           2.34
13      72 omp            2048        2.33           2.33
14      72 omp            8192        2.32           2.32
15      72 omp           16384        2.40           2.40
16      96 omp               0        2.83           2.83
17      96 omp             256        2.28           2.28
18      96 omp            2048        2.22           2.22
19      96 omp            8192        2.25           2.25
20      96 omp           16384        2.42           2.42
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureJw4rHs.png]]
#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "Intel") %>%
  mutate(Inputset = "1/50") %>%
  print() -> df.intel.1.50
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 20 Ã— 7
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0        4.77           4.77 Intel   1/50    
 2      24 omp             256        4.37           4.37 Intel   1/50    
 3      24 omp            2048        3.85           3.85 Intel   1/50    
 4      24 omp            8192        3.88           3.88 Intel   1/50    
 5      24 omp           16384        4.45           4.45 Intel   1/50    
 6      48 omp               0        2.97           2.97 Intel   1/50    
 7      48 omp             256        2.39           2.39 Intel   1/50    
 8      48 omp            2048        2.41           2.41 Intel   1/50    
 9      48 omp            8192        2.42           2.42 Intel   1/50    
10      48 omp           16384        3.20           3.20 Intel   1/50    
11      72 omp               0        2.96           2.96 Intel   1/50    
12      72 omp             256        2.34           2.34 Intel   1/50    
13      72 omp            2048        2.33           2.33 Intel   1/50    
14      72 omp            8192        2.32           2.32 Intel   1/50    
15      72 omp           16384        2.40           2.40 Intel   1/50    
16      96 omp               0        2.83           2.83 Intel   1/50    
17      96 omp             256        2.28           2.28 Intel   1/50    
18      96 omp            2048        2.22           2.22 Intel   1/50    
19      96 omp            8192        2.25           2.25 Intel   1/50    
20      96 omp           16384        2.42           2.42 Intel   1/50
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 20 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0   1    
 2      24 omp             256   1.09 
 3      24 omp            2048   1.24 
 4      24 omp            8192   1.23 
 5      24 omp           16384   1.07 
 6      48 omp               0   1    
 7      48 omp             256   1.24 
 8      48 omp            2048   1.23 
 9      48 omp            8192   1.23 
10      48 omp           16384   0.930
11      72 omp               0   1    
12      72 omp             256   1.27 
13      72 omp            2048   1.27 
14      72 omp            8192   1.28 
15      72 omp           16384   1.23 
16      96 omp               0   1    
17      96 omp             256   1.24 
18      96 omp            2048   1.27 
19      96 omp            8192   1.26 
20      96 omp           16384   1.17
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figure3lXgaA.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp            2048   1.13 
 3      24 omp            8192   1.13 
 4      24 omp           16384   0.982
 5      48 omp             256   1    
 6      48 omp            2048   0.989
 7      48 omp            8192   0.989
 8      48 omp           16384   0.747
 9      72 omp             256   1    
10      72 omp            2048   1.00 
11      72 omp            8192   1.01 
12      72 omp           16384   0.975
13      96 omp             256   1    
14      96 omp            2048   1.03 
15      96 omp            8192   1.01 
16      96 omp           16384   0.944
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureeb8ENA.png]]
Speedup of not doing rehash is not that significant on yeast, even
with a really smaller number of sequences to map. Still, we do have
some scenarios where not doing rehash is better than doing.
** First AMD trial - 1/8
#+begin_src R :results output :session *R* :exports both
33713104 / 8
#+end_src

#+RESULTS:
: [1] 4214138

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-eight",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                                 
   <chr>                                                                                                                  
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-eight_miniGiraffe16384.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-eight_miniGiraffe256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-eight_miniGiraffeNC.csv   
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-eight_miniGiraffe16384.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-eight_miniGiraffe256.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-eight_miniGiraffeNC.csv   
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-eight_miniGiraffe16384.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-eight_miniGiraffe256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-eight_miniGiraffeNC.csv   
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_1_yeast-eight_miniGiraffe16384.csv
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.408      0
 2     512      24 omp                0     16384 reading-seeds   5.50       0
 3     512      24 omp                0     16384 seeds-loop     16.3        0
 4     512      24 omp                0     16384 seeds-loop     16.3        1
 5     512      24 omp                0     16384 seeds-loop     16.2        2
 6     512      24 omp                0     16384 seeds-loop     16.3        3
 7     512      24 omp                0     16384 seeds-loop     16.3        4
 8     512      24 omp                0     16384 seeds-loop     16.3        5
 9     512      24 omp                0     16384 seeds-loop     16.3        6
10     512      24 omp                0     16384 seeds-loop     16.3        7
# â„¹ 1,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop" & CacheSize != 2048) %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 12 Ã— 5
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       19.5           19.5 
 2      24 omp             256       16.2           16.2 
 3      24 omp           16384       16.4           16.4 
 4      48 omp               0        9.74           9.74
 5      48 omp             256        8.17           8.17
 6      48 omp           16384        8.24           8.24
 7      72 omp               0        7.47           7.47
 8      72 omp             256        6.17           6.17
 9      72 omp           16384        6.24           6.24
10      96 omp               0        7.06           7.06
11      96 omp             256        5.70           5.70
12      96 omp           16384        5.78           5.78
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureABmpGY.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "AMD") %>%
  mutate(Inputset = "1/8") %>%
  print() -> df.amd.1.8
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 7
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0       19.5           19.5  AMD     1/8     
 2      24 omp             256       16.2           16.2  AMD     1/8     
 3      24 omp           16384       16.4           16.4  AMD     1/8     
 4      48 omp               0        9.74           9.74 AMD     1/8     
 5      48 omp             256        8.17           8.17 AMD     1/8     
 6      48 omp           16384        8.24           8.24 AMD     1/8     
 7      72 omp               0        7.47           7.47 AMD     1/8     
 8      72 omp             256        6.17           6.17 AMD     1/8     
 9      72 omp           16384        6.24           6.24 AMD     1/8     
10      96 omp               0        7.06           7.06 AMD     1/8     
11      96 omp             256        5.70           5.70 AMD     1/8     
12      96 omp           16384        5.78           5.78 AMD     1/8
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.20
 3      24 omp           16384    1.19
 4      48 omp               0    1   
 5      48 omp             256    1.19
 6      48 omp           16384    1.18
 7      72 omp               0    1   
 8      72 omp             256    1.21
 9      72 omp           16384    1.20
10      96 omp               0    1   
11      96 omp             256    1.24
12      96 omp           16384    1.22
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureRtC2zR.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 4
# Groups:   Threads, Scheduler [4]
  Threads Scheduler CacheSize Speedup
    <int> <chr>         <int>   <dbl>
1      24 omp             256   1    
2      24 omp           16384   0.989
3      48 omp             256   1    
4      48 omp           16384   0.992
5      72 omp             256   1    
6      72 omp           16384   0.988
7      96 omp             256   1    
8      96 omp           16384   0.985
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureuIDfSf.png]]

** Second AMD trial - 1/10
#+begin_src R :results output :session *R* :exports both
33713104 / 10
#+end_src

#+RESULTS:
: [1] 3371310

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-ten",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 24 Ã— 1
   SOURCE                                                                                                               
   <chr>                                                                                                                
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-ten_miniGiraffe16384.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-ten_miniGiraffe256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-ten_miniGiraffeNC.csv   
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-ten_miniGiraffe16384.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-ten_miniGiraffe256.csv  
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-ten_miniGiraffeNC.csv   
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-ten_miniGiraffe16384.csv
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-ten_miniGiraffe256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-ten_miniGiraffeNC.csv   
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_1_yeast-ten_miniGiraffe16384.csv
# â„¹ 14 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,488 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.410      0
 2     512      24 omp                0     16384 reading-seeds   4.19       0
 3     512      24 omp                0     16384 seeds-loop     13.1        0
 4     512      24 omp                0     16384 seeds-loop     13.1        1
 5     512      24 omp                0     16384 seeds-loop     13.1        2
 6     512      24 omp                0     16384 seeds-loop     13.1        3
 7     512      24 omp                0     16384 seeds-loop     13.1        4
 8     512      24 omp                0     16384 seeds-loop     13.1        5
 9     512      24 omp                0     16384 seeds-loop     13.1        6
10     512      24 omp                0     16384 seeds-loop     13.1        7
# â„¹ 1,478 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 12 Ã— 5
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       15.5           15.5 
 2      24 omp             256       13.0           13.0 
 3      24 omp           16384       13.1           13.1 
 4      48 omp               0        7.77           7.77
 5      48 omp             256        6.49           6.49
 6      48 omp           16384        6.55           6.55
 7      72 omp               0        6.00           6.00
 8      72 omp             256        4.95           4.95
 9      72 omp           16384        4.96           4.96
10      96 omp               0        5.66           5.66
11      96 omp             256        4.59           4.59
12      96 omp           16384        4.64           4.64
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figuremAzXMQ.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "AMD") %>%
  mutate(Inputset = "1/10") %>%
  print() -> df.amd.1.10
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 7
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0       15.5           15.5  AMD     1/10    
 2      24 omp             256       13.0           13.0  AMD     1/10    
 3      24 omp           16384       13.1           13.1  AMD     1/10    
 4      48 omp               0        7.77           7.77 AMD     1/10    
 5      48 omp             256        6.49           6.49 AMD     1/10    
 6      48 omp           16384        6.55           6.55 AMD     1/10    
 7      72 omp               0        6.00           6.00 AMD     1/10    
 8      72 omp             256        4.95           4.95 AMD     1/10    
 9      72 omp           16384        4.96           4.96 AMD     1/10    
10      96 omp               0        5.66           5.66 AMD     1/10    
11      96 omp             256        4.59           4.59 AMD     1/10    
12      96 omp           16384        4.64           4.64 AMD     1/10
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.19
 3      24 omp           16384    1.18
 4      48 omp               0    1   
 5      48 omp             256    1.20
 6      48 omp           16384    1.19
 7      72 omp               0    1   
 8      72 omp             256    1.21
 9      72 omp           16384    1.21
10      96 omp               0    1   
11      96 omp             256    1.23
12      96 omp           16384    1.22
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureeIguol.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp           16384   1.01 
 3      24 ws              256   1    
 4      24 ws            16384   0.970
 5      48 omp             256   1    
 6      48 omp           16384   0.910
 7      48 ws              256   1    
 8      48 ws            16384   1.12 
 9      72 omp             256   1    
10      72 omp           16384   0.976
11      72 ws              256   1    
12      72 ws            16384   1.00 
13      96 omp             256   1    
14      96 omp           16384   1.11 
15      96 ws              256   1    
16      96 ws            16384   0.987
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figurePMT8CG.png]]
Speedup of not doing rehash is not that significant on yeast, even
with a really smaller number of sequences to map. Still, we do have
some scenarios where not doing rehash is better than doing.
** Third AMD trial - 1/50
#+begin_src R :results output :session *R* :exports both
33713104 / 50
#+end_src

#+RESULTS:
: [1] 674262.1

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="yeast-fifth",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 Ã— 1
   SOURCE                                                                                                                 
   <chr>                                                                                                                  
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-fifth_miniGiraffe16384.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-fifth_miniGiraffe256.csv  
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-fifth_miniGiraffe8192.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_0_yeast-fifth_miniGiraffeNC.csv   
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-fifth_miniGiraffe16384.csv
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-fifth_miniGiraffe256.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-fifth_miniGiraffe8192.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_24_omp_1_yeast-fifth_miniGiraffeNC.csv   
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-fifth_miniGiraffe16384.csv
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/6-7/512_48_omp_0_yeast-fifth_miniGiraffe256.csv  
# â„¹ 22 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,984 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0     16384 reading-gbz     0.407      0
 2     512      24 omp                0     16384 reading-seeds   0.875      0
 3     512      24 omp                0     16384 seeds-loop      2.58       0
 4     512      24 omp                0     16384 seeds-loop      2.58       1
 5     512      24 omp                0     16384 seeds-loop      2.59       2
 6     512      24 omp                0     16384 seeds-loop      2.56       3
 7     512      24 omp                0     16384 seeds-loop      2.57       4
 8     512      24 omp                0     16384 seeds-loop      2.58       5
 9     512      24 omp                0     16384 seeds-loop      2.64       6
10     512      24 omp                0     16384 seeds-loop      2.56       7
# â„¹ 1,974 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 16 Ã— 5
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       3.14           3.14 
 2      24 omp             256       2.62           2.62 
 3      24 omp            8192       2.61           2.61 
 4      24 omp           16384       2.64           2.64 
 5      48 omp               0       1.62           1.62 
 6      48 omp             256       1.35           1.35 
 7      48 omp            8192       1.35           1.35 
 8      48 omp           16384       1.36           1.36 
 9      72 omp               0       1.27           1.27 
10      72 omp             256       1.04           1.04 
11      72 omp            8192       1.04           1.04 
12      72 omp           16384       1.06           1.06 
13      96 omp               0       1.19           1.19 
14      96 omp             256       0.973          0.973
15      96 omp            8192       0.979          0.979
16      96 omp           16384       0.989          0.989
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureVEW5Ei.png]]
#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  mutate(Machine = "AMD") %>%
  mutate(Inputset = "1/50") %>%
  print() -> df.amd.1.50
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 7
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0       3.14           3.14  AMD     1/50    
 2      24 omp             256       2.62           2.62  AMD     1/50    
 3      24 omp            8192       2.61           2.61  AMD     1/50    
 4      24 omp           16384       2.64           2.64  AMD     1/50    
 5      48 omp               0       1.62           1.62  AMD     1/50    
 6      48 omp             256       1.35           1.35  AMD     1/50    
 7      48 omp            8192       1.35           1.35  AMD     1/50    
 8      48 omp           16384       1.36           1.36  AMD     1/50    
 9      72 omp               0       1.27           1.27  AMD     1/50    
10      72 omp             256       1.04           1.04  AMD     1/50    
11      72 omp            8192       1.04           1.04  AMD     1/50    
12      72 omp           16384       1.06           1.06  AMD     1/50    
13      96 omp               0       1.19           1.19  AMD     1/50    
14      96 omp             256       0.973          0.973 AMD     1/50    
15      96 omp            8192       0.979          0.979 AMD     1/50    
16      96 omp           16384       0.989          0.989 AMD     1/50
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.20
 3      24 omp            8192    1.21
 4      24 omp           16384    1.19
 5      48 omp               0    1   
 6      48 omp             256    1.20
 7      48 omp            8192    1.20
 8      48 omp           16384    1.19
 9      72 omp               0    1   
10      72 omp             256    1.23
11      72 omp            8192    1.23
12      72 omp           16384    1.20
13      96 omp               0    1   
14      96 omp             256    1.22
15      96 omp            8192    1.22
16      96 omp           16384    1.20
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureSFWvKh.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp            8192   1.01 
 3      24 omp           16384   0.994
 4      48 omp             256   1    
 5      48 omp            8192   1.00 
 6      48 omp           16384   0.989
 7      72 omp             256   1    
 8      72 omp            8192   1.00 
 9      72 omp           16384   0.981
10      96 omp             256   1    
11      96 omp            8192   0.994
12      96 omp           16384   0.983
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureeb8ENA.png]]
Speedup of not doing rehash is not that significant on yeast, even
with a really smaller number of sequences to map. Still, we do have
some scenarios where not doing rehash is better than doing.
** Investigate rehash bottleneck for Grch38
Let's see if on Grch38 we can see changes. We know that it will not be
with the complete avoidance of rehash (see results on 6.4), but let's
try with the best case that we found out there.

Pipeline file - pipeline-6-7.py
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="grch38-ten",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 32 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_grch38-ten_miniGiraffe2048.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_grch38-ten_miniGiraffe256.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_grch38-ten_miniGiraffe32768.câ€¦
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_0_grch38-ten_miniGiraffeNC.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_omp_1_grch38-ten_miniGiraffe32768.câ€¦
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_grch38-ten_miniGiraffe2048.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_grch38-ten_miniGiraffe256.csv  
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_24_ws_0_grch38-ten_miniGiraffeNC.csv   
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_grch38-ten_miniGiraffe2048.csv
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/512_48_omp_0_grch38-ten_miniGiraffe256.csv 
# â„¹ 22 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "XX7", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,984 Ã— 8
   Batches Threads Scheduler Repetition CacheSize Query         Runtime Thread
     <int>   <int> <chr>          <int>     <int> <chr>           <dbl>  <dbl>
 1     512      24 omp                0      2048 reading-gbz      21.8      0
 2     512      24 omp                0      2048 reading-seeds    13.8      0
 3     512      24 omp                0      2048 seeds-loop       13.1      0
 4     512      24 omp                0      2048 seeds-loop       12.9      1
 5     512      24 omp                0      2048 seeds-loop       12.8      2
 6     512      24 omp                0      2048 seeds-loop       12.8      3
 7     512      24 omp                0      2048 seeds-loop       12.7      4
 8     512      24 omp                0      2048 seeds-loop       12.8      5
 9     512      24 omp                0      2048 seeds-loop       13.0      6
10     512      24 omp                0      2048 seeds-loop       12.9      7
# â„¹ 1,974 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.6.7.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'Threads', 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 28 Ã— 5
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan
     <int> <chr>         <int>       <dbl>          <dbl>
 1      24 omp               0       16.3           16.3 
 2      24 omp             256       14.2           14.2 
 3      24 omp            2048       13.1           13.1 
 4      24 omp           32768       16.0           16.0 
 5      24 ws                0       16.8           16.8 
 6      24 ws              256       13.9           13.9 
 7      24 ws             2048       13.8           13.8 
 8      48 omp               0       12.3           12.3 
 9      48 omp             256        9.05           9.05
10      48 omp            2048       10.4           10.4 
# â„¹ 18 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figure8kkD7Q.png]]

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 28 Ã— 4
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp               0    1   
 2      24 omp             256    1.15
 3      24 omp            2048    1.24
 4      24 omp           32768    1.02
 5      24 ws                0    1   
 6      24 ws              256    1.21
 7      24 ws             2048    1.22
 8      48 omp               0    1   
 9      48 omp             256    1.36
10      48 omp            2048    1.18
# â„¹ 18 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.speedup %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureQkrlBY.png]]
Getting this size was more effective on no-rehashing.

#+begin_src R :results output :session *R* :exports both
df.6.7.makespan %>%
  ungroup() %>%
  filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  filter(Scheduler == "omp") %>%
  print() -> df.6.7.rehash
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12 Ã— 4
# Groups:   Threads, Scheduler [4]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1      24 omp             256   1    
 2      24 omp            2048   1.09 
 3      24 omp           32768   0.887
 4      48 omp             256   1    
 5      48 omp            2048   0.866
 6      48 omp           32768   0.695
 7      72 omp             256   1    
 8      72 omp            2048   0.909
 9      72 omp           32768   0.986
10      96 omp             256   1    
11      96 omp            2048   1.12 
12      96 omp           32768   1.26
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.7.rehash %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figuresZRlgx.png]]
Can the results from ws give a hint of how many reads or seeds per
thread the 72 threads case there was doing to get this speedup? Maybe
can correlate with the openmp same test

Will run manually, one of each, to see

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Start = X2, End = X3, Thread = X4)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="work_per(.*).csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 1
:   SOURCE                                                                                                      
:   <chr>                                                                                                       
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/work_per_thread_grch38_omp.csv
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/6-7/work_per_thread_grch38_ws.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("XX8", "XX9", "XX10", "XX11", "Scheduler"), sep="_") %>%
    mutate(Scheduler = str_replace_all(Scheduler, ".csv", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.6.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 12,879,736 Ã— 5
   Scheduler Query             Start       End Thread
   <chr>     <chr>             <dbl>     <dbl>  <dbl>
 1 omp       reading-seeds 10987522. 10987536.      0
 2 omp       reading-gbz   10987536. 10987558.      0
 3 omp       seeds-loop    10987558. 10987558.      0
 4 omp       seeds-loop    10987558. 10987558.      0
 5 omp       seeds-loop    10987558. 10987558.      0
 6 omp       seeds-loop    10987558. 10987558.      0
 7 omp       seeds-loop    10987558. 10987558.      0
 8 omp       seeds-loop    10987558. 10987558.     50
 9 omp       seeds-loop    10987558. 10987558.     50
10 omp       seeds-loop    10987558. 10987558.     50
# â„¹ 12,879,726 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.6.7 %>%
  mutate(Duration = End - Start) %>%
  group_by(Scheduler, Thread) %>%
  filter(Query == "seeds-loop") %>%
  summarize(Qntd = n(),
            Runtime = sum(Duration)) %>%
  print() -> df.work
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Scheduler'. You can override using the `.groups` argument.
# A tibble: 144 Ã— 4
# Groups:   Scheduler [2]
   Scheduler Thread   Qntd Runtime
   <chr>      <dbl>  <int>   <dbl>
 1 omp            0  75264    7.40
 2 omp            1  80384    7.32
 3 omp            2 114176    6.64
 4 omp            3  76288    7.53
 5 omp            4  87040    7.20
 6 omp            5  77824    7.44
 7 omp            6  90624    7.12
 8 omp            7  84480    7.34
 9 omp            8  76800    7.49
10 omp            9 114688    6.70
# â„¹ 134 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.work %>%
  summarize(max(Qntd), max(Runtime))
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 3
:   Scheduler `max(Qntd)` `max(Runtime)`
:   <chr>           <int>          <dbl>
: 1 omp            117248           7.77
: 2 ws             110080          10.5

#+begin_src R :results output :session *R* :exports both
df.work %>%
  filter(Runtime == max(Runtime))
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 4
: # Groups:   Scheduler [2]
:   Scheduler Thread  Qntd Runtime
:   <chr>      <dbl> <int>   <dbl>
: 1 omp           53 66560    7.77
: 2 ws             8 76288   10.5

#+begin_src R :results output :session *R* :exports both
df.work %>%
  filter(Thread == 2)
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 4
: # Groups:   Scheduler [2]
:   Scheduler Thread   Qntd Runtime
:   <chr>      <dbl>  <int>   <dbl>
: 1 omp            2 114176    6.64
: 2 ws             2  99328    8.75

Despite presenting a better speedup, the runtime of ws scheduler is
bigger than omp, so it is not bringing benefits to the original
approach. If the ws runtime were faster than omp and we had gains with
the rehash stuff, then we could use it. But it is not the case.
** Summary
#+begin_src R :results output :session *R* :exports both
df.intel.1.8 %>%
  bind_rows(df.intel.1.10, df.intel.1.50, df.amd.1.8, df.amd.1.10, df.amd.1.50) %>%
  print() -> df.yeast
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 108 Ã— 7
# Groups:   Threads, Scheduler [8]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>   
 1      24 omp               0        30.6           30.6 Intel   1/8     
 2      24 omp             256        26.0           26.0 Intel   1/8     
 3      24 omp           16384        24.9           24.9 Intel   1/8     
 4      24 ws                0        33.0           33.0 Intel   1/8     
 5      24 ws              256        28.8           28.8 Intel   1/8     
 6      24 ws            16384        24.8           24.8 Intel   1/8     
 7      48 omp               0        23.4           23.4 Intel   1/8     
 8      48 omp             256        18.5           18.5 Intel   1/8     
 9      48 omp           16384        18.2           18.2 Intel   1/8     
10      48 ws                0        24.1           24.1 Intel   1/8     
# â„¹ 98 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.yeast %>%
  ungroup() %>%
  filter(Scheduler == "omp" & CacheSize >= 0) %>%
  group_by(Machine, Inputset, Threads) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  print() -> df.yeast.speed
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 84 Ã— 9
# Groups:   Machine, Inputset, Threads [24]
   Threads Scheduler CacheSize AvgMakespan MedianMakespan Machine Inputset Baseline Speedup
     <int> <chr>         <int>       <dbl>          <dbl> <chr>   <chr>       <dbl>   <dbl>
 1      24 omp               0        30.6           30.6 Intel   1/8          30.6    1   
 2      24 omp             256        26.0           26.0 Intel   1/8          30.6    1.18
 3      24 omp           16384        24.9           24.9 Intel   1/8          30.6    1.23
 4      48 omp               0        23.4           23.4 Intel   1/8          23.4    1   
 5      48 omp             256        18.5           18.5 Intel   1/8          23.4    1.26
 6      48 omp           16384        18.2           18.2 Intel   1/8          23.4    1.28
 7      72 omp               0        19.2           19.2 Intel   1/8          19.2    1   
 8      72 omp             256        14.9           14.9 Intel   1/8          19.2    1.29
 9      72 omp           16384        14.6           14.6 Intel   1/8          19.2    1.32
10      96 omp               0        17.5           17.5 Intel   1/8          17.5    1   
# â„¹ 74 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
my_custom_colors <- c("#D95F02", "#7570B3",  
                      "#66A61E", "#E6AB02", "#A6761D", "#666666")
df.yeast.speed %>%
  filter(CacheSize != 2048 & CacheSize > 0) %>%
  mutate(CacheSize = factor(CacheSize, levels = c(0, 256, 2048, 8192, 16384), ordered=TRUE),
         Inputset = factor(Inputset, levels = c("1/8", "1/10", "1/50"), ordered=TRUE),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Speedup, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  geom_hline(yintercept = 1, linetype = "dashed") +
  scale_fill_manual(values = my_custom_colors) +
  ylim(0.0, 1.5) +
  facet_grid(Machine~Inputset) +
  theme_bw()+
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-IxsbR2/figureGGeTcv.png]]
I have been playing with different quantities of reads for two input
sets: the yeast, and the grch38. These two are bigger than the 1000GP.

For the yeast, I have chopped the input set size by 1/8, 1/10 and 1/50
of the original size. I just got the total size, divided by one of the
factors, and used that portion to run miniGiraffe. Since I am chopping
some reads, I have confirmed what was the new maximum size the
CachedGBWT achieved to run with these new sizes (i.e. the size where
we don't do rehash). Thus, for 1/8 and
1/10, the maximum size is 16384, while for 1/50 was 8192. In the plot
I am showing the speedup of not doing rehash in each scenario. Even
decreasing by a considerable amount the number of reads per thread,
avoiding rehash does not bring much of benefit for most of the
scenarios. For those that it does bring speedup (as on 1/10 with 96
threads and on 1/50 with 24 threads), the gain is not that
expressive. Looking on the 1/50, lowering even more the number of
reads per thread (on 72 and 96 threads) and not performing rehash with
the size of 8192 does not present much of difference of doing the
resize.
One interesting point in here though is that, when running with 16k
size on this smaller version, this bigger capacity affects the runtime
in a negative way. All executions present a slowdown compared to the
original initial capacity of 256. And this goes along with what I find
for the full Grch38 test case, where avoiding rehash completely
requires that the initial capacity of this caching structure to be so
huge that negatively affects the performance.
Testing on AMD, avoiding rehashing does not make any difference on
performance.

* 7 - Exploring different tuning parameters + auto tuning
** Brainstorm of the idea
In this experiment, I need to perform a few tests to explore different
tuning parameters for different input sets.
The idea consists on finding the best perfomer setting for each test
case before running it completely.
There are 3 to 4 dimensions I can play:
- Scheduler (omp or ws)
- Batch size
- GBWT Cache initial capacity (using or not caching structure)
- Number of threads

For the last point, it is hard that the best performer will not be
equal to the biggest quantity of threads available, so I think we can
disregard that.

This testing needs to consist in a few steps:
- Given the input set, generate a smaller version with 10% of the
  total sequences to be mapped
- Generate different combinations of the dimensions to test
- Save the results to later analysis
- Analyze and determine which one got better results
- Run the full execution

Since I will be trying to get the best performer, I think I should try
to run in two scenarios - total cores and total threads. Some machines
does not have more threads than cores, so I just need to make sure
that I will do it correctly.

I will have a script in Python since I think it will be easier to
code. I also have already some pipeline scripts that I can reuse.

Steps to make this happen:
- Change the ~lower_input~ code to always get 10% of the test case
- Create script python with the MiniGiraffePipeline class that will
  receive as parameters the two input files (sequences and gbz)
- First thing on script will be to lower the input
- Input ready, generate test cases (needs to be randomically with all
  possible settings)
- Script must collect how many cores and threads the machine has
- Script must run the application using the lowered input and store
  the tracing results in files for each run
- After everything is collected, the script needs to determine the
  best setting
- (for paper purposes) this part should generate a plot or at least
  store the tracing to further plotting
- With the best setting, we run the full execution
- (for paper purposes) the script should also run the default version
  to compare how better the tuning made the application run
This script is ready and tested on ~iiswc25/tuning-pipeline.py~
** 7.1 - Tuning on kaffirlime
*** 1000GP
Ran on Jun 4
*** Yeast
Ran on ?
*** Grch38
Ran on Jun 5
*** Grch38_random
New addition!
*** Chm13
Ran on ?

*** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 502 Ã— 1
   SOURCE                                                                                                               
   <chr>                                                                                                                
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_1024.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_128.csv 
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_2048.csv
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_256.csv 
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_4096.csv
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_omp_0_tuning_512.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_ws_0_tuning_1024.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_ws_0_tuning_128.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_ws_0_tuning_2048.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning/1000GP/1024_48_ws_0_tuning_256.csv  
# â„¹ 492 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%  
  print() -> df.7.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 38,612 Ã— 10
   InputSet Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>      <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP      1024      48 omp                0 tuning      1024 reading-gbz    44.9        0
 2 1000GP      1024      48 omp                0 tuning      1024 reading-seeds   1.72       0
 3 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      0.988      0
 4 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      0.983      1
 5 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      1.01       2
 6 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      0.988      3
 7 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      0.887      4
 8 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      1.00       5
 9 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      0.997      6
10 1000GP      1024      48 omp                0 tuning      1024 seeds-loop      1.01       7
# â„¹ 38,602 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

**FOR REBUTTAL**
Total execution time of miniGiraffe
#+begin_src R :results output :session *R* :exports both
df.7.1 %>%
  filter(Batches == 256 & Scheduler == "omp" & CacheSize == 512) %>%
  group_by(InputSet, Threads, Repetition, Query) %>%
  summarize(Total = max(Runtime)) %>%
  ungroup() %>%
  group_by(InputSet, Threads, Repetition) %>%
  summarize(Full = sum(Total)) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Threads', 'Repetition'. You can override using the `.groups` argument.
`summarise()` has grouped output by 'InputSet', 'Threads'. You can override using the `.groups` argument.
# A tibble: 9 Ã— 4
# Groups:   InputSet, Threads [9]
  InputSet      Threads Repetition   Full
  <chr>           <int>      <int>  <dbl>
1 1000GP             48          0  48.1 
2 1000GP             96          0  47.8 
3 chm13              48          0 143.  
4 chm13              96          0 129.  
5 grch38             48          0  44.9 
6 grch38             96          0  44.5 
7 grch38_random      96          0 175.  
8 yeast              48          0  10.3 
9 yeast              96          0   8.84
#+end_example

Runtime of full Giraffe

#+RESULTS:
: # A tibble: 4 Ã— 3
:   TestCase `max(Thread)` `max(TotalTime)/2`
:   <chr>            <dbl>              <dbl>
: 1 A                   23               70.4
: 2 B                   23              341. 
: 3 C                   23             1668. 
: 4 D                   23              210.

#+begin_src R :results output :session *R* :exports both
70.4 / 48.1
1668 / 143
#+end_src

#+RESULTS:
: [1] 1.463617
: [1] 11.66434

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.1 %>%
  filter(Query == "seeds-loop") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  print() -> df.7.1.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
# A tibble: 502 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [492]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      48 omp                0       128 tuning    1.06 
 2 1000GP       128      48 omp                0       256 tuning    0.969
 3 1000GP       128      48 omp                0       512 tuning    0.980
 4 1000GP       128      48 omp                0      1024 tuning    1.01 
 5 1000GP       128      48 omp                0      2048 tuning    0.961
 6 1000GP       128      48 omp                0      4096 tuning    1.01 
 7 1000GP       128      48 ws                 0       128 tuning    1.07 
 8 1000GP       128      48 ws                 0       256 tuning    1.01 
 9 1000GP       128      48 ws                 0       512 tuning    1.01 
10 1000GP       128      48 ws                 0      1024 tuning    0.994
# â„¹ 492 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  filter(InputSet == "chm13" & Test == "tuning" & Threads == 96) %>%
  print() -> df.7.1.chm13
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [50]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 chm13        128      96 omp                0       256 tuning     41.4
 2 chm13        128      96 omp                0       512 tuning     37.0
 3 chm13        128      96 omp                0      1024 tuning     37.7
 4 chm13        128      96 omp                0      2048 tuning     34.5
 5 chm13        128      96 omp                0      4096 tuning     38.6
 6 chm13        128      96 ws                 0       256 tuning     42.2
 7 chm13        128      96 ws                 0       512 tuning     36.5
 8 chm13        128      96 ws                 0      1024 tuning     37.7
 9 chm13        128      96 ws                 0      2048 tuning     36.6
10 chm13        128      96 ws                 0      4096 tuning     37.1
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) %>%
  print() -> df.anova

  model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
  summary(model)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [50]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>    <fct>     <int> <fct>          <int> <fct>     <chr>     <dbl>
 1 chm13    128          96 omp                0 256       tuning     41.4
 2 chm13    128          96 omp                0 512       tuning     37.0
 3 chm13    128          96 omp                0 1024      tuning     37.7
 4 chm13    128          96 omp                0 2048      tuning     34.5
 5 chm13    128          96 omp                0 4096      tuning     38.6
 6 chm13    128          96 ws                 0 256       tuning     42.2
 7 chm13    128          96 ws                 0 512       tuning     36.5
 8 chm13    128          96 ws                 0 1024      tuning     37.7
 9 chm13    128          96 ws                 0 2048      tuning     36.6
10 chm13    128          96 ws                 0 4096      tuning     37.1
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
            Df Sum Sq Mean Sq F value  Pr(>F)   
Batches      4  42.86  10.715   3.877 0.00940 **
Scheduler    1   5.84   5.844   2.114 0.15372   
CacheSize    4  54.14  13.535   4.897 0.00261 **
Residuals   40 110.56   2.764                   
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1
#+end_example


#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  ungroup() %>%
  arrange(Makespan) %>%
  filter(Makespan == first(Makespan)) %>%
  print() -> df.7.1.best
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        128      96 omp                0      2048 tuning     34.5

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  filter(Batches == 512 & Threads == 96 & Scheduler == "omp" & CacheSize == 256) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        512      96 omp                0       256 tuning     40.5

#+begin_src R :results output :session *R* :exports both
(40.5 - 34.5) / 40.5 * 100
#+end_src

#+RESULTS:
: [1] 14.81481

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  filter(Batches == 128 & Threads == 48 & Scheduler == "omp" & CacheSize == 2048) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        128      48 omp                0      2048 tuning     51.8

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  filter(Batches == 512 & Threads == 48 & Scheduler == "omp" & CacheSize == 256) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        512      48 omp                0       256 tuning     52.0

#+begin_src R :results output :session *R* :exports both
(52 - 51.8) / 52 * 100
#+end_src

#+RESULTS:
: [1] 0.3846154

What is the best setting for 48 threads?
#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  ungroup() %>%
  filter(Threads == 48) %>%
  arrange(Makespan) %>%
  filter(Makespan == first(Makespan))
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13       2048      48 omp                0      4096 tuning     48.8

#+begin_src R :results output :session *R* :exports both
100 * 48.8 / 52
#+end_src

#+RESULTS:
: [1] 93.84615

Brings 7% speed

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  filter(Batches == 128 & Threads == 72 & Scheduler == "omp" & CacheSize == 2048) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        128      72 omp                0      2048 tuning     41.3

#+begin_src R :results output :session *R* :exports both
df.7.1.chm13 %>%
  filter(Batches == 512 & Threads == 72 & Scheduler == "omp" & CacheSize == 256) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 chm13        512      72 omp                0       256 tuning     40.5

#+begin_src R :results output :session *R* :exports both
(40.5 - 41.3) / 40.5 * 100
#+end_src

#+RESULTS:
: [1] -1.975309

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.1.chm13 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureiHAdcO.png]]

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  filter(InputSet == "grch38" & Test == "tuning") %>%
  print() -> df.7.1.grch38
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 120 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [120]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 grch38       128      48 omp                0       128 tuning    11.5 
 2 grch38       128      48 omp                0       256 tuning    11.4 
 3 grch38       128      48 omp                0       512 tuning    10.3 
 4 grch38       128      48 omp                0      1024 tuning    10.9 
 5 grch38       128      48 omp                0      2048 tuning     9.89
 6 grch38       128      48 omp                0      4096 tuning     9.98
 7 grch38       128      48 ws                 0       128 tuning    11.8 
 8 grch38       128      48 ws                 0       256 tuning    11.4 
 9 grch38       128      48 ws                 0       512 tuning    11.7 
10 grch38       128      48 ws                 0      1024 tuning    10.9 
# â„¹ 110 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.1.grch38 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-TluOQF/figureRDKLwb.png]]

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R*
p <- df.7.1.grch38 %>%
  mutate(Batches = as.factor(Batches),
         CacheSize = as.factor(CacheSize)) %>%
  filter(Threads == 96) %>%
  ggplot(aes(x=Batches, y=Makespan, color=CacheSize, fill=Scheduler)) +
  geom_point(aes(shape=Scheduler),size=5) +
  geom_line(aes(x=as.numeric(Batches))) +
  labs(y="Makespan (sec)", color="Initial Cache", fill="Scheduler", shape="Scheduler") +
  #scale_color_manual(values=colors_list) +
  #facet_wrap(~TestCase, nrow=2) +
  theme_bw() +
  theme(legend.position = "top",
        legend.text=element_text(size=18),
        text = element_text(size = 16),
        axis.text.x = element_text(angle = 25, hjust = 1, size=16))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-TluOQF/figure0EQYmP.png]]
#+begin_src R :results graphics file :file  :exports both :width 600 :height 400 :session *R*

#+end_src


#+begin_src R :results output :session *R* :exports both
df.7.1.grch38 %>%
  ungroup() %>%
  arrange(Makespan) %>%
  filter(Makespan == first(Makespan))
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 grch38       256      96 omp                0      4096 tuning     8.04

#+begin_src R :results output :session *R* :exports both
df.7.1.grch38 %>%
  filter(Batches == 512 & Threads == 96 & Scheduler == "omp" & CacheSize == 256) %>%
  print()
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 8
: # Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [1]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
: 1 grch38       512      96 omp                0       256 tuning     10.4


#+begin_src R :results output :session *R* :exports both
100 - (8.04 * 100 / 10.4)
#+end_src

#+RESULTS:
: [1] 22.69231


#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  filter(Test != "tuning") %>%
  mutate(Machine = "local-intel") %>%
  mutate(Execution = case_when((Batches == 512 & Threads == 96 & Scheduler == "omp" & CacheSize == 256) ~ "Original",
                               TRUE ~ "Tunned")
         ) %>%
  write_csv("iiswc25/tuning-results-intel.csv") %>%
  print() -> df.7.1.full
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 19.97PB/s                                                                                                                          # A tibble: 10 Ã— 10
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [10]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine     Execution
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>    <dbl> <chr>       <chr>    
 1 1000GP            256      96 omp                0      4096 full      6.96 local-intel Tunned   
 2 1000GP            512      96 omp                0       256 full     10.3  local-intel Original 
 3 chm13             128      96 omp                0      2048 full    700.   local-intel Tunned   
 4 chm13             512      96 omp                0       256 full    675.   local-intel Original 
 5 grch38            256      96 omp                0      4096 full     70.6  local-intel Tunned   
 6 grch38            512      96 omp                0       256 full     67.9  local-intel Original 
 7 grch38_random     128      96 omp                0      2048 full     12.6  local-intel Tunned   
 8 grch38_random     512      96 omp                0       256 full     29.9  local-intel Original 
 9 yeast             128      96 ws                 0       512 full    115.   local-intel Tunned   
10 yeast             512      96 omp                0       256 full    118.   local-intel Original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Makespan == min(Makespan),
         Threads != 72) %>%
  mutate(Setting = "tuned") %>%
  filter(InputSet != is.na(InputSet)) %>%
  print() -> df.7.1.best
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 9 Ã— 9
# Groups:   InputSet, Threads [9]
  InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting
  <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>  
1 1000GP            256      96 omp                0      4096 tuning    0.623 tuned  
2 1000GP            512      48 omp                0      1024 tuning    0.936 tuned  
3 chm13             128      96 omp                0      2048 tuning   34.5   tuned  
4 chm13            2048      48 omp                0      4096 tuning   48.8   tuned  
5 grch38            256      96 omp                0      4096 tuning    8.04  tuned  
6 grch38           1024      48 omp                0       128 tuning    8.86  tuned  
7 grch38_random     128      96 omp                0      2048 tuning   10.4   tuned  
8 yeast             128      48 omp                0      4096 tuning    5.91  tuned  
9 yeast             128      96 ws                 0       512 tuning    5.49  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") %>%
  filter(InputSet != is.na(InputSet)) %>%
  print() -> df.7.1.original
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 10 Ã— 9
# Groups:   InputSet, Threads [10]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
 1 1000GP            512      48 omp                0       256 tuning     1.08 original
 2 1000GP            512      96 omp                0       256 tuning     1.47 original
 3 chm13             512      48 omp                0       256 tuning    52.0  original
 4 chm13             512      72 omp                0       256 tuning    40.5  original
 5 chm13             512      96 omp                0       256 tuning    40.5  original
 6 grch38            512      48 omp                0       256 tuning    10.9  original
 7 grch38            512      96 omp                0       256 tuning    10.4  original
 8 grch38_random     512      96 omp                0       256 tuning    16.6  original
 9 yeast             512      48 omp                0       256 tuning     7.18 original
10 yeast             512      96 omp                0       256 tuning     5.84 original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.original %>%
  bind_rows(df.7.1.best) %>%
  #arrange(Makespan) %>%
  #mutate(Baseline = first(Makespan),
  #       Percent = 100 * Baseline / Makespan) %>%
  print() -> df.7.1.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 19 Ã— 9
# Groups:   InputSet, Threads [10]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
 1 1000GP            512      48 omp                0       256 tuning    1.08  original
 2 1000GP            512      96 omp                0       256 tuning    1.47  original
 3 chm13             512      48 omp                0       256 tuning   52.0   original
 4 chm13             512      72 omp                0       256 tuning   40.5   original
 5 chm13             512      96 omp                0       256 tuning   40.5   original
 6 grch38            512      48 omp                0       256 tuning   10.9   original
 7 grch38            512      96 omp                0       256 tuning   10.4   original
 8 grch38_random     512      96 omp                0       256 tuning   16.6   original
 9 yeast             512      48 omp                0       256 tuning    7.18  original
10 yeast             512      96 omp                0       256 tuning    5.84  original
11 1000GP            256      96 omp                0      4096 tuning    0.623 tuned   
12 1000GP            512      48 omp                0      1024 tuning    0.936 tuned   
13 chm13             128      96 omp                0      2048 tuning   34.5   tuned   
14 chm13            2048      48 omp                0      4096 tuning   48.8   tuned   
15 grch38            256      96 omp                0      4096 tuning    8.04  tuned   
16 grch38           1024      48 omp                0       128 tuning    8.86  tuned   
17 grch38_random     128      96 omp                0      2048 tuning   10.4   tuned   
18 yeast             128      48 omp                0      4096 tuning    5.91  tuned   
19 yeast             128      96 ws                 0       512 tuning    5.49  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
improvement.7.1 <- df.7.1.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

# Print the resulting dataframe to see the output
print(improvement.7.1)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 9 Ã— 5
# Groups:   InputSet, Threads [9]
  InputSet      Threads original  tuned Percent
  <chr>           <int>    <dbl>  <dbl>   <dbl>
1 1000GP             48     1.08  0.936   13.6 
2 1000GP             96     1.47  0.623   57.6 
3 chm13              48    52.0  48.8      6.05
4 chm13              96    40.5  34.5     14.9 
5 grch38             48    10.9   8.86    18.9 
6 grch38             96    10.4   8.04    22.5 
7 grch38_random      96    16.6  10.4     37.0 
8 yeast              48     7.18  5.91    17.7 
9 yeast              96     5.84  5.49     6.03
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1.compare %>%
  filter(Threads != 72) %>%
  left_join(improvement.7.1, by=c("InputSet", "Threads")) %>%
  select(-original, -tuned) %>%
  write_csv("./iiswc25/best_results_tuning_intel.csv") %>%
  print() -> df.7.1.compare
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 52.43PB/s                                                                                                                          # A tibble: 18 Ã— 10
# Groups:   InputSet, Threads [9]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      <dbl>
 1 1000GP            512      48 omp                0       256 tuning    1.08  original   13.6 
 2 1000GP            512      96 omp                0       256 tuning    1.47  original   57.6 
 3 chm13             512      48 omp                0       256 tuning   52.0   original    6.05
 4 chm13             512      96 omp                0       256 tuning   40.5   original   14.9 
 5 grch38            512      48 omp                0       256 tuning   10.9   original   18.9 
 6 grch38            512      96 omp                0       256 tuning   10.4   original   22.5 
 7 grch38_random     512      96 omp                0       256 tuning   16.6   original   37.0 
 8 yeast             512      48 omp                0       256 tuning    7.18  original   17.7 
 9 yeast             512      96 omp                0       256 tuning    5.84  original    6.03
10 1000GP            256      96 omp                0      4096 tuning    0.623 tuned      57.6 
11 1000GP            512      48 omp                0      1024 tuning    0.936 tuned      13.6 
12 chm13             128      96 omp                0      2048 tuning   34.5   tuned      14.9 
13 chm13            2048      48 omp                0      4096 tuning   48.8   tuned       6.05
14 grch38            256      96 omp                0      4096 tuning    8.04  tuned      22.5 
15 grch38           1024      48 omp                0       128 tuning    8.86  tuned      18.9 
16 grch38_random     128      96 omp                0      2048 tuning   10.4   tuned      37.0 
17 yeast             128      48 omp                0      4096 tuning    5.91  tuned      17.7 
18 yeast             128      96 ws                 0       512 tuning    5.49  tuned       6.03
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.1.compare %>%
  filter(Threads != 72) %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  mutate(Machine = "chi-intel") %>%
  ggplot(aes(x=Machine, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_wrap(~InputSet, scales="free") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-1327hY/figure3GJSkM.png]]

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 600 :session *R*
p <- df.7.1.compare %>%
  filter(!is.na(InputSet)) %>%
  mutate(Machine = "chi-intel") %>%
  mutate(Label = case_when(Setting == "tuned" ~ paste0(round(Speedup, 2), "x"),
                           Setting == "original" ~ NA_character_)) %>%
  ggplot(aes(x=Machine, y=Makespan)) +
  geom_bar(aes(fill=Setting), stat = "identity", width = 0.8, position = "dodge") +
  facet_wrap(~InputSet, ncol=2, scales="free") +
  #coord_cartesian(ylim = c(0, 200)) +
  #ylim(0, 3) +
  ylab("Makespan (sec)") +
    geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    #data = . ,
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = Label),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    #position = position_dodge(width = 1),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 0.5,
    nudge_y = -0,
    # Set the font size for readability.
    size = 4
  ) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-1327hY/figure3c9GB6.png]]


** 7.2 - Tuning on tangerine
*** 1000GP
Running on Jun 9
*** Yeast
Ran on June 6
*** Grch38
Ran on June 8
*** Chm13
Ran on June 5
*** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 408 Ã— 1
   SOURCE                                                                                                            
   <chr>                                                                                                             
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_omp_0_tuning_1024.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_omp_0_tuning_2048.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_omp_0_tuning_256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_omp_0_tuning_4096.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_omp_0_tuning_512.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_ws_0_tuning_1024.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_ws_0_tuning_2048.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_ws_0_tuning_256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_ws_0_tuning_4096.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning/1000GP/1024_128_ws_0_tuning_512.csv  
# â„¹ 398 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 40,240 Ã— 10
   InputSet Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>      <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP      1024     128 omp                0 tuning      1024 reading-gbz    29.2        0
 2 1000GP      1024     128 omp                0 tuning      1024 reading-seeds   1.33       0
 3 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.169      0
 4 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.187      1
 5 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.192      2
 6 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.165      3
 7 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.171      4
 8 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.166      5
 9 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.148      6
10 1000GP      1024     128 omp                0 tuning      1024 seeds-loop      0.135      7
# â„¹ 40,230 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.2 %>%
  filter(Query == "seeds-loop") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  print() -> df.7.2.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
# A tibble: 408 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [400]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      64 omp                0       256 tuning    0.268
 2 1000GP       128      64 omp                0       512 tuning    0.262
 3 1000GP       128      64 omp                0      1024 tuning    0.286
 4 1000GP       128      64 omp                0      2048 tuning    0.292
 5 1000GP       128      64 omp                0      4096 tuning    0.280
 6 1000GP       128      64 ws                 0       256 tuning    0.348
 7 1000GP       128      64 ws                 0       512 tuning    0.311
 8 1000GP       128      64 ws                 0      1024 tuning    0.317
 9 1000GP       128      64 ws                 0      2048 tuning    0.317
10 1000GP       128      64 ws                 0      4096 tuning    0.322
# â„¹ 398 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  filter(InputSet == "1000GP" & Test == "tuning") %>%
  print() -> df.7.2.1000GP
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      64 omp                0       256 tuning    0.268
 2 1000GP       128      64 omp                0       512 tuning    0.262
 3 1000GP       128      64 omp                0      1024 tuning    0.286
 4 1000GP       128      64 omp                0      2048 tuning    0.292
 5 1000GP       128      64 omp                0      4096 tuning    0.280
 6 1000GP       128      64 ws                 0       256 tuning    0.348
 7 1000GP       128      64 ws                 0       512 tuning    0.311
 8 1000GP       128      64 ws                 0      1024 tuning    0.317
 9 1000GP       128      64 ws                 0      2048 tuning    0.317
10 1000GP       128      64 ws                 0      4096 tuning    0.322
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.2.1000GP %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figurexkloPs.png]]

#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  filter(InputSet == "grch38" & Test == "tuning") %>%
  print() -> df.7.2.grch38
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 grch38       128      64 omp                0       256 tuning     3.52
 2 grch38       128      64 omp                0       512 tuning     3.54
 3 grch38       128      64 omp                0      1024 tuning     3.58
 4 grch38       128      64 omp                0      2048 tuning     3.68
 5 grch38       128      64 omp                0      4096 tuning     3.50
 6 grch38       128      64 ws                 0       256 tuning     4.10
 7 grch38       128      64 ws                 0       512 tuning     3.92
 8 grch38       128      64 ws                 0      1024 tuning     3.91
 9 grch38       128      64 ws                 0      2048 tuning     3.87
10 grch38       128      64 ws                 0      4096 tuning     3.88
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.2.grch38 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureSEgUYj.png]]
#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  filter(Test != "tuning") %>%
  mutate(Machine = "amd") %>%
  mutate(Execution = case_when((Batches == 512 & Threads == 128 & Scheduler == "omp" & CacheSize == 256) ~ "Original",
                               TRUE ~ "Tunned")
         ) %>%
  write_csv("iiswc25/tuning-results-amd.csv") %>%
  print() -> df.7.2.full
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 62.60PB/s                                                                                                                          # A tibble: 8 Ã— 10
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [8]
  InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine Execution
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>    <dbl> <chr>   <chr>    
1 1000GP       512     128 omp                0       256 full      1.64 amd     Original 
2 1000GP       512     128 omp                0      2048 full      1.58 amd     Tunned   
3 chm13        512     128 omp                0       256 full    237.   amd     Original 
4 chm13       1024     128 omp                0      4096 full    224.   amd     Tunned   
5 grch38       128     128 omp                0      4096 full     23.4  amd     Tunned   
6 grch38       512     128 omp                0       256 full     23.8  amd     Original 
7 yeast        128     128 omp                0       512 full     42.5  amd     Tunned   
8 yeast        512     128 omp                0       256 full     42.5  amd     Original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Makespan == min(Makespan),
         Threads != 72) %>%
  mutate(Setting = "tuned") %>%
  print() -> df.7.2.best
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 9
# Groups:   InputSet, Threads [8]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>  
1 1000GP       256      64 omp                0       512 tuning    0.258 tuned  
2 1000GP       512     128 omp                0      2048 tuning    0.193 tuned  
3 chm13       1024      64 omp                0      2048 tuning   33.8   tuned  
4 chm13       1024     128 omp                0      4096 tuning   22.5   tuned  
5 grch38       128      64 omp                0      4096 tuning    3.50  tuned  
6 grch38       128     128 omp                0      4096 tuning    2.53  tuned  
7 yeast        128      64 omp                0      2048 tuning    5.02  tuned  
8 yeast        128     128 omp                0       512 tuning    4.18  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") %>%
  print() -> df.7.2.original
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 9
# Groups:   InputSet, Threads [8]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
1 1000GP       512      64 omp                0       256 tuning    0.300 original
2 1000GP       512     128 omp                0       256 tuning    0.222 original
3 chm13        512      64 omp                0       256 tuning   35.8   original
4 chm13        512     128 omp                0       256 tuning   24.0   original
5 grch38       512      64 omp                0       256 tuning    3.96  original
6 grch38       512     128 omp                0       256 tuning    2.92  original
7 yeast        512      64 omp                0       256 tuning    5.08  original
8 yeast        512     128 omp                0       256 tuning    4.24  original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.original %>%
  bind_rows(df.7.2.best) %>%
  print() -> df.7.2.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 9
# Groups:   InputSet, Threads [8]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
 1 1000GP       512      64 omp                0       256 tuning    0.300 original
 2 1000GP       512     128 omp                0       256 tuning    0.222 original
 3 chm13        512      64 omp                0       256 tuning   35.8   original
 4 chm13        512     128 omp                0       256 tuning   24.0   original
 5 grch38       512      64 omp                0       256 tuning    3.96  original
 6 grch38       512     128 omp                0       256 tuning    2.92  original
 7 yeast        512      64 omp                0       256 tuning    5.08  original
 8 yeast        512     128 omp                0       256 tuning    4.24  original
 9 1000GP       256      64 omp                0       512 tuning    0.258 tuned   
10 1000GP       512     128 omp                0      2048 tuning    0.193 tuned   
11 chm13       1024      64 omp                0      2048 tuning   33.8   tuned   
12 chm13       1024     128 omp                0      4096 tuning   22.5   tuned   
13 grch38       128      64 omp                0      4096 tuning    3.50  tuned   
14 grch38       128     128 omp                0      4096 tuning    2.53  tuned   
15 yeast        128      64 omp                0      2048 tuning    5.02  tuned   
16 yeast        128     128 omp                0       512 tuning    4.18  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
improvement.7.2 <- df.7.2.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

# Print the resulting dataframe to see the output
print(improvement.7.2)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 5
# Groups:   InputSet, Threads [8]
  InputSet Threads original  tuned Percent
  <chr>      <int>    <dbl>  <dbl>   <dbl>
1 1000GP        64    0.300  0.258   14.0 
2 1000GP       128    0.222  0.193   12.8 
3 chm13         64   35.8   33.8      5.62
4 chm13        128   24.0   22.5      6.19
5 grch38        64    3.96   3.50    11.7 
6 grch38       128    2.92   2.53    13.5 
7 yeast         64    5.08   5.02     1.26
8 yeast        128    4.24   4.18     1.47
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.compare %>%
  left_join(improvement.7.2, by=c("InputSet", "Threads")) %>%
  select(-original, -tuned) %>%
  write_csv("./iiswc25/best_results_tuning_amd.csv") %>%
  print() -> df.7.2.compare
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 61.68PB/s                                                                                                                          # A tibble: 16 Ã— 10
# Groups:   InputSet, Threads [8]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      <dbl>
 1 1000GP       512      64 omp                0       256 tuning    0.300 original   14.0 
 2 1000GP       512     128 omp                0       256 tuning    0.222 original   12.8 
 3 chm13        512      64 omp                0       256 tuning   35.8   original    5.62
 4 chm13        512     128 omp                0       256 tuning   24.0   original    6.19
 5 grch38       512      64 omp                0       256 tuning    3.96  original   11.7 
 6 grch38       512     128 omp                0       256 tuning    2.92  original   13.5 
 7 yeast        512      64 omp                0       256 tuning    5.08  original    1.26
 8 yeast        512     128 omp                0       256 tuning    4.24  original    1.47
 9 1000GP       256      64 omp                0       512 tuning    0.258 tuned      14.0 
10 1000GP       512     128 omp                0      2048 tuning    0.193 tuned      12.8 
11 chm13       1024      64 omp                0      2048 tuning   33.8   tuned       5.62
12 chm13       1024     128 omp                0      4096 tuning   22.5   tuned       6.19
13 grch38       128      64 omp                0      4096 tuning    3.50  tuned      11.7 
14 grch38       128     128 omp                0      4096 tuning    2.53  tuned      13.5 
15 yeast        128      64 omp                0      2048 tuning    5.02  tuned       1.26
16 yeast        128     128 omp                0       512 tuning    4.18  tuned       1.47
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.2.compare %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_wrap(~InputSet, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureN7DBWe.png]]

** 7.3 - Tuning on intel-chameleon
*** 1000GP
Ran on Jun 4
*** Yeast
Ran on June 8
*** Grch38
*** Chm13
Running on June 8
*** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 406 Ã— 1
   SOURCE                                                                                                                
   <chr>                                                                                                                 
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_omp_0_tuning_1024.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_omp_0_tuning_2048.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_omp_0_tuning_256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_omp_0_tuning_4096.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_omp_0_tuning_512.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_ws_0_tuning_1024.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_ws_0_tuning_2048.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_ws_0_tuning_256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_ws_0_tuning_4096.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning/1000GP/1024_160_ws_0_tuning_512.csv  
# â„¹ 396 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.3
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 49,772 Ã— 10
   InputSet Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>      <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP      1024     160 omp                0 tuning      1024 reading-gbz    50.3        0
 2 1000GP      1024     160 omp                0 tuning      1024 reading-seeds   1.95       0
 3 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.258      0
 4 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.247      1
 5 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.284      2
 6 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.295      3
 7 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.257      4
 8 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.285      5
 9 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.253      6
10 1000GP      1024     160 omp                0 tuning      1024 seeds-loop      0.275      7
# â„¹ 49,762 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.3 %>%
  filter(Query == "seeds-loop") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  print() -> df.7.3.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
# A tibble: 406 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [400]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      80 omp                0       256 tuning    0.473
 2 1000GP       128      80 omp                0       512 tuning    0.487
 3 1000GP       128      80 omp                0      1024 tuning    0.488
 4 1000GP       128      80 omp                0      2048 tuning    0.522
 5 1000GP       128      80 omp                0      4096 tuning    0.428
 6 1000GP       128      80 ws                 0       256 tuning    0.517
 7 1000GP       128      80 ws                 0       512 tuning    0.536
 8 1000GP       128      80 ws                 0      1024 tuning    0.544
 9 1000GP       128      80 ws                 0      2048 tuning    0.543
10 1000GP       128      80 ws                 0      4096 tuning    0.549
# â„¹ 396 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  filter(InputSet == "1000GP" & Test == "tuning") %>%
  print() -> df.7.3.1000GP
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      80 omp                0       256 tuning    0.473
 2 1000GP       128      80 omp                0       512 tuning    0.487
 3 1000GP       128      80 omp                0      1024 tuning    0.488
 4 1000GP       128      80 omp                0      2048 tuning    0.522
 5 1000GP       128      80 omp                0      4096 tuning    0.428
 6 1000GP       128      80 ws                 0       256 tuning    0.517
 7 1000GP       128      80 ws                 0       512 tuning    0.536
 8 1000GP       128      80 ws                 0      1024 tuning    0.544
 9 1000GP       128      80 ws                 0      2048 tuning    0.543
10 1000GP       128      80 ws                 0      4096 tuning    0.549
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.3.1000GP %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figure1WfLzG.png]]

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  filter(InputSet == "grch38" & Test == "tuning") %>%
  print() -> df.7.3.grch38
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 grch38       128      80 omp                0       256 tuning     5.03
 2 grch38       128      80 omp                0       512 tuning     5.12
 3 grch38       128      80 omp                0      1024 tuning     4.85
 4 grch38       128      80 omp                0      2048 tuning     6.24
 5 grch38       128      80 omp                0      4096 tuning     4.80
 6 grch38       128      80 ws                 0       256 tuning     7.38
 7 grch38       128      80 ws                 0       512 tuning     6.92
 8 grch38       128      80 ws                 0      1024 tuning     7.36
 9 grch38       128      80 ws                 0      2048 tuning     7.35
10 grch38       128      80 ws                 0      4096 tuning     7.15
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  filter(InputSet == "chm13" & Test == "tuning" & Threads == 160) %>%
  ungroup() %>%
  select(Batches, Scheduler, CacheSize, Makespan) %>%
  print(n=50) -> df.7.3.chm13
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 4
   Batches Scheduler CacheSize Makespan
     <int> <chr>         <int>    <dbl>
 1     128 omp             256     72.8
 2     128 omp             512     63.8
 3     128 omp            1024     53.0
 4     128 omp            2048     44.7
 5     128 omp            4096     41.5
 6     128 ws              256     53.5
 7     128 ws              512     50.5
 8     128 ws             1024     47.7
 9     128 ws             2048     61.3
10     128 ws             4096     44.4
11     256 omp             256     53.2
12     256 omp             512     46.8
13     256 omp            1024     45.5
14     256 omp            2048     47.0
15     256 omp            4096     40.3
16     256 ws              256     54.3
17     256 ws              512     50.2
18     256 ws             1024     46.9
19     256 ws             2048     56.0
20     256 ws             4096     53.8
21     512 omp             256     66.5
22     512 omp             512     52.1
23     512 omp            1024     39.2
24     512 omp            2048     52.7
25     512 omp            4096     44.3
26     512 ws              256     41.5
27     512 ws              512     56.6
28     512 ws             1024     55.9
29     512 ws             2048     40.8
30     512 ws             4096     61.7
31    1024 omp             256     65.7
32    1024 omp             512     63.7
33    1024 omp            1024     40.5
34    1024 omp            2048     42.5
35    1024 omp            4096     41.0
36    1024 ws              256     51.3
37    1024 ws              512     47.4
38    1024 ws             1024     52.1
39    1024 ws             2048     61.2
40    1024 ws             4096     46.1
41    2048 omp             256     62.2
42    2048 omp             512     69.3
43    2048 omp            1024     46.2
44    2048 omp            2048     42.0
45    2048 omp            4096     46.6
46    2048 ws              256     47.2
47    2048 ws              512     40.4
48    2048 ws             1024     45.4
49    2048 ws             2048     54.2
50    2048 ws             4096     52.3
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.chm13 %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) %>%
  print() -> df.anova

  model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
  summary(model)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 4
   Batches Scheduler CacheSize Makespan
   <fct>   <fct>     <fct>        <dbl>
 1 128     omp       256           72.8
 2 128     omp       512           63.8
 3 128     omp       1024          53.0
 4 128     omp       2048          44.7
 5 128     omp       4096          41.5
 6 128     ws        256           53.5
 7 128     ws        512           50.5
 8 128     ws        1024          47.7
 9 128     ws        2048          61.3
10 128     ws        4096          44.4
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
            Df Sum Sq Mean Sq F value Pr(>F)  
Batches      4   81.4   20.36   0.299 0.8771  
Scheduler    1    2.2    2.17   0.032 0.8592  
CacheSize    4  725.0  181.25   2.658 0.0466 *
Residuals   40 2727.2   68.18                 
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.grch38 %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) %>%
  print() -> df.anova

  model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
  summary(model)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>    <fct>     <int> <fct>          <int> <fct>     <chr>     <dbl>
 1 grch38   128          80 omp                0 256       tuning     5.03
 2 grch38   128          80 omp                0 512       tuning     5.12
 3 grch38   128          80 omp                0 1024      tuning     4.85
 4 grch38   128          80 omp                0 2048      tuning     6.24
 5 grch38   128          80 omp                0 4096      tuning     4.80
 6 grch38   128          80 ws                 0 256       tuning     7.38
 7 grch38   128          80 ws                 0 512       tuning     6.92
 8 grch38   128          80 ws                 0 1024      tuning     7.36
 9 grch38   128          80 ws                 0 2048      tuning     7.35
10 grch38   128          80 ws                 0 4096      tuning     7.15
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
            Df Sum Sq Mean Sq F value   Pr(>F)    
Batches      4   0.91   0.227   0.246    0.911    
Scheduler    1  25.88  25.883  28.079 8.22e-07 ***
CacheSize    4   2.44   0.611   0.663    0.620    
Residuals   90  82.96   0.922                     
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.1000GP %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) %>%
  print() -> df.anova

  model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
  summary(model)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>    <fct>     <int> <fct>          <int> <fct>     <chr>     <dbl>
 1 1000GP   128          80 omp                0 256       tuning    0.473
 2 1000GP   128          80 omp                0 512       tuning    0.487
 3 1000GP   128          80 omp                0 1024      tuning    0.488
 4 1000GP   128          80 omp                0 2048      tuning    0.522
 5 1000GP   128          80 omp                0 4096      tuning    0.428
 6 1000GP   128          80 ws                 0 256       tuning    0.517
 7 1000GP   128          80 ws                 0 512       tuning    0.536
 8 1000GP   128          80 ws                 0 1024      tuning    0.544
 9 1000GP   128          80 ws                 0 2048      tuning    0.543
10 1000GP   128          80 ws                 0 4096      tuning    0.549
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
            Df Sum Sq Mean Sq F value Pr(>F)    
Batches      4 0.0260 0.00650   0.851  0.497    
Scheduler    1 0.1693 0.16935  22.172  9e-06 ***
CacheSize    4 0.0023 0.00057   0.074  0.990    
Residuals   90 0.6874 0.00764                   
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  filter(InputSet == "yeast" & Test == "tuning" & Threads == 160) %>%
  ungroup() %>%
  select(Batches, Scheduler, CacheSize, Makespan) %>%
  print(n=50) -> df.7.3.yeast
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 4
   Batches Scheduler CacheSize Makespan
     <int> <chr>         <int>    <dbl>
 1     128 omp             256     7.99
 2     128 omp             512     9.82
 3     128 omp            1024     9.80
 4     128 omp            2048     6.46
 5     128 omp            4096     7.85
 6     128 ws              256     8.47
 7     128 ws              512     7.58
 8     128 ws             1024     6.15
 9     128 ws             2048     7.56
10     128 ws             4096     7.07
11     256 omp             256     6.33
12     256 omp             512     7.65
13     256 omp            1024     9.30
14     256 omp            2048     8.98
15     256 omp            4096     9.37
16     256 ws              256    10.2 
17     256 ws              512     6.34
18     256 ws             1024     6.34
19     256 ws             2048    10.0 
20     256 ws             4096     9.36
21     512 omp             256     9.71
22     512 omp             512     9.47
23     512 omp            1024     9.75
24     512 omp            2048     8.91
25     512 omp            4096     8.08
26     512 ws              256     7.80
27     512 ws              512     8.35
28     512 ws             1024    10.8 
29     512 ws             2048    10.3 
30     512 ws             4096    10.9 
31    1024 omp             256     8.53
32    1024 omp             512     9.28
33    1024 omp            1024     8.37
34    1024 omp            2048    10.5 
35    1024 omp            4096     9.15
36    1024 ws              256     9.75
37    1024 ws              512    10.2 
38    1024 ws             1024    10.0 
39    1024 ws             2048     9.46
40    1024 ws             4096    10.3 
41    2048 omp             256     6.62
42    2048 omp             512     7.65
43    2048 omp            1024     9.06
44    2048 omp            2048     9.26
45    2048 omp            4096     8.05
46    2048 ws              256    10.5 
47    2048 ws              512    11.0 
48    2048 ws             1024    10.8 
49    2048 ws             2048     6.92
50    2048 ws             4096    10.6
#+end_example


#+begin_src R :results output :session *R* :exports both
df.7.3.yeast %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) %>%
  print() -> df.anova

  model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
  summary(model)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 4
   Batches Scheduler CacheSize Makespan
   <fct>   <fct>     <fct>        <dbl>
 1 128     omp       256           7.99
 2 128     omp       512           9.82
 3 128     omp       1024          9.80
 4 128     omp       2048          6.46
 5 128     omp       4096          7.85
 6 128     ws        256           8.47
 7 128     ws        512           7.58
 8 128     ws        1024          6.15
 9 128     ws        2048          7.56
10 128     ws        4096          7.07
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
            Df Sum Sq Mean Sq F value Pr(>F)  
Batches      4  20.11   5.028   2.784 0.0394 *
Scheduler    1   2.37   2.365   1.310 0.2593  
CacheSize    4   1.64   0.411   0.228 0.9213  
Residuals   40  72.24   1.806                 
---
Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.3.grch38 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureEXPO5y.png]]
#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  filter(Test != "tuning") %>%
  mutate(Machine = "chi-intel") %>%
  mutate(Execution = case_when((Batches == 512 & Threads == 160 & Scheduler == "omp" & CacheSize == 256) ~ "Original",
                               TRUE ~ "Tunned")
         ) %>%
  write_csv("iiswc25/tuning-results-chi-intel.csv") %>%
  print() -> df.7.3.full
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 67.65PB/s                                                                                                                          # A tibble: 6 Ã— 10
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [6]
  InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine   Execution
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>    <dbl> <chr>     <chr>    
1 1000GP       128     160 omp                0      2048 full      2.44 chi-intel Tunned   
2 1000GP       512     160 omp                0       256 full      7.14 chi-intel Original 
3 grch38       128     160 omp                0      4096 full     39.3  chi-intel Tunned   
4 grch38       512     160 omp                0       256 full     45.0  chi-intel Original 
5 yeast        128     160 ws                 0      1024 full     71.0  chi-intel Tunned   
6 yeast        512     160 omp                0       256 full     72.0  chi-intel Original
#+end_example


#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Makespan == min(Makespan)) %>%
  mutate(Setting = "tuned") %>%
  print() -> df.7.3.best
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 9
# Groups:   InputSet, Threads [8]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>  
1 1000GP       128     160 omp                0      2048 tuning    0.271 tuned  
2 1000GP      1024      80 omp                0       256 tuning    0.404 tuned  
3 chm13        512     160 omp                0      1024 tuning   39.2   tuned  
4 chm13       1024      80 omp                0      1024 tuning   44.5   tuned  
5 grch38       128     160 omp                0      4096 tuning    4.19  tuned  
6 grch38       256      80 omp                0      2048 tuning    4.73  tuned  
7 yeast        128      80 ws                 0       512 tuning    6.31  tuned  
8 yeast        128     160 ws                 0      1024 tuning    6.15  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") %>%
  print() -> df.7.3.original
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 9
# Groups:   InputSet, Threads [8]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
1 1000GP       512      80 omp                0       256 tuning    0.532 original
2 1000GP       512     160 omp                0       256 tuning    0.354 original
3 chm13        512      80 omp                0       256 tuning   66.3   original
4 chm13        512     160 omp                0       256 tuning   66.5   original
5 grch38       512      80 omp                0       256 tuning    4.90  original
6 grch38       512     160 omp                0       256 tuning    5.12  original
7 yeast        512      80 omp                0       256 tuning    9.27  original
8 yeast        512     160 omp                0       256 tuning    9.71  original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.original %>%
  bind_rows(df.7.3.best) %>%
  print() -> df.7.3.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 9
# Groups:   InputSet, Threads [8]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
 1 1000GP       512      80 omp                0       256 tuning    0.532 original
 2 1000GP       512     160 omp                0       256 tuning    0.354 original
 3 chm13        512      80 omp                0       256 tuning   66.3   original
 4 chm13        512     160 omp                0       256 tuning   66.5   original
 5 grch38       512      80 omp                0       256 tuning    4.90  original
 6 grch38       512     160 omp                0       256 tuning    5.12  original
 7 yeast        512      80 omp                0       256 tuning    9.27  original
 8 yeast        512     160 omp                0       256 tuning    9.71  original
 9 1000GP       128     160 omp                0      2048 tuning    0.271 tuned   
10 1000GP      1024      80 omp                0       256 tuning    0.404 tuned   
11 chm13        512     160 omp                0      1024 tuning   39.2   tuned   
12 chm13       1024      80 omp                0      1024 tuning   44.5   tuned   
13 grch38       128     160 omp                0      4096 tuning    4.19  tuned   
14 grch38       256      80 omp                0      2048 tuning    4.73  tuned   
15 yeast        128      80 ws                 0       512 tuning    6.31  tuned   
16 yeast        128     160 ws                 0      1024 tuning    6.15  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
improvement.7.3 <- df.7.3.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

# Print the resulting dataframe to see the output
print(improvement.7.3)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 5
# Groups:   InputSet, Threads [8]
  InputSet Threads original  tuned Percent
  <chr>      <int>    <dbl>  <dbl>   <dbl>
1 1000GP        80    0.532  0.404   24.1 
2 1000GP       160    0.354  0.271   23.3 
3 chm13         80   66.3   44.5     32.9 
4 chm13        160   66.5   39.2     41.0 
5 grch38        80    4.90   4.73     3.58
6 grch38       160    5.12   4.19    18.1 
7 yeast         80    9.27   6.31    31.9 
8 yeast        160    9.71   6.15    36.6
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.compare %>%
  left_join(improvement.7.3, by=c("InputSet", "Threads")) %>%
  select(-original, -tuned) %>%
  write_csv("./iiswc25/best_results_tuning_chi-intel.csv") %>%
  print() -> df.7.3.compare
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 58.25PB/s                                                                                                                          # A tibble: 16 Ã— 10
# Groups:   InputSet, Threads [8]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      <dbl>
 1 1000GP       512      80 omp                0       256 tuning    0.532 original   24.1 
 2 1000GP       512     160 omp                0       256 tuning    0.354 original   23.3 
 3 chm13        512      80 omp                0       256 tuning   66.3   original   32.9 
 4 chm13        512     160 omp                0       256 tuning   66.5   original   41.0 
 5 grch38       512      80 omp                0       256 tuning    4.90  original    3.58
 6 grch38       512     160 omp                0       256 tuning    5.12  original   18.1 
 7 yeast        512      80 omp                0       256 tuning    9.27  original   31.9 
 8 yeast        512     160 omp                0       256 tuning    9.71  original   36.6 
 9 1000GP       128     160 omp                0      2048 tuning    0.271 tuned      23.3 
10 1000GP      1024      80 omp                0       256 tuning    0.404 tuned      24.1 
11 chm13        512     160 omp                0      1024 tuning   39.2   tuned      41.0 
12 chm13       1024      80 omp                0      1024 tuning   44.5   tuned      32.9 
13 grch38       128     160 omp                0      4096 tuning    4.19  tuned      18.1 
14 grch38       256      80 omp                0      2048 tuning    4.73  tuned       3.58
15 yeast        128      80 ws                 0       512 tuning    6.31  tuned      31.9 
16 yeast        128     160 ws                 0      1024 tuning    6.15  tuned      36.6
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.3.compare %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_wrap(~InputSet, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figuredrHIFF.png]]

** 7.4 - Tuning on chi-arm
*** 1000GP
Ran on Jun 4
*** Yeast
Ran on June 8
*** Grch38
*** Chm13
Running on June 8
*** Analysis
Group reading data
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 206 Ã— 1
   SOURCE                                                                                             
   <chr>                                                                                              
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_omp_0_tuning_1024.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_omp_0_tuning_2048.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_omp_0_tuning_256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_omp_0_tuning_4096.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_omp_0_tuning_512.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_ws_0_tuning_1024.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_ws_0_tuning_2048.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_ws_0_tuning_256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_ws_0_tuning_4096.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning/1000GP/1024_64_ws_0_tuning_512.csv  
# â„¹ 196 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.4
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 13,596 Ã— 10
   InputSet Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>      <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP      1024      64 omp                0 tuning      1024 reading-gbz    120.        0
 2 1000GP      1024      64 omp                0 tuning      1024 reading-seeds    3.40      0
 3 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.63      0
 4 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.63      1
 5 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.63      2
 6 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.62      3
 7 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.63      4
 8 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.62      5
 9 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.60      6
10 1000GP      1024      64 omp                0 tuning      1024 seeds-loop       1.62      7
# â„¹ 13,586 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.4 %>%
  filter(Query == "seeds-loop") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  print() -> df.7.4.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
# A tibble: 206 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [200]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      64 omp                0       256 tuning     3.29
 2 1000GP       128      64 omp                0       512 tuning     2.49
 3 1000GP       128      64 omp                0      1024 tuning     1.63
 4 1000GP       128      64 omp                0      2048 tuning     1.03
 5 1000GP       128      64 omp                0      4096 tuning     1.16
 6 1000GP       128      64 ws                 0       256 tuning     2.59
 7 1000GP       128      64 ws                 0       512 tuning     2.81
 8 1000GP       128      64 ws                 0      1024 tuning     2.00
 9 1000GP       128      64 ws                 0      2048 tuning     1.42
10 1000GP       128      64 ws                 0      4096 tuning     1.40
# â„¹ 196 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  filter(InputSet == "1000GP" & Test == "tuning") %>%
  print() -> df.7.4.1000GP
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [50]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP       128      64 omp                0       256 tuning     3.29
 2 1000GP       128      64 omp                0       512 tuning     2.49
 3 1000GP       128      64 omp                0      1024 tuning     1.63
 4 1000GP       128      64 omp                0      2048 tuning     1.03
 5 1000GP       128      64 omp                0      4096 tuning     1.16
 6 1000GP       128      64 ws                 0       256 tuning     2.59
 7 1000GP       128      64 ws                 0       512 tuning     2.81
 8 1000GP       128      64 ws                 0      1024 tuning     2.00
 9 1000GP       128      64 ws                 0      2048 tuning     1.42
10 1000GP       128      64 ws                 0      4096 tuning     1.40
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.4.1000GP %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-6kpow7/figureA8Zg1q.png]]

#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  filter(InputSet == "grch38" & Test == "tuning") %>%
  print() -> df.7.4.grch38
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [50]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 grch38       128      64 omp                0       256 tuning    13.5 
 2 grch38       128      64 omp                0       512 tuning     9.73
 3 grch38       128      64 omp                0      1024 tuning    10.9 
 4 grch38       128      64 omp                0      2048 tuning    10.8 
 5 grch38       128      64 omp                0      4096 tuning    10.6 
 6 grch38       128      64 ws                 0       256 tuning    12.9 
 7 grch38       128      64 ws                 0       512 tuning    11.8 
 8 grch38       128      64 ws                 0      1024 tuning    10.7 
 9 grch38       128      64 ws                 0      2048 tuning    10.3 
10 grch38       128      64 ws                 0      4096 tuning    10.2 
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
df.7.3.grch38 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(Scheduler~Batches) +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-m6pXWy/figureEXPO5y.png]]
#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  filter(Test != "tuning") %>%
  mutate(Machine = "chi-arm") %>%
  mutate(Execution = case_when((Batches == 512 & Threads == 64 & Scheduler == "omp" & CacheSize == 256) ~ "Original",
                               TRUE ~ "Tunned")
         ) %>%
  write_csv("iiswc25/tuning-results-chi-arm.csv") %>%
  print() -> df.7.4.full
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 20.36PB/s                                                                                                                          # A tibble: 6 Ã— 10
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [6]
  InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine Execution
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>    <dbl> <chr>   <chr>    
1 1000GP       256      64 omp                0      4096 full      7.80 chi-arm Tunned   
2 1000GP       512      64 omp                0       256 full     11.4  chi-arm Original 
3 grch38       256      64 omp                0       256 full     98.1  chi-arm Tunned   
4 grch38      2048      64 ws                 0      4096 full     96.6  chi-arm Tunned   
5 yeast        256      64 ws                 0      1024 full    135.   chi-arm Tunned   
6 yeast        512      64 omp                0       256 full    138.   chi-arm Original
#+end_example


#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Makespan == min(Makespan)) %>%
  mutate(Setting = "tuned") %>%
  print() -> df.7.4.best
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 9
: # Groups:   InputSet, Threads [4]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>  
: 1 1000GP       256      64 omp                0      4096 tuning    0.990 tuned  
: 2 chm13       1024      64 ws                 0      2048 tuning   93.7   tuned  
: 3 grch38       512      64 ws                 0       256 tuning    9.37  tuned  
: 4 yeast        256      64 ws                 0      1024 tuning   13.3   tuned

#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") %>%
  print() -> df.7.4.original
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 9
: # Groups:   InputSet, Threads [4]
:   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
:   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
: 1 1000GP       512      64 omp                0       256 tuning     3.29 original
: 2 chm13        512      64 omp                0       256 tuning    99.8  original
: 3 grch38       512      64 omp                0       256 tuning    10.9  original
: 4 yeast        512      64 omp                0       256 tuning    13.5  original

#+begin_src R :results output :session *R* :exports both
df.7.4.original %>%
  bind_rows(df.7.4.best) %>%
  print() -> df.7.4.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 9
# Groups:   InputSet, Threads [4]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
1 1000GP       512      64 omp                0       256 tuning    3.29  original
2 chm13        512      64 omp                0       256 tuning   99.8   original
3 grch38       512      64 omp                0       256 tuning   10.9   original
4 yeast        512      64 omp                0       256 tuning   13.5   original
5 1000GP       256      64 omp                0      4096 tuning    0.990 tuned   
6 chm13       1024      64 ws                 0      2048 tuning   93.7   tuned   
7 grch38       512      64 ws                 0       256 tuning    9.37  tuned   
8 yeast        256      64 ws                 0      1024 tuning   13.3   tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
improvement.7.4 <- df.7.4.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

# Print the resulting dataframe to see the output
print(improvement.7.4)
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 5
: # Groups:   InputSet, Threads [4]
:   InputSet Threads original  tuned Percent
:   <chr>      <int>    <dbl>  <dbl>   <dbl>
: 1 1000GP        64     3.29  0.990   69.9 
: 2 chm13         64    99.8  93.7      6.12
: 3 grch38        64    10.9   9.37    13.9 
: 4 yeast         64    13.5  13.3      1.99

#+begin_src R :results output :session *R* :exports both
df.7.4.compare %>%
  left_join(improvement.7.4, by=c("InputSet", "Threads")) %>%
  select(-original, -tuned) %>%
  write_csv("./iiswc25/best_results_tuning_chi-arm.csv") %>%
  print() -> df.7.4.compare
#+end_src

#+RESULTS:
#+begin_example
wrote 1.00TB in  0s, 59.07PB/s                                                                                                                          # A tibble: 8 Ã— 10
# Groups:   InputSet, Threads [4]
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
  <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      <dbl>
1 1000GP       512      64 omp                0       256 tuning    3.29  original   69.9 
2 chm13        512      64 omp                0       256 tuning   99.8   original    6.12
3 grch38       512      64 omp                0       256 tuning   10.9   original   13.9 
4 yeast        512      64 omp                0       256 tuning   13.5   original    1.99
5 1000GP       256      64 omp                0      4096 tuning    0.990 tuned      69.9 
6 chm13       1024      64 ws                 0      2048 tuning   93.7   tuned       6.12
7 grch38       512      64 ws                 0       256 tuning    9.37  tuned      13.9 
8 yeast        256      64 ws                 0      1024 tuning   13.3   tuned       1.99
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.4.compare %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_wrap(~InputSet, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-67x5qJ/figureJo9sOu.png]]

** Full Analysis
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=TRUE,
             col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="tuning-results(.*).csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 1
:   SOURCE                                                                
:   <chr>                                                                 
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning-results-amd.csv      
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning-results-chi-arm.csv  
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning-results-chi-intel.csv
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning-results-intel.csv

#+begin_src R :results output :session *R* :exports both
df %>%
  mutate(DATA = map(SOURCE, read_traces)) %>%
  separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6"), sep="/") %>%
  select(-contains("XX")) %>%
  unnest(DATA) %>%
  mutate(Machine = case_when(Machine == "amd" ~ "local-amd",
                             Machine == "intel" ~ "local-intel",
                             TRUE ~ Machine),
         InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                              InputSet == "yeast" ~ "B-yeast",
                              InputSet == "chm13" ~ "D-HPRC",
                              InputSet == "grch38" ~ "C-HPRC",
                              InputSet == "grch38_random" ~ "C-HPRC-ran")) %>%
  mutate(Setting = case_when(Execution == "Tunned" ~ "Tuned",
                             TRUE ~ Execution)) %>%
 print() -> df.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 30 Ã— 11
   InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine   Execution Setting 
   <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>     <chr>     <chr>   
 1 A-human      512     128 omp                0       256 full      1.64 local-amd Original  Original
 2 A-human      512     128 omp                0      2048 full      1.58 local-amd Tunned    Tuned   
 3 D-HPRC       512     128 omp                0       256 full    237.   local-amd Original  Original
 4 D-HPRC      1024     128 omp                0      4096 full    224.   local-amd Tunned    Tuned   
 5 C-HPRC       128     128 omp                0      4096 full     23.4  local-amd Tunned    Tuned   
 6 C-HPRC       512     128 omp                0       256 full     23.8  local-amd Original  Original
 7 B-yeast      128     128 omp                0       512 full     42.5  local-amd Tunned    Tuned   
 8 B-yeast      512     128 omp                0       256 full     42.5  local-amd Original  Original
 9 A-human      256      64 omp                0      4096 full      7.80 chi-arm   Tunned    Tuned   
10 A-human      512      64 omp                0       256 full     11.4  chi-arm   Original  Original
# â„¹ 20 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 700 :session *R*
df.7 %>%
  mutate(Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Execution)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_grid(InputSet~Machine, scales="free") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figureTI2eFE.png]]

#+begin_src R :results output :session *R* :exports both
df.7 %>%
  filter(InputSet %in% c("A-human", "D-HPRC"),
         Machine %in% c("local-amd", "local-intel")) %>%
  select(-Execution) %>%
  group_by(InputSet, Machine) %>%
  arrange(Setting) %>%
  mutate(Baseline = first(Makespan),
         Speedup = Baseline/Makespan) %>%
  print() -> df.7.plot
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 12
# Groups:   InputSet, Machine [4]
  InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Machine     Setting  Baseline Speedup
  <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>       <chr>       <dbl>   <dbl>
1 A-human      512     128 omp                0       256 full      1.64 local-amd   Original     1.64   1    
2 D-HPRC       512     128 omp                0       256 full    237.   local-amd   Original   237.     1    
3 A-human      512      96 omp                0       256 full     10.3  local-intel Original    10.3    1    
4 D-HPRC       512      96 omp                0       256 full    675.   local-intel Original   675.     1    
5 A-human      512     128 omp                0      2048 full      1.58 local-amd   Tuned        1.64   1.03 
6 D-HPRC      1024     128 omp                0      4096 full    224.   local-amd   Tuned      237.     1.06 
7 A-human      256      96 omp                0      4096 full      6.96 local-intel Tuned       10.3    1.48 
8 D-HPRC       128      96 omp                0      2048 full    700.   local-intel Tuned      675.     0.964
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 300 :session *R*
p <- df.7.plot %>%
  #filter(Machine %in% c("local-intel", "local-amd")) %>%
  ggplot(aes(x=Machine, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  facet_wrap(~InputSet, ncol=3, scales="free") +
  ylab("Makespan (sec)") +
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'Tuned'),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Speedup, 2), "x")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 0.5,
    
    # Set the font size for readability.
    size = 4
  ) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figurem4mrjE.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/full-size-tuning.pdf :exports both :width 7 :height 3 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/full-size-tuning.pdf]]


#+begin_src R :results output :session *R* :exports both
improvement_df <- df.7 %>%
  select(Machine, InputSet, Threads, Execution, Makespan) %>%
  pivot_wider(
    names_from = Execution,
    values_from = Makespan
  ) %>%
  filter(!is.na(Original) & !is.na(Tunned)) %>%
  mutate(
    # NOTE: Using the formula for *improvement* over original
    Improvement_Percent = ((Original - Tunned) / Original) * 100
  ) %>%
  # Select only the key columns and the result for joining
  select(Machine, InputSet, Threads, Improvement_Percent) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 13 Ã— 4
   Machine     InputSet Threads Improvement_Percent
   <chr>       <chr>      <dbl>               <dbl>
 1 amd         1000GP       128               3.14 
 2 amd         chm13        128               5.24 
 3 amd         grch38       128               1.57 
 4 amd         yeast        128               0.120
 5 chi-arm     1000GP        64              31.8  
 6 chi-arm     yeast         64               2.15 
 7 chi-intel   1000GP       160              65.8  
 8 chi-intel   grch38       160              12.7  
 9 chi-intel   yeast        160               1.41 
10 local-intel 1000GP        96              32.2  
11 local-intel chm13         96              -3.71 
12 local-intel grch38        96              -3.94 
13 local-intel yeast         96               2.69
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7 %>%
  left_join(improvement_df, by=c("InputSet", "Threads", "Machine")) %>%
  #select(-Original, -Tunned) %>%
  #write_csv("./iiswc25/best_results_tuning_intel.csv") %>%
  mutate(Improvement_Percent = case_when(Execution == "Original" ~ 0,
                                         Execution == "Tunned" ~ Improvement_Percent)) %>%
  select(InputSet, Machine, Batches, Scheduler, CacheSize, Makespan, Execution, Improvement_Percent) %>%
  arrange(InputSet, Machine) %>%
  print(n=22) -> df.7.percent
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 26 Ã— 8
   InputSet Machine     Batches Scheduler CacheSize Makespan Execution Improvement_Percent
   <chr>    <chr>         <dbl> <chr>         <dbl>    <dbl> <chr>                   <dbl>
 1 1000GP   amd             512 omp             256     1.64 Original                0    
 2 1000GP   amd             512 omp            2048     1.58 Tunned                  3.14 
 3 1000GP   chi-arm         256 omp            4096     7.80 Tunned                 31.8  
 4 1000GP   chi-arm         512 omp             256    11.4  Original                0    
 5 1000GP   chi-intel       128 omp            2048     2.44 Tunned                 65.8  
 6 1000GP   chi-intel       512 omp             256     7.14 Original                0    
 7 1000GP   local-intel     256 omp            4096     6.96 Tunned                 32.2  
 8 1000GP   local-intel     512 omp             256    10.3  Original                0    
 9 chm13    amd             512 omp             256   237.   Original                0    
10 chm13    amd            1024 omp            4096   224.   Tunned                  5.24 
11 chm13    local-intel     128 omp            2048   700.   Tunned                 -3.71 
12 chm13    local-intel     512 omp             256   675.   Original                0    
13 grch38   amd             128 omp            4096    23.4  Tunned                  1.57 
14 grch38   amd             512 omp             256    23.8  Original                0    
15 grch38   chi-intel       128 omp            4096    39.3  Tunned                 12.7  
16 grch38   chi-intel       512 omp             256    45.0  Original                0    
17 grch38   local-intel     256 omp            4096    70.6  Tunned                 -3.94 
18 grch38   local-intel     512 omp             256    67.9  Original                0    
19 yeast    amd             128 omp             512    42.5  Tunned                  0.120
20 yeast    amd             512 omp             256    42.5  Original                0    
21 yeast    chi-arm         256 ws             1024   135.   Tunned                  2.15 
22 yeast    chi-arm         512 omp             256   138.   Original                0    
# â„¹ 4 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


Line plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 600 :session *R*
df.5 %>%
  #filter(Scheduler == "omp") %>%
  ggplot(aes(x=Threads, y=Speedup, color=InputSet)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5$Threads) +
  facet_grid(Scheduler~Machine, scales="free_x") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

#+RESULTS:
[[file:/tmp/babel-6kpow7/figurej7GlUh.png]]

#+begin_src R :results output :session *R* :exports both
df.5 %>%
  filter(InputSet == "chm13") %>%
  arrange(AvgMakespan)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 36 Ã— 8
   Machine Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
   <chr>     <dbl> <chr>         <dbl> <chr>          <dbl>    <dbl>   <dbl>
 1 amd         128 omp             256 chm13           229.   20355.    88.7
 2 amd         128 ws              256 chm13           248.   20453.    82.5
 3 amd          96 omp             256 chm13           273.   20355.    74.6
 4 amd          96 ws              256 chm13           298.   20453.    68.6
 5 amd          72 ws              256 chm13           322.   20453.    63.5
 6 amd          72 omp             256 chm13           324.   20355.    62.9
 7 amd          64 ws              256 chm13           347.   20453.    59.0
 8 amd          64 omp             256 chm13           356.   20355.    57.1
 9 amd          32 omp             256 chm13           654.   20355.    31.1
10 amd          32 ws              256 chm13           681.   20453.    30.0
# â„¹ 26 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

** Best tuning analysis
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
  read_csv(file,
           progress=FALSE,
           col_names=TRUE,
           col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="best",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 1
:   SOURCE                                                                     
:   <chr>                                                                      
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/best_results_tuning_amd.csv      
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/best_results_tuning_chi-arm.csv  
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/best_results_tuning_chi-intel.csv
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/best_results_tuning_intel.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "EXP"), sep="/") %>%
    separate(EXP, c("XX5", "XX6", "XX7", "Machine"), sep="_") %>%
    mutate(Machine = str_replace_all(Machine, "(.csv)", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(Machine = case_when(Machine == "amd" ~ "local-amd",
                               Machine == "intel" ~ "local-intel",
                               TRUE ~ Machine),
           InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                                InputSet == "yeast" ~ "B-yeast",
                                InputSet == "chm13" ~ "D-HPRC",
                                InputSet == "grch38" ~ "C-HPRC")) %>%
    print(n=45) -> df.7.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 58 Ã— 11
   Machine     InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>       <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>      <dbl>
 1 local-amd   A-human      512      64 omp                0       256 tuning    0.300 original   14.0 
 2 local-amd   A-human      512     128 omp                0       256 tuning    0.222 original   12.8 
 3 local-amd   D-HPRC       512      64 omp                0       256 tuning   35.8   original    5.62
 4 local-amd   D-HPRC       512     128 omp                0       256 tuning   24.0   original    6.19
 5 local-amd   C-HPRC       512      64 omp                0       256 tuning    3.96  original   11.7 
 6 local-amd   C-HPRC       512     128 omp                0       256 tuning    2.92  original   13.5 
 7 local-amd   B-yeast      512      64 omp                0       256 tuning    5.08  original    1.26
 8 local-amd   B-yeast      512     128 omp                0       256 tuning    4.24  original    1.47
 9 local-amd   A-human      256      64 omp                0       512 tuning    0.258 tuned      14.0 
10 local-amd   A-human      512     128 omp                0      2048 tuning    0.193 tuned      12.8 
11 local-amd   D-HPRC      1024      64 omp                0      2048 tuning   33.8   tuned       5.62
12 local-amd   D-HPRC      1024     128 omp                0      4096 tuning   22.5   tuned       6.19
13 local-amd   C-HPRC       128      64 omp                0      4096 tuning    3.50  tuned      11.7 
14 local-amd   C-HPRC       128     128 omp                0      4096 tuning    2.53  tuned      13.5 
15 local-amd   B-yeast      128      64 omp                0      2048 tuning    5.02  tuned       1.26
16 local-amd   B-yeast      128     128 omp                0       512 tuning    4.18  tuned       1.47
17 chi-arm     A-human      512      64 omp                0       256 tuning    3.29  original   69.9 
18 chi-arm     D-HPRC       512      64 omp                0       256 tuning   99.8   original    6.12
19 chi-arm     C-HPRC       512      64 omp                0       256 tuning   10.9   original   13.9 
20 chi-arm     B-yeast      512      64 omp                0       256 tuning   13.5   original    1.99
21 chi-arm     A-human      256      64 omp                0      4096 tuning    0.990 tuned      69.9 
22 chi-arm     D-HPRC      1024      64 ws                 0      2048 tuning   93.7   tuned       6.12
23 chi-arm     C-HPRC       512      64 ws                 0       256 tuning    9.37  tuned      13.9 
24 chi-arm     B-yeast      256      64 ws                 0      1024 tuning   13.3   tuned       1.99
25 chi-intel   A-human      512      80 omp                0       256 tuning    0.532 original   24.1 
26 chi-intel   A-human      512     160 omp                0       256 tuning    0.354 original   23.3 
27 chi-intel   D-HPRC       512      80 omp                0       256 tuning   66.3   original   32.9 
28 chi-intel   D-HPRC       512     160 omp                0       256 tuning   66.5   original   41.0 
29 chi-intel   C-HPRC       512      80 omp                0       256 tuning    4.90  original    3.58
30 chi-intel   C-HPRC       512     160 omp                0       256 tuning    5.12  original   18.1 
31 chi-intel   B-yeast      512      80 omp                0       256 tuning    9.27  original   31.9 
32 chi-intel   B-yeast      512     160 omp                0       256 tuning    9.71  original   36.6 
33 chi-intel   A-human      128     160 omp                0      2048 tuning    0.271 tuned      23.3 
34 chi-intel   A-human     1024      80 omp                0       256 tuning    0.404 tuned      24.1 
35 chi-intel   D-HPRC       512     160 omp                0      1024 tuning   39.2   tuned      41.0 
36 chi-intel   D-HPRC      1024      80 omp                0      1024 tuning   44.5   tuned      32.9 
37 chi-intel   C-HPRC       128     160 omp                0      4096 tuning    4.19  tuned      18.1 
38 chi-intel   C-HPRC       256      80 omp                0      2048 tuning    4.73  tuned       3.58
39 chi-intel   B-yeast      128      80 ws                 0       512 tuning    6.31  tuned      31.9 
40 chi-intel   B-yeast      128     160 ws                 0      1024 tuning    6.15  tuned      36.6 
41 local-intel A-human      512      48 omp                0       256 tuning    1.08  original   13.6 
42 local-intel A-human      512      96 omp                0       256 tuning    1.47  original   57.6 
43 local-intel D-HPRC       512      48 omp                0       256 tuning   52.0   original    6.05
44 local-intel D-HPRC       512      96 omp                0       256 tuning   40.5   original   14.9 
45 local-intel C-HPRC       512      48 omp                0       256 tuning   10.9   original   18.9 
# â„¹ 13 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.compare %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_grid(InputSet~Machine, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-TluOQF/figure02iQ65.png]]
#+begin_src R :results output :session *R* :exports both
df.7.compare %>%
  filter(Setting == "tuned") %>%
  select(Machine, InputSet, Batches, Threads, Scheduler, CacheSize, Makespan, Percent) %>%
  arrange(Machine, InputSet) %>%
  rename(`% of gain` = Percent) %>%
  print(n=45)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 28 Ã— 8
   Machine     InputSet Batches Threads Scheduler CacheSize Makespan `% of gain`
   <chr>       <chr>      <dbl>   <dbl> <chr>         <dbl>    <dbl>       <dbl>
 1 chi-arm     A-human      256      64 omp            4096    0.990       69.9 
 2 chi-arm     B-yeast      256      64 ws             1024   13.3          1.99
 3 chi-arm     C-HPRC       512      64 ws              256    9.37        13.9 
 4 chi-arm     D-HPRC      1024      64 ws             2048   93.7          6.12
 5 chi-intel   A-human      128     160 omp            2048    0.271       23.3 
 6 chi-intel   A-human     1024      80 omp             256    0.404       24.1 
 7 chi-intel   B-yeast      128      80 ws              512    6.31        31.9 
 8 chi-intel   B-yeast      128     160 ws             1024    6.15        36.6 
 9 chi-intel   C-HPRC       128     160 omp            4096    4.19        18.1 
10 chi-intel   C-HPRC       256      80 omp            2048    4.73         3.58
11 chi-intel   D-HPRC       512     160 omp            1024   39.2         41.0 
12 chi-intel   D-HPRC      1024      80 omp            1024   44.5         32.9 
13 local-amd   A-human      256      64 omp             512    0.258       14.0 
14 local-amd   A-human      512     128 omp            2048    0.193       12.8 
15 local-amd   B-yeast      128      64 omp            2048    5.02         1.26
16 local-amd   B-yeast      128     128 omp             512    4.18         1.47
17 local-amd   C-HPRC       128      64 omp            4096    3.50        11.7 
18 local-amd   C-HPRC       128     128 omp            4096    2.53        13.5 
19 local-amd   D-HPRC      1024      64 omp            2048   33.8          5.62
20 local-amd   D-HPRC      1024     128 omp            4096   22.5          6.19
21 local-intel A-human      256      96 omp            4096    0.623       57.6 
22 local-intel A-human      512      48 omp            1024    0.936       13.6 
23 local-intel B-yeast      128      48 omp            4096    5.91        17.7 
24 local-intel B-yeast      128      96 ws              512    5.49         6.03
25 local-intel C-HPRC       256      96 omp            4096    8.04        22.5 
26 local-intel C-HPRC      1024      48 omp             128    8.86        18.9 
27 local-intel D-HPRC       128      96 omp            2048   34.5         14.9 
28 local-intel D-HPRC      2048      48 omp            4096   48.8          6.05
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.compare %>%
  group_by(Machine, InputSet) %>%
  filter(Threads == max(Threads)) %>%
  arrange(Setting) %>%
  mutate(Baseline = first(Makespan),
         Speedup = Baseline/Makespan) %>%
  ungroup() %>%
  #group_by(InputSet) %>%
  mutate(GeoMean = exp(mean(log(Speedup)))) %>%
  print(n=24) -> df.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 34 Ã— 14
   Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Setting Percent Baseline Speedup GeoMean
   <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
 1 local-amd A-human      512     128 omp                0       256 tuniâ€¦    0.222 originâ€¦   12.8     0.222    1       1.16
 2 local-amd D-HPRC       512     128 omp                0       256 tuniâ€¦   24.0   originâ€¦    6.19   24.0      1       1.16
 3 local-amd C-HPRC       512     128 omp                0       256 tuniâ€¦    2.92  originâ€¦   13.5     2.92     1       1.16
 4 local-amd B-yeast      512     128 omp                0       256 tuniâ€¦    4.24  originâ€¦    1.47    4.24     1       1.16
 5 chi-arm   A-human      512      64 omp                0       256 tuniâ€¦    3.29  originâ€¦   69.9     3.29     1       1.16
 6 chi-arm   D-HPRC       512      64 omp                0       256 tuniâ€¦   99.8   originâ€¦    6.12   99.8      1       1.16
 7 chi-arm   C-HPRC       512      64 omp                0       256 tuniâ€¦   10.9   originâ€¦   13.9    10.9      1       1.16
 8 chi-arm   B-yeast      512      64 omp                0       256 tuniâ€¦   13.5   originâ€¦    1.99   13.5      1       1.16
 9 chi-intel A-human      512     160 omp                0       256 tuniâ€¦    0.354 originâ€¦   23.3     0.354    1       1.16
10 chi-intel D-HPRC       512     160 omp                0       256 tuniâ€¦   66.5   originâ€¦   41.0    66.5      1       1.16
11 chi-intel C-HPRC       512     160 omp                0       256 tuniâ€¦    5.12  originâ€¦   18.1     5.12     1       1.16
12 chi-intel B-yeast      512     160 omp                0       256 tuniâ€¦    9.71  originâ€¦   36.6     9.71     1       1.16
13 local-inâ€¦ A-human      512      96 omp                0       256 tuniâ€¦    1.47  originâ€¦   57.6     1.47     1       1.16
14 local-inâ€¦ D-HPRC       512      96 omp                0       256 tuniâ€¦   40.5   originâ€¦   14.9    40.5      1       1.16
15 local-inâ€¦ C-HPRC       512      96 omp                0       256 tuniâ€¦   10.4   originâ€¦   22.5    10.4      1       1.16
16 local-inâ€¦ <NA>         512      96 omp                0       256 tuniâ€¦   16.6   originâ€¦   37.0    16.6      1       1.16
17 local-inâ€¦ B-yeast      512      96 omp                0       256 tuniâ€¦    5.84  originâ€¦    6.03    5.84     1       1.16
18 local-amd A-human      512     128 omp                0      2048 tuniâ€¦    0.193 tuned     12.8     0.222    1.15    1.16
19 local-amd D-HPRC      1024     128 omp                0      4096 tuniâ€¦   22.5   tuned      6.19   24.0      1.07    1.16
20 local-amd C-HPRC       128     128 omp                0      4096 tuniâ€¦    2.53  tuned     13.5     2.92     1.16    1.16
21 local-amd B-yeast      128     128 omp                0       512 tuniâ€¦    4.18  tuned      1.47    4.24     1.01    1.16
22 chi-arm   A-human      256      64 omp                0      4096 tuniâ€¦    0.990 tuned     69.9     3.29     3.32    1.16
23 chi-arm   D-HPRC      1024      64 ws                 0      2048 tuniâ€¦   93.7   tuned      6.12   99.8      1.07    1.16
24 chi-arm   C-HPRC       512      64 ws                 0       256 tuniâ€¦    9.37  tuned     13.9    10.9      1.16    1.16
# â„¹ 10 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.speedup %>%
  filter(Setting == "tuned") %>%
  select(Machine, InputSet, Batches, Scheduler, CacheSize)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 5
# Groups:   InputSet [4]
   Machine     InputSet Batches Scheduler CacheSize
   <chr>       <chr>      <dbl> <chr>         <dbl>
 1 local-amd   A-human      512 omp            2048
 2 local-amd   D-HPRC      1024 omp            4096
 3 local-amd   C-HPRC       128 omp            4096
 4 local-amd   B-yeast      128 omp             512
 5 chi-arm     A-human      256 omp            4096
 6 chi-arm     D-HPRC      1024 ws             2048
 7 chi-arm     C-HPRC       512 ws              256
 8 chi-arm     B-yeast      256 ws             1024
 9 chi-intel   A-human      128 omp            2048
10 chi-intel   D-HPRC       512 omp            1024
11 chi-intel   C-HPRC       128 omp            4096
12 chi-intel   B-yeast      128 ws             1024
13 local-intel A-human      256 omp            4096
14 local-intel D-HPRC       128 omp            2048
15 local-intel C-HPRC       256 omp            4096
16 local-intel B-yeast      128 ws              512
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.speedup %>%
  mutate(Label = case_when(Setting == "tuned" ~ paste0(round(Speedup, 2), "x"),
                           Setting == "original" ~ NA_character_)) %>%
  print() -> df.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 34 Ã— 15
   Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Setting Percent Baseline Speedup GeoMean
   <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
 1 local-amd A-human      512     128 omp                0       256 tuniâ€¦    0.222 originâ€¦   12.8     0.222       1    1.16
 2 local-amd D-HPRC       512     128 omp                0       256 tuniâ€¦   24.0   originâ€¦    6.19   24.0         1    1.16
 3 local-amd C-HPRC       512     128 omp                0       256 tuniâ€¦    2.92  originâ€¦   13.5     2.92        1    1.16
 4 local-amd B-yeast      512     128 omp                0       256 tuniâ€¦    4.24  originâ€¦    1.47    4.24        1    1.16
 5 chi-arm   A-human      512      64 omp                0       256 tuniâ€¦    3.29  originâ€¦   69.9     3.29        1    1.16
 6 chi-arm   D-HPRC       512      64 omp                0       256 tuniâ€¦   99.8   originâ€¦    6.12   99.8         1    1.16
 7 chi-arm   C-HPRC       512      64 omp                0       256 tuniâ€¦   10.9   originâ€¦   13.9    10.9         1    1.16
 8 chi-arm   B-yeast      512      64 omp                0       256 tuniâ€¦   13.5   originâ€¦    1.99   13.5         1    1.16
 9 chi-intel A-human      512     160 omp                0       256 tuniâ€¦    0.354 originâ€¦   23.3     0.354       1    1.16
10 chi-intel D-HPRC       512     160 omp                0       256 tuniâ€¦   66.5   originâ€¦   41.0    66.5         1    1.16
# â„¹ 24 more rows
# â„¹ 1 more variable: Label <chr>
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 600 :session *R*
p <- df.7.speedup %>%
  filter(!is.na(InputSet)) %>%
  mutate(Machine = factor(Machine, levels=c("local-intel", "local-amd", "chi-arm", "chi-intel"))) %>%
  ggplot(aes(x=Machine, y=Makespan)) +
  geom_bar(aes(fill=Setting), stat = "identity", width = 0.8, position = "dodge") +
  facet_wrap(~InputSet, ncol=2, scales="free") +
  #coord_cartesian(ylim = c(0, 200)) +
  #ylim(0, 3) +
  ylab("Makespan (sec)") +
    geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    #data = . ,
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = Label),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    #position = position_dodge(width = 1),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 0.5,
    nudge_y = -0,
    # Set the font size for readability.
    size = 4
  ) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-NNXRj9/figure2ly0wY.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/auto-tuning-results.pdf :exports both :width 7 :height 7 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/auto-tuning-results.pdf]]

#+begin_src R :results output :session *R* :exports both
df.7.speedup %>%
  filter(InputSet == "chm13") %>%
  arrange(Makespan) %>%
  print(n=24)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 6 Ã— 14
# Groups:   InputSet [1]
  Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting Percent Baseline Speedup GeoMean
  <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
1 amd       chm13       1024     128 omp                0      4096 tuning     22.5 tuned      6.19     24.0    1.07    1.13
2 amd       chm13        512     128 omp                0       256 tuning     24.0 originâ€¦    6.19     24.0    1       1.13
3 intel     chm13        128      96 omp                0      2048 tuning     34.5 tuned     14.9      40.5    1.17    1.13
4 chi-intel chm13        512     160 omp                0      1024 tuning     39.2 tuned     41.0      66.5    1.70    1.13
5 intel     chm13        512      96 omp                0       256 tuning     40.5 originâ€¦   14.9      40.5    1       1.13
6 chi-intel chm13        512     160 omp                0       256 tuning     66.5 originâ€¦   41.0      66.5    1       1.13
#+end_example

** Trying best tuning on full Giraffe
#+begin_src shell :results output :exports both
#!/bin/bash
EXP=iiswc25-7-tuned

cd /lscratch/jessicadagostini

echo "Running $EXP"
/soe/jessicadagostini/vg-proxy/bin/vg-times-4096 giraffe \
    -Z 1000GP/1000GPlons_hs38d1_filter.giraffe.gbz \
    -m 1000GP/1000GPlons_hs38d1_filter.min \
    -d 1000GP/1000GPlons_hs38d1_filter.dist \
    -f 1000GP/novaseq6000-ERR3239454-shuffled-1m.fq.gz \
    -B 256 -b default -t $1 -p --track-correctness > test.gamcd 2>tmp-$EXP.csv

cat tmp-$EXP.csv | grep "total_" > $EXP.csv
gzip tmp-$EXP.csv
gzip $EXP.csv
cp $EXP.csv.gz /soe/jessicadagostini/miniGiraffe/iiswc25/.
rm test.gamcd
rm $EXP.csv.gz
#+end_src

I have results, they are on intelxeonplatinum8260cpu@240ghz/7

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Start = X2, End = X3, Thread = X4)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="giraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 6 Ã— 1
:   SOURCE                                                                                               
:   <chr>                                                                                                
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_1_original_giraffe.csv
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_1_tuned_giraffe.csv   
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_2_original_giraffe.csv
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_2_tuned_giraffe.csv   
: 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_3_original_giraffe.csv
: 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7/96_3_tuned_giraffe.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Threads", "Repetition", "Setting", "XX8"), sep="_") %>%
    #mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    #mutate(Batches = as.integer(Batches),
    #       Threads = as.integer(Threads),
    #       Repetition = as.integer(Repetition),
    #       CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 74,234,208 Ã— 7
   Threads Repetition Setting  Query               Start       End Thread
   <chr>   <chr>      <chr>    <chr>               <dbl>     <dbl>  <dbl>
 1 96      1          original total_extension 13676527. 13676527.     36
 2 96      1          original total_extension 13676527. 13676527.     36
 3 96      1          original total_extension 13676527. 13676527.     36
 4 96      1          original total_extension 13676527. 13676527.     73
 5 96      1          original total_extension 13676527. 13676527.     36
 6 96      1          original total_extension 13676527. 13676527.     73
 7 96      1          original total_extension 13676527. 13676527.     36
 8 96      1          original total_extension 13676527. 13676527.     36
 9 96      1          original total_extension 13676527. 13676527.     73
10 96      1          original total_extension 13676527. 13676527.     73
# â„¹ 74,234,198 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7 %>%
  mutate(Duration = End - Start) %>%
  group_by(Repetition, Setting, Thread, Query) %>%
  summarize(Runtime = sum(Duration)) %>%
  print() -> df.7.runtime
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Repetition', 'Setting', 'Thread'. You can override using the `.groups` argument.
# A tibble: 582 Ã— 5
# Groups:   Repetition, Setting, Thread [576]
   Repetition Setting  Thread Query           Runtime
   <chr>      <chr>     <dbl> <chr>             <dbl>
 1 1          original      0 total_extension    4.20
 2 1          original      0 total_main       132.  
 3 1          original      1 total_extension    3.83
 4 1          original      2 total_extension    4.28
 5 1          original      3 total_extension    4.13
 6 1          original      4 total_extension    3.84
 7 1          original      5 total_extension    4.13
 8 1          original      6 total_extension    4.14
 9 1          original      7 total_extension    3.96
10 1          original      8 total_extension    4.25
# â„¹ 572 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.runtime %>%
  filter(Query == "total_extension") %>%
  group_by(Repetition, Setting) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Setting) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.7.makespan
#+end_src

#+RESULTS:
: `summarise()` has grouped output by 'Repetition'. You can override using the `.groups` argument.
: # A tibble: 2 Ã— 3
:   Setting  AvgMakespan MedianMakespan
:   <chr>          <dbl>          <dbl>
: 1 original        4.53           4.53
: 2 tuned           4.91           4.89

Bar plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.6.5.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=AvgMakespan, fill=CacheSize)) +
  geom_bar(stat="identity", width=.8, position = "dodge") +
  facet_wrap(~Scheduler) +
  theme_bw() 
#+end_src

For caching speedup
#+begin_src R :results output :session *R* :exports both
df.6.5.makespan %>%
  ungroup() %>%
  #filter(CacheSize != 0) %>%
  group_by(Threads, Scheduler) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(Threads, Scheduler, CacheSize, Speedup) %>%
  print() -> df.6.5.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 48 Ã— 4
# Groups:   Threads, Scheduler [16]
   Threads Scheduler CacheSize Speedup
     <int> <chr>         <int>   <dbl>
 1       1 omp               0    1   
 2       1 omp             256    1.10
 3       1 omp            2048    1.08
 4       1 ws                0    1   
 5       1 ws              256    1.12
 6       1 ws             2048    1.12
 7       2 omp               0    1   
 8       2 omp             256    1.10
 9       2 omp            2048    1.09
10       2 ws                0    1   
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Line plot
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.5.2.speedup %>%
  ggplot(aes(x=Threads, y=Speedup, color=Scheduler)) +
  geom_line() +
  geom_point() +
  scale_x_continuous("Threads", breaks=df.5.2.speedup$Threads) +
  facet_wrap(~InputSet) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
#+end_src

** Understanding how many nodes I access per thread
Joseph's idea to check if the number of nodes being accessed by each
thread is different
Script to test will be on pipeline-7-1.py
#+begin_src R :results output :session *R* :exports both
#!/usr/bin/env Rscript
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

args = commandArgs(trailingOnly=TRUE)
file = args[1]
new_file = args[2]

df <- read_csv(file,
               skip=3,
               skip_footer = 3,
               progress=FALSE,
               col_names=TRUE,
               col_types=cols()) %>%
  rename(Sequence = X1, Node = X2, Thread = X3)

df %>%
  group_by(Thread) %>%
  summarize(Total = n()) %>%
  write_csv(new_file)
#+end_src

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
  read_csv(file,
           skip = 3,
           progress=FALSE,
           col_names=FALSE,
           col_types=cols()) %>%
    rename(Sequence = X1, Node = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7-1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="parsed",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 3 Ã— 1
:   SOURCE                                                                                                                    
:   <chr>                                                                                                                     
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7-1/256_48_omp_0_nodes_per_thread_4096_parsed.câ€¦
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7-1/256_72_omp_0_nodes_per_thread_4096_parsed.câ€¦
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/7-1/256_96_omp_0_nodes_per_thread_4096_parsed.câ€¦

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batch", "Threads", "Scheduler", "XX8", "XX9", "XX10", "XX11", "Cache", "XX12"), sep="_") %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    print() -> df.7.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 129,040,899 Ã— 7
   Batch Threads Scheduler Cache Sequence                                                                        Node Thread
   <chr> <chr>   <chr>     <chr> <chr>                                                                          <dbl>  <dbl>
 1 256   48      omp       4096  CCTCTGACCTTGAGGTCACCCTTTGGCCAATGACCTTCCATTGCTAAAGGAAATCAGGAAGCTCATAGGTTACGGTâ€¦ 2.12e8      0
 2 256   48      omp       4096  CCTCTGACCTTGAGGTCACCCTTTGGCCAATGACCTTCCATTGCTAAAGGAAATCAGGAAGCTCATAGGTTACGGTâ€¦ 2.12e8      0
 3 256   48      omp       4096  CCTCTGACCTTGAGGTCACCCTTTGGCCAATGACCTTCCATTGCTAAAGGAAATCAGGAAGCTCATAGGTTACGGTâ€¦ 2.12e8      0
 4 256   48      omp       4096  TTTGTTACACAGGTATACATGTGCCATGATGGTTTGCTGCACCCATCAACCCGTCATCTAGGTTTTAAGCCCTGCAâ€¦ 5.78e8     31
 5 256   48      omp       4096  TTTGTTACACAGGTATACATGTGCCATGATGGTTTGCTGCACCCATCAACCCGTCATCTAGGTTTTAAGCCCTGCAâ€¦ 5.78e8     31
 6 256   48      omp       4096  TACATATTACATATAAAGCATATTCCATAACATATAGTATATATCATATATAATTTTTTTTCAGACAGAGTCTTGTâ€¦ 5.86e8     37
 7 256   48      omp       4096  TACATATTACATATAAAGCATATTCCATAACATATAGTATATATCATATATAATTTTTTTTCAGACAGAGTCTTGTâ€¦ 5.86e8     37
 8 256   48      omp       4096  CTCAAGCAAGTCAACATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGTTGGGTGTGGCAAGAATTâ€¦ 4.82e8     21
 9 256   48      omp       4096  CTCAAGCAAGTCAACATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGTTGGGTGTGGCAAGAATTâ€¦ 4.82e8     21
10 256   48      omp       4096  CTCAAGCAAGTCAACATTAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAGTTGGGTGTGGCAAGAATTâ€¦ 4.23e8     27
# â„¹ 129,040,889 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.1 %>%
  group_by(Threads, Thread) %>%
  summarize(Total = n()) %>%
  print() -> df.7.1.total
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads'. You can override using the `.groups` argument.
# A tibble: 216 Ã— 3
# Groups:   Threads [3]
   Threads Thread  Total
   <chr>    <dbl>  <int>
 1 48           0 907781
 2 48           1 907143
 3 48           2 879303
 4 48           3 909030
 5 48           4 887059
 6 48           5 900965
 7 48           6 884993
 8 48           7 893584
 9 48           8 899946
10 48           9 899441
# â„¹ 206 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1000 :height 400 :session *R*
df.7.1.total %>%
  ggplot(aes(x=Thread, y=Total)) +
  geom_col(show.legend = FALSE) +
  facet_wrap(~Threads, scales="free_x") +
  theme_bw()
#+end_src

#+RESULTS:
[[file:/tmp/babel-6kpow7/figureUxkXsY.png]]

** ANOVA over samples
I am applying ANOVA to understand the impact of each parameter over
each execution.

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  mutate(Machine = "local-intel") %>%
  filter(Threads == 96) %>%
  print() -> df.li
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 280 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [270]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine    
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      
 1 1000GP       128      96 omp                0       128 tuning    1.37  local-intel
 2 1000GP       128      96 omp                0       256 tuning    1.33  local-intel
 3 1000GP       128      96 omp                0       512 tuning    1.14  local-intel
 4 1000GP       128      96 omp                0      1024 tuning    0.940 local-intel
 5 1000GP       128      96 omp                0      2048 tuning    0.888 local-intel
 6 1000GP       128      96 omp                0      4096 tuning    0.785 local-intel
 7 1000GP       128      96 ws                 0       128 tuning    2.23  local-intel
 8 1000GP       128      96 ws                 0       256 tuning    1.69  local-intel
 9 1000GP       128      96 ws                 0       512 tuning    1.44  local-intel
10 1000GP       128      96 ws                 0      1024 tuning    1.19  local-intel
# â„¹ 270 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.2.makespan %>%
  mutate(Machine = "local-amd") %>%
  filter(Threads == 128) %>%
  print() -> df.la
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 208 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [200]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine  
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>    
 1 1000GP       128     128 omp                0       256 tuning    0.208 local-amd
 2 1000GP       128     128 omp                0       512 tuning    0.207 local-amd
 3 1000GP       128     128 omp                0      1024 tuning    0.201 local-amd
 4 1000GP       128     128 omp                0      2048 tuning    0.199 local-amd
 5 1000GP       128     128 omp                0      4096 tuning    0.207 local-amd
 6 1000GP       128     128 ws                 0       256 tuning    0.259 local-amd
 7 1000GP       128     128 ws                 0       512 tuning    0.260 local-amd
 8 1000GP       128     128 ws                 0      1024 tuning    0.258 local-amd
 9 1000GP       128     128 ws                 0      2048 tuning    0.253 local-amd
10 1000GP       128     128 ws                 0      4096 tuning    0.253 local-amd
# â„¹ 198 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.3.makespan %>%
  mutate(Machine = "chi-intel") %>%
  filter(Threads == 160) %>%
  print() -> df.ci
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 206 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [200]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine  
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>    
 1 1000GP       128     160 omp                0       256 tuning    0.305 chi-intel
 2 1000GP       128     160 omp                0       512 tuning    0.323 chi-intel
 3 1000GP       128     160 omp                0      1024 tuning    0.295 chi-intel
 4 1000GP       128     160 omp                0      2048 full      2.44  chi-intel
 5 1000GP       128     160 omp                0      2048 tuning    0.271 chi-intel
 6 1000GP       128     160 omp                0      4096 tuning    0.301 chi-intel
 7 1000GP       128     160 ws                 0       256 tuning    0.424 chi-intel
 8 1000GP       128     160 ws                 0       512 tuning    0.423 chi-intel
 9 1000GP       128     160 ws                 0      1024 tuning    0.431 chi-intel
10 1000GP       128     160 ws                 0      2048 tuning    0.381 chi-intel
# â„¹ 196 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.4.makespan %>%
  mutate(Machine = "chi-arm") %>%
  print() -> df.ca
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 206 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [200]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>  
 1 1000GP       128      64 omp                0       256 tuning     3.29 chi-arm
 2 1000GP       128      64 omp                0       512 tuning     2.49 chi-arm
 3 1000GP       128      64 omp                0      1024 tuning     1.63 chi-arm
 4 1000GP       128      64 omp                0      2048 tuning     1.03 chi-arm
 5 1000GP       128      64 omp                0      4096 tuning     1.16 chi-arm
 6 1000GP       128      64 ws                 0       256 tuning     2.59 chi-arm
 7 1000GP       128      64 ws                 0       512 tuning     2.81 chi-arm
 8 1000GP       128      64 ws                 0      1024 tuning     2.00 chi-arm
 9 1000GP       128      64 ws                 0      2048 tuning     1.42 chi-arm
10 1000GP       128      64 ws                 0      4096 tuning     1.40 chi-arm
# â„¹ 196 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.li %>%
  bind_rows(df.la, df.ci, df.ca) %>%
  print() -> df.all
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 900 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [870]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine    
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      
 1 1000GP       128      96 omp                0       128 tuning    1.37  local-intel
 2 1000GP       128      96 omp                0       256 tuning    1.33  local-intel
 3 1000GP       128      96 omp                0       512 tuning    1.14  local-intel
 4 1000GP       128      96 omp                0      1024 tuning    0.940 local-intel
 5 1000GP       128      96 omp                0      2048 tuning    0.888 local-intel
 6 1000GP       128      96 omp                0      4096 tuning    0.785 local-intel
 7 1000GP       128      96 ws                 0       128 tuning    2.23  local-intel
 8 1000GP       128      96 ws                 0       256 tuning    1.69  local-intel
 9 1000GP       128      96 ws                 0       512 tuning    1.44  local-intel
10 1000GP       128      96 ws                 0      1024 tuning    1.19  local-intel
# â„¹ 890 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.all %>%
  ungroup() %>%
  filter(Test == "tuning") %>%
  group_by(Machine, InputSet)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 870 Ã— 9
# Groups:   Machine, InputSet [17]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine    
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      
 1 1000GP       128      96 omp                0       128 tuning    1.37  local-intel
 2 1000GP       128      96 omp                0       256 tuning    1.33  local-intel
 3 1000GP       128      96 omp                0       512 tuning    1.14  local-intel
 4 1000GP       128      96 omp                0      1024 tuning    0.940 local-intel
 5 1000GP       128      96 omp                0      2048 tuning    0.888 local-intel
 6 1000GP       128      96 omp                0      4096 tuning    0.785 local-intel
 7 1000GP       128      96 ws                 0       128 tuning    2.23  local-intel
 8 1000GP       128      96 ws                 0       256 tuning    1.69  local-intel
 9 1000GP       128      96 ws                 0       512 tuning    1.44  local-intel
10 1000GP       128      96 ws                 0      1024 tuning    1.19  local-intel
# â„¹ 860 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
# Step 1: Install and load necessary packages if you haven't already
# install.packages("tidyverse")
# install.packages("broom")

library(broom)

# Ensure your data frame 'df.all' is loaded

# Step 2: Run the grouped ANOVA for each Machine/InputSet combination
# The model `Makespan ~ Batches + Scheduler + CacheSize` tests the effect
# of all three parameters simultaneously.
# We convert Batches and CacheSize to factors to treat them as categorical variables.
anova_results <- df.all %>%
  ungroup() %>%
  filter(Test == "tuning") %>%
  group_by(Machine, InputSet) %>%
  nest() %>%
  mutate(
    # NOTE: It's good practice to ensure categorical numbers are treated as factors
    data = map(data, ~ .x %>% mutate(across(c(Batches, CacheSize), as.factor))),
    
    # Run the ANOVA model on each nested tibble
    anova_model = map(data, ~ aov(Makespan ~ Batches + Scheduler + CacheSize, data = .)),
    
    # Tidy the model output into a clean table
    tidy_anova = map(anova_model, tidy)
  ) %>%
  # Bring the results back into a single flat table
  unnest(tidy_anova) %>%
  #summary(anova_model) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 68 Ã— 10
# Groups:   Machine, InputSet [17]
   InputSet Machine     data              anova_model term         df   sumsq  meansq statistic   p.value
   <chr>    <chr>       <list>            <list>      <chr>     <dbl>   <dbl>   <dbl>     <dbl>     <dbl>
 1 1000GP   local-intel <tibble [60 Ã— 7]> <aov>       Batches       4   0.191  0.0478     0.738  5.71e- 1
 2 1000GP   local-intel <tibble [60 Ã— 7]> <aov>       Scheduler     1   1.05   1.05      16.2    1.94e- 4
 3 1000GP   local-intel <tibble [60 Ã— 7]> <aov>       CacheSize     5   9.99   2.00      30.8    4.89e-14
 4 1000GP   local-intel <tibble [60 Ã— 7]> <aov>       Residuals    49   3.17   0.0648    NA     NA       
 5 chm13    local-intel <tibble [50 Ã— 7]> <aov>       Batches       4  42.9   10.7        3.88   9.40e- 3
 6 chm13    local-intel <tibble [50 Ã— 7]> <aov>       Scheduler     1   5.84   5.84       2.11   1.54e- 1
 7 chm13    local-intel <tibble [50 Ã— 7]> <aov>       CacheSize     4  54.1   13.5        4.90   2.61e- 3
 8 chm13    local-intel <tibble [50 Ã— 7]> <aov>       Residuals    40 111.     2.76      NA     NA       
 9 grch38   local-intel <tibble [60 Ã— 7]> <aov>       Batches       4   1.12   0.279      0.752  5.61e- 1
10 grch38   local-intel <tibble [60 Ã— 7]> <aov>       Scheduler     1   1.87   1.87       5.05   2.91e- 2
# â„¹ 58 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
anova_results %>%
  select(InputSet, Machine, term, df, sumsq, meansq, statistic, p.value)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 68 Ã— 8
# Groups:   Machine, InputSet [17]
   InputSet Machine     term         df   sumsq  meansq statistic   p.value
   <chr>    <chr>       <chr>     <dbl>   <dbl>   <dbl>     <dbl>     <dbl>
 1 1000GP   local-intel Batches       4   0.191  0.0478     0.738  5.71e- 1
 2 1000GP   local-intel Scheduler     1   1.05   1.05      16.2    1.94e- 4
 3 1000GP   local-intel CacheSize     5   9.99   2.00      30.8    4.89e-14
 4 1000GP   local-intel Residuals    49   3.17   0.0648    NA     NA       
 5 chm13    local-intel Batches       4  42.9   10.7        3.88   9.40e- 3
 6 chm13    local-intel Scheduler     1   5.84   5.84       2.11   1.54e- 1
 7 chm13    local-intel CacheSize     4  54.1   13.5        4.90   2.61e- 3
 8 chm13    local-intel Residuals    40 111.     2.76      NA     NA       
 9 grch38   local-intel Batches       4   1.12   0.279      0.752  5.61e- 1
10 grch38   local-intel Scheduler     1   1.87   1.87       5.05   2.91e- 2
# â„¹ 58 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
# Step 3: From the results, find the parameter with the largest effect for each group
# We filter out the 'Residuals' and find the term with the highest Sum of Squares (sumsq)
most_influential_factors <- anova_results %>%
  filter(term != "Residuals" & p.value < 0.05) %>%
  group_by(Machine, InputSet) %>%
  slice_max(order_by = sumsq, n = 3) %>%
  ungroup() %>% # Ungroup for a clean final output
  select(InputSet, Machine, term, df, sumsq, meansq, statistic, p.value) %>%
  print(n=34)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 30 Ã— 8
   InputSet      Machine     term         df     sumsq    meansq statistic  p.value
   <chr>         <chr>       <chr>     <dbl>     <dbl>     <dbl>     <dbl>    <dbl>
 1 1000GP        chi-arm     CacheSize     4  28.7       7.17       183.   3.69e-25
 2 1000GP        chi-arm     Scheduler     1   0.384     0.384        9.81 3.24e- 3
 3 chm13         chi-arm     CacheSize     4  89.2      22.3         27.7  4.78e-11
 4 chm13         chi-arm     Scheduler     1  16.3      16.3         20.2  5.80e- 5
 5 grch38        chi-arm     CacheSize     4  13.3       3.32         5.53 1.22e- 3
 6 yeast         chi-arm     Batches       4   1.20      0.300       13.6  4.29e- 7
 7 yeast         chi-arm     Scheduler     1   0.603     0.603       27.4  5.59e- 6
 8 yeast         chi-arm     CacheSize     4   0.485     0.121        5.51 1.24e- 3
 9 1000GP        chi-intel   Scheduler     1   0.123     0.123      275.   1.56e-19
10 1000GP        chi-intel   Batches       4   0.00874   0.00218      4.89 2.64e- 3
11 1000GP        chi-intel   CacheSize     4   0.00506   0.00127      2.83 3.70e- 2
12 chm13         chi-intel   CacheSize     4 725.      181.           2.66 4.66e- 2
13 grch38        chi-intel   CacheSize     4   2.86      0.716        4.59 3.81e- 3
14 grch38        chi-intel   Scheduler     1   1.02      1.02         6.53 1.45e- 2
15 yeast         chi-intel   Batches       4  20.1       5.03         2.78 3.94e- 2
16 1000GP        local-amd   Scheduler     1   0.0367    0.0367     147.   5.53e-15
17 1000GP        local-amd   Batches       4   0.00753   0.00188      7.55 1.25e- 4
18 chm13         local-amd   Scheduler     1  86.4      86.4        230.   3.43e-18
19 chm13         local-amd   CacheSize     4   5.53      1.38         3.68 1.21e- 2
20 grch38        local-amd   Scheduler     1   0.168     0.168       21.7  3.48e- 5
21 1000GP        local-intel CacheSize     5   9.99      2.00        30.8  4.89e-14
22 1000GP        local-intel Scheduler     1   1.05      1.05        16.2  1.94e- 4
23 chm13         local-intel CacheSize     4  54.1      13.5          4.90 2.61e- 3
24 chm13         local-intel Batches       4  42.9      10.7          3.88 9.40e- 3
25 grch38        local-intel CacheSize     5   9.30      1.86         5.02 8.64e- 4
26 grch38        local-intel Scheduler     1   1.87      1.87         5.05 2.91e- 2
27 grch38_random local-intel CacheSize     4 340.       85.1         18.1  1.42e- 8
28 grch38_random local-intel Scheduler     1  61.6      61.6         13.1  8.09e- 4
29 yeast         local-intel Batches       4   0.821     0.205       10.1  9.24e- 6
30 yeast         local-intel CacheSize     4   0.314     0.0786       3.88 9.36e- 3
#+end_example

#+begin_src R :results output :session *R* :exports both
df.all %>%
  filter(Machine == "chi-intel" & Test == "tuning" & InputSet == "1000GP") %>%
  mutate(Batches = as.factor(Batches),
         Scheduler = as.factor(Scheduler),
         CacheSize = as.factor(CacheSize)) -> df.anova

model <- aov(Makespan ~ Batches + Scheduler + CacheSize, data = df.anova)
summary(model)
#+end_src

#+RESULTS:
:             Df  Sum Sq Mean Sq F value  Pr(>F)    
: Batches      4 0.00874 0.00218   4.888 0.00264 ** 
: Scheduler    1 0.12302 0.12302 275.329 < 2e-16 ***
: CacheSize    4 0.00506 0.00127   2.832 0.03697 *  
: Residuals   40 0.01787 0.00045                    
: ---
: Signif. codes:  0 â€˜***â€™ 0.001 â€˜**â€™ 0.01 â€˜*â€™ 0.05 â€˜.â€™ 0.1 â€˜ â€™ 1

#+begin_src R :results output :session *R* :exports both
most_influential_factors %>%
  group_by(InputSet, Machine) %>%
  mutate(Position = row_number()) %>%
  print() -> df.fac
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 30 Ã— 9
# Groups:   InputSet, Machine [16]
   InputSet Machine   term         df    sumsq   meansq statistic  p.value Position
   <chr>    <chr>     <chr>     <dbl>    <dbl>    <dbl>     <dbl>    <dbl>    <int>
 1 1000GP   chi-arm   CacheSize     4 28.7      7.17       183.   3.69e-25        1
 2 1000GP   chi-arm   Scheduler     1  0.384    0.384        9.81 3.24e- 3        2
 3 chm13    chi-arm   CacheSize     4 89.2     22.3         27.7  4.78e-11        1
 4 chm13    chi-arm   Scheduler     1 16.3     16.3         20.2  5.80e- 5        2
 5 grch38   chi-arm   CacheSize     4 13.3      3.32         5.53 1.22e- 3        1
 6 yeast    chi-arm   Batches       4  1.20     0.300       13.6  4.29e- 7        1
 7 yeast    chi-arm   Scheduler     1  0.603    0.603       27.4  5.59e- 6        2
 8 yeast    chi-arm   CacheSize     4  0.485    0.121        5.51 1.24e- 3        3
 9 1000GP   chi-intel Scheduler     1  0.123    0.123      275.   1.56e-19        1
10 1000GP   chi-intel Batches       4  0.00874  0.00218      4.89 2.64e- 3        2
# â„¹ 20 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.fac %>%
  ungroup() %>%
  group_by(term, Position) %>%
  #mutate(Sum = cumsum(Order)) %>%
  summarize(Total = n()) %>%
  mutate(term = case_when(term == "Batches" ~ "Batch Size",
                          term == "CacheSize" ~ "Init. Cache",
                          term == "Scheduler" ~ term)) %>%
  print() -> df.fac.sum
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'term'. You can override using the `.groups` argument.
# A tibble: 7 Ã— 3
# Groups:   term [3]
  term        Position Total
  <chr>          <int> <int>
1 Batch Size         1     3
2 Batch Size         2     3
3 Init. Cache        1     9
4 Init. Cache        2     2
5 Init. Cache        3     2
6 Scheduler          1     4
7 Scheduler          2     7
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 300 :session *R*
labels <- c(
  `1` = "1st most significant",
  `2` = "2nd most significant"
)

p <- df.fac.sum %>%
  filter(Position < 3) %>%
  ggplot(aes(x = term, y = Total)) +
  geom_col() +
  facet_wrap(~Position, labeller = labeller(Position = labels)) +
  labs(x="Parameter", y="# of occurrences") +
  ylim(0,10) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 0, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15))

p
#+end_src

#+RESULTS:
[[file:/tmp/babel-ahpp3K/figureWGVHjl.png]]
#+begin_src R :results graphics file :file ./iiswc25/img/anova.pdf :exports both :width 8 :height 3 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/anova.pdf]]

#+begin_src R :results output :session *R* :exports both
df.all %>%
  ungroup() %>%
  group_by(Machine, InputSet) %>%
  filter(InputSet != "grch38_random") %>%
  filter(Makespan == min(Makespan)) %>%
  ungroup() %>%
  select(CacheSize) %>%
  group_by(CacheSize) %>%
  summarize(Total = n()) %>%
  print() -> df.cache.hist
#+end_src

#+RESULTS:
: # A tibble: 5 Ã— 2
:   CacheSize Total
:       <int> <int>
: 1       256     1
: 2       512     2
: 3      1024     3
: 4      2048     4
: 5      4096     6

#+begin_src R :results output :session *R* :exports both
100 * 10 / 16
#+end_src

#+RESULTS:
: [1] 62.5

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 400 :height 300 :session *R*
p <- df.cache.hist %>%
  #filter(Position < 3) %>%
  mutate(CacheSize = as.factor(CacheSize)) %>%
  ggplot(aes(x = CacheSize, y = Total)) +
  geom_col() +
  #facet_wrap(~Position, labeller = labeller(Position = labels)) +
  labs(x="Init. Cache Capacity", y="# of occurrences") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 0, hjust = 1, size=15),
        axis.text.x = element_text(angle = 0, hjust = 0.5, size=15))

p
#+end_src

#+RESULTS:
[[file:/tmp/babel-ahpp3K/figureJOb4WG.png]]
#+begin_src R :results graphics file :file ./iiswc25/img/cache-capacity.pdf :exports both :width 8 :height 3 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/cache-capacity.pdf]]



** Doing heat map with one test case
#+begin_src R :results output :session *R* :exports both
df.all %>%
  filter(Machine == "chi-intel" & InputSet == "chm13" & Test == "tuning") %>%
  print() -> df.chm13
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 50 Ã— 9
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [50]
   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine  
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>    
 1 chm13        128     160 omp                0       256 tuning     72.8 chi-intel
 2 chm13        128     160 omp                0       512 tuning     63.8 chi-intel
 3 chm13        128     160 omp                0      1024 tuning     53.0 chi-intel
 4 chm13        128     160 omp                0      2048 tuning     44.7 chi-intel
 5 chm13        128     160 omp                0      4096 tuning     41.5 chi-intel
 6 chm13        128     160 ws                 0       256 tuning     53.5 chi-intel
 7 chm13        128     160 ws                 0       512 tuning     50.5 chi-intel
 8 chm13        128     160 ws                 0      1024 tuning     47.7 chi-intel
 9 chm13        128     160 ws                 0      2048 tuning     61.3 chi-intel
10 chm13        128     160 ws                 0      4096 tuning     44.4 chi-intel
# â„¹ 40 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R*
df.chm13 %>%
  mutate(CacheSize = as.factor(CacheSize),
         Batches = as.factor(Batches)) %>%
  ggplot(aes(x = CacheSize, y = Batches, fill = Makespan)) +
  geom_tile(color = "white", lwd = 1, linetype = 1) + # Creates the tiled heatmap
  scale_fill_gradient(low = "lightblue", high = "darkblue") + # Defines the color scale
  facet_wrap(~ Scheduler, ncol = 2) + # Creates a facet for each scheduler
  labs(
    #title = "Performance Heatmap by Scheduler",
    #subtitle = "Comparing Cache Size and Batch Size",
    x = "Init. CacheGBWT",
    y = "Batch Size",
    fill = "Makespan"
  ) +
  theme_bw(base_size = 14) + # A clean theme for the plot
  theme(
    strip.text = element_text( size = 12), # Style facet titles
    axis.text.x = element_text(angle = 45, hjust = 1), # Angle x-axis labels if needed
    legend.position = "bottom"
  ) -> p
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-EnaHuF/figure3kHTw8.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/heatmap-makespan.pdf :exports both :width 6 :height 4 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/heatmap-makespan.pdf]]


** Full size tuning
Trying to get a better justification over the paper, let's see how the
tuning over full size input sets go
*** Tuning on kaffirlime
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 106 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_omp_0_tuning_1â€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_omp_0_tuning_2â€¦
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_omp_0_tuning_2â€¦
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_omp_0_tuning_4â€¦
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_omp_0_tuning_5â€¦
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_ws_0_tuning_10â€¦
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_ws_0_tuning_20â€¦
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_ws_0_tuning_25â€¦
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_ws_0_tuning_40â€¦
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning_full/1000GP_full/1024_96_ws_0_tuning_51â€¦
# â„¹ 96 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 10,388 Ã— 10
   InputSet    Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>         <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP_full    1024      96 omp                0 tuning      1024 reading-gbz     44.8       0
 2 1000GP_full    1024      96 omp                0 tuning      1024 reading-seeds   17.4       0
 3 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.71      0
 4 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.84      1
 5 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.91      2
 6 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.98      3
 7 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       7.09      4
 8 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.98      5
 9 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.81      6
10 1000GP_full    1024      96 omp                0 tuning      1024 seeds-loop       6.91      7
# â„¹ 10,378 more rows
# â„¹ Use `print(n = ...)` to see more rows
Warning message:
Expected 6 pieces. Additional pieces discarded in 2 rows [63, 95].
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.1 %>%
  filter(Query == "seeds-loop" & Test == "tuning") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  write_csv("iiswc25/tuning_results_full_local-intel.csv") %>%
  print() -> df.7.1.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
wrote 5.27kB in  0s, 111.53MB/s                                                                                                                          wrote 1.00TB in  0s, 4.03PB/s                                                                                                                          # A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet    Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>         <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP_full     128      96 omp                0       256 tuning     8.53
 2 1000GP_full     128      96 omp                0       512 tuning     7.24
 3 1000GP_full     128      96 omp                0      1024 tuning     7.03
 4 1000GP_full     128      96 omp                0      2048 tuning     7.53
 5 1000GP_full     128      96 omp                0      4096 tuning     6.97
 6 1000GP_full     128      96 ws                 0       256 tuning    10.7 
 7 1000GP_full     128      96 ws                 0       512 tuning     9.29
 8 1000GP_full     128      96 ws                 0      1024 tuning     8.71
 9 1000GP_full     128      96 ws                 0      2048 tuning     8.15
10 1000GP_full     128      96 ws                 0      4096 tuning     8.01
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example
*** Tuning on tangerine
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 104 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_omp_0_tuning_1024â€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_omp_0_tuning_2048â€¦
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_omp_0_tuning_256.â€¦
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_omp_0_tuning_4096â€¦
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_omp_0_tuning_512.â€¦
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_ws_0_tuning_1024.â€¦
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_ws_0_tuning_2048.â€¦
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_ws_0_tuning_256.câ€¦
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_ws_0_tuning_4096.â€¦
10 /soe/jessicadagostini/miniGiraffe/iiswc25/amdepyc955464-coreprocessor/tuning_full/1000GP_full/1024_128_ws_0_tuning_512.câ€¦
# â„¹ 94 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.2
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 13,520 Ã— 10
   InputSet    Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>         <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP_full    1024     128 omp                0 tuning      1024 reading-gbz     28.8       0
 2 1000GP_full    1024     128 omp                0 tuning      1024 reading-seeds   13.1       0
 3 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.35      0
 4 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.47      1
 5 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.42      2
 6 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.43      3
 7 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.46      4
 8 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.46      5
 9 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.46      6
10 1000GP_full    1024     128 omp                0 tuning      1024 seeds-loop       1.49      7
# â„¹ 13,510 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.2 %>%
  filter(Query == "seeds-loop" & Test == "tuning") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  write_csv("iiswc25/tuning_results_full_local-amd.csv") %>%
  print() -> df.7.2.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
wrote 5.39kB in  0s, 358.65MB/s                                                                                                                          wrote 1.00TB in  0s, 4.48PB/s                                                                                                                          # A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet    Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>         <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP_full     128     128 omp                0       256 tuning     1.57
 2 1000GP_full     128     128 omp                0       512 tuning     1.54
 3 1000GP_full     128     128 omp                0      1024 tuning     1.51
 4 1000GP_full     128     128 omp                0      2048 tuning     1.51
 5 1000GP_full     128     128 omp                0      4096 tuning     1.55
 6 1000GP_full     128     128 ws                 0       256 tuning     1.77
 7 1000GP_full     128     128 ws                 0       512 tuning     1.72
 8 1000GP_full     128     128 ws                 0      1024 tuning     1.74
 9 1000GP_full     128     128 ws                 0      2048 tuning     1.72
10 1000GP_full     128     128 ws                 0      4096 tuning     1.74
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

*** Tuning on chi-intel
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 104 Ã— 1
   SOURCE                                                                                                                   
   <chr>                                                                                                                    
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_omp_0_tuning_â€¦
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_omp_0_tuning_â€¦
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_omp_0_tuning_â€¦
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_omp_0_tuning_â€¦
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_omp_0_tuning_â€¦
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_ws_0_tuning_1â€¦
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_ws_0_tuning_2â€¦
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_ws_0_tuning_2â€¦
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_ws_0_tuning_4â€¦
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8380cpu@230ghz/tuning_full/1000GP_full/1024_160_ws_0_tuning_5â€¦
# â„¹ 94 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.3
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16,848 Ã— 10
   InputSet    Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>         <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP_full    1024     160 omp                0 tuning      1024 reading-gbz     50.3       0
 2 1000GP_full    1024     160 omp                0 tuning      1024 reading-seeds   19.2       0
 3 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.25      0
 4 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.62      1
 5 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.61      2
 6 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.62      3
 7 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.61      4
 8 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.63      5
 9 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.63      6
10 1000GP_full    1024     160 omp                0 tuning      1024 seeds-loop       2.68      7
# â„¹ 16,838 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.3 %>%
  filter(Query == "seeds-loop" & Test == "tuning") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  write_csv("iiswc25/tuning_results_full_chi-intel.csv") %>%
  print() -> df.7.3.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
wrote 5.36kB in  0s, 381.11MB/s                                                                                                                          wrote 1.00TB in  0s, 4.58PB/s                                                                                                                          # A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet    Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>         <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP_full     128     160 omp                0       256 tuning     7.62
 2 1000GP_full     128     160 omp                0       512 tuning     3.14
 3 1000GP_full     128     160 omp                0      1024 tuning     2.63
 4 1000GP_full     128     160 omp                0      2048 tuning     2.44
 5 1000GP_full     128     160 omp                0      4096 tuning     3.19
 6 1000GP_full     128     160 ws                 0       256 tuning     8.23
 7 1000GP_full     128     160 ws                 0       512 tuning     3.36
 8 1000GP_full     128     160 ws                 0      1024 tuning     2.89
 9 1000GP_full     128     160 ws                 0      2048 tuning     2.96
10 1000GP_full     128     160 ws                 0      4096 tuning     3.13
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

*** Tuning on chi-arm
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 104 Ã— 1
   SOURCE                                                                                                       
   <chr>                                                                                                        
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_omp_0_tuning_1024.csv
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_omp_0_tuning_2048.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_omp_0_tuning_256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_omp_0_tuning_4096.csv
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_omp_0_tuning_512.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_ws_0_tuning_1024.csv 
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_ws_0_tuning_2048.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_ws_0_tuning_256.csv  
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_ws_0_tuning_4096.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/thunderx299xx/tuning_full/1000GP_full/1024_64_ws_0_tuning_512.csv  
# â„¹ 94 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    #mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.7.4
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 6,864 Ã— 10
   InputSet    Batches Threads Scheduler Repetition Test   CacheSize Query         Runtime Thread
   <chr>         <int>   <int> <chr>          <int> <chr>      <int> <chr>           <dbl>  <dbl>
 1 1000GP_full    1024      64 omp                0 tuning      1024 reading-gbz    124.        0
 2 1000GP_full    1024      64 omp                0 tuning      1024 reading-seeds   34.1       0
 3 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       8.07      0
 4 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.93      1
 5 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.59      2
 6 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.95      3
 7 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.86      4
 8 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.61      5
 9 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.69      6
10 1000GP_full    1024      64 omp                0 tuning      1024 seeds-loop       7.71      7
# â„¹ 6,854 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.7.4 %>%
  filter(Query == "seeds-loop" & Test == "tuning") %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) %>%
  write_csv("iiswc25/tuning_results_full_chi-arm.csv") %>%
  print() -> df.7.4.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'InputSet', 'Batches', 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can
override using the `.groups` argument.
wrote 5.23kB in  0s, 405.92MB/s                                                                                                                          wrote 1.00TB in  0s, 4.68PB/s                                                                                                                          # A tibble: 100 Ã— 8
# Groups:   InputSet, Batches, Threads, Scheduler, Repetition, CacheSize [100]
   InputSet    Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>         <int>   <int> <chr>          <int>     <int> <chr>     <dbl>
 1 1000GP_full     128      64 omp                0       256 tuning    10.3 
 2 1000GP_full     128      64 omp                0       512 tuning    10.3 
 3 1000GP_full     128      64 omp                0      1024 tuning     8.46
 4 1000GP_full     128      64 omp                0      2048 tuning     7.85
 5 1000GP_full     128      64 omp                0      4096 tuning     7.95
 6 1000GP_full     128      64 ws                 0       256 tuning    13.0 
 7 1000GP_full     128      64 ws                 0       512 tuning     8.89
 8 1000GP_full     128      64 ws                 0      1024 tuning     7.85
 9 1000GP_full     128      64 ws                 0      2048 tuning     7.89
10 1000GP_full     128      64 ws                 0      4096 tuning     7.98
# â„¹ 90 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

*** Best tuning analysis
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
  read_csv(file,
           progress=FALSE,
           col_names=TRUE,
           col_types=cols())
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="tuning_(.*)full",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df
#+end_src

#+RESULTS:
: # A tibble: 4 Ã— 1
:   SOURCE                                                                       
:   <chr>                                                                        
: 1 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning_results_full_chi-arm.csv    
: 2 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning_results_full_chi-intel.csv  
: 3 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning_results_full_local-amd.csv  
: 4 /soe/jessicadagostini/miniGiraffe/iiswc25/tuning_results_full_local-intel.csv

#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "EXP"), sep="/") %>%
    separate(EXP, c("XX5", "XX6", "XX7", "Machine"), sep="_") %>%
    mutate(Machine = str_replace_all(Machine, "(.csv)", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(InputSet = case_when(InputSet == "1000GP_full" ~ "A-human",
                                InputSet == "yeast" ~ "B-yeast",
                                InputSet == "chm13" ~ "D-HPRC",
                                InputSet == "grch38_full" ~ "C-HPRC")) %>%
    print(n=45) -> df.7.compare
#+end_src

#+begin_example
# A tibble: 400 Ã— 9
   Machine InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan
   <chr>   <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl>
 1 chi-arm A-human      128      64 omp                0       256 tuning    10.3 
 2 chi-arm A-human      128      64 omp                0       512 tuning    10.3 
 3 chi-arm A-human      128      64 omp                0      1024 tuning     8.46
 4 chi-arm A-human      128      64 omp                0      2048 tuning     7.85
 5 chi-arm A-human      128      64 omp                0      4096 tuning     7.95
 6 chi-arm A-human      128      64 ws                 0       256 tuning    13.0 
 7 chi-arm A-human      128      64 ws                 0       512 tuning     8.89
 8 chi-arm A-human      128      64 ws                 0      1024 tuning     7.85
 9 chi-arm A-human      128      64 ws                 0      2048 tuning     7.89
10 chi-arm A-human      128      64 ws                 0      4096 tuning     7.98
11 chi-arm A-human      256      64 omp                0       256 tuning    12.0 
12 chi-arm A-human      256      64 omp                0       512 tuning     9.53
13 chi-arm A-human      256      64 omp                0      1024 tuning     7.68
14 chi-arm A-human      256      64 omp                0      2048 tuning     7.76
15 chi-arm A-human      256      64 omp                0      4096 tuning     8.18
16 chi-arm A-human      256      64 ws                 0       256 tuning    10.7 
17 chi-arm A-human      256      64 ws                 0       512 tuning     8.48
18 chi-arm A-human      256      64 ws                 0      1024 tuning     8.42
19 chi-arm A-human      256      64 ws                 0      2048 tuning     8.01
20 chi-arm A-human      256      64 ws                 0      4096 tuning     7.98
21 chi-arm A-human      512      64 omp                0       256 tuning    12.9 
22 chi-arm A-human      512      64 omp                0       512 tuning     8.34
23 chi-arm A-human      512      64 omp                0      1024 tuning     8.39
24 chi-arm A-human      512      64 omp                0      2048 tuning     7.43
25 chi-arm A-human      512      64 omp                0      4096 tuning     7.94
26 chi-arm A-human      512      64 ws                 0       256 tuning    12.6 
27 chi-arm A-human      512      64 ws                 0       512 tuning     8.68
28 chi-arm A-human      512      64 ws                 0      1024 tuning     8.68
29 chi-arm A-human      512      64 ws                 0      2048 tuning     8.11
30 chi-arm A-human      512      64 ws                 0      4096 tuning     7.98
31 chi-arm A-human     1024      64 omp                0       256 tuning    12.2 
32 chi-arm A-human     1024      64 omp                0       512 tuning    10.1 
33 chi-arm A-human     1024      64 omp                0      1024 tuning     8.21
34 chi-arm A-human     1024      64 omp                0      2048 tuning     8.09
35 chi-arm A-human     1024      64 omp                0      4096 tuning     7.61
36 chi-arm A-human     1024      64 ws                 0       256 tuning    13.1 
37 chi-arm A-human     1024      64 ws                 0       512 tuning    10.3 
38 chi-arm A-human     1024      64 ws                 0      1024 tuning     7.70
39 chi-arm A-human     1024      64 ws                 0      2048 tuning     7.97
40 chi-arm A-human     1024      64 ws                 0      4096 tuning     8.04
41 chi-arm A-human     2048      64 omp                0       256 tuning     8.51
42 chi-arm A-human     2048      64 omp                0       512 tuning    10.2 
43 chi-arm A-human     2048      64 omp                0      1024 tuning     7.47
44 chi-arm A-human     2048      64 omp                0      2048 tuning     8.17
45 chi-arm A-human     2048      64 omp                0      4096 tuning     8.09
# â„¹ 355 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example





#+begin_src R :results output :session *R* :exports both
df.7.compare %>%
  group_by(Machine, InputSet) %>%
  filter(Makespan == min(Makespan)) %>%
  mutate(Setting = "tuned") %>%
  print() -> df.7.4.best
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 10
# Groups:   Machine, InputSet [8]
  Machine     InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting
  <chr>       <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>  
1 chi-arm     A-human      512      64 omp                0      2048 tuning     7.43 tuned  
2 chi-arm     C-HPRC      1024      64 ws                 0      1024 tuning    92.5  tuned  
3 chi-intel   A-human      256     160 omp                0      2048 tuning     2.40 tuned  
4 chi-intel   C-HPRC      1024     160 omp                0      2048 tuning    36.9  tuned  
5 local-amd   A-human      128     128 omp                0      1024 tuning     1.51 tuned  
6 local-amd   C-HPRC       256     128 omp                0      2048 tuning    22.7  tuned  
7 local-intel A-human     2048      96 omp                0      4096 tuning     5.21 tuned  
8 local-intel C-HPRC       128      96 omp                0      2048 tuning    10.4  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.compare %>%
  group_by(Machine, InputSet) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") %>%
  print() -> df.7.4.original
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 10
# Groups:   Machine, InputSet [8]
  Machine     InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
  <chr>       <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>   
1 chi-arm     A-human      512      64 omp                0       256 tuning    12.9  original
2 chi-arm     C-HPRC       512      64 omp                0       256 tuning    98.3  original
3 chi-intel   A-human      512     160 omp                0       256 tuning     6.81 original
4 chi-intel   C-HPRC       512     160 omp                0       256 tuning    45.3  original
5 local-amd   A-human      512     128 omp                0       256 tuning     1.61 original
6 local-amd   C-HPRC       512     128 omp                0       256 tuning    23.3  original
7 local-intel A-human      512      96 omp                0       256 tuning    10.8  original
8 local-intel C-HPRC       512      96 omp                0       256 tuning    16.6  original
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.4.original %>%
  bind_rows(df.7.4.best) %>%
  print() -> df.7.4.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 10
# Groups:   Machine, InputSet [8]
   Machine     InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>       <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>   
 1 chi-arm     A-human      512      64 omp                0       256 tuning    12.9  original
 2 chi-arm     C-HPRC       512      64 omp                0       256 tuning    98.3  original
 3 chi-intel   A-human      512     160 omp                0       256 tuning     6.81 original
 4 chi-intel   C-HPRC       512     160 omp                0       256 tuning    45.3  original
 5 local-amd   A-human      512     128 omp                0       256 tuning     1.61 original
 6 local-amd   C-HPRC       512     128 omp                0       256 tuning    23.3  original
 7 local-intel A-human      512      96 omp                0       256 tuning    10.8  original
 8 local-intel C-HPRC       512      96 omp                0       256 tuning    16.6  original
 9 chi-arm     A-human      512      64 omp                0      2048 tuning     7.43 tuned   
10 chi-arm     C-HPRC      1024      64 ws                 0      1024 tuning    92.5  tuned   
11 chi-intel   A-human      256     160 omp                0      2048 tuning     2.40 tuned   
12 chi-intel   C-HPRC      1024     160 omp                0      2048 tuning    36.9  tuned   
13 local-amd   A-human      128     128 omp                0      1024 tuning     1.51 tuned   
14 local-amd   C-HPRC       256     128 omp                0      2048 tuning    22.7  tuned   
15 local-intel A-human     2048      96 omp                0      4096 tuning     5.21 tuned   
16 local-intel C-HPRC       128      96 omp                0      2048 tuning    10.4  tuned
#+end_example

#+begin_src R :results output :session *R* :exports both
improvement.7.4 <- df.7.4.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

# Print the resulting dataframe to see the output
print(improvement.7.4)
#+end_src

#+RESULTS:
#+begin_example
Adding missing grouping variables: `Machine`
# A tibble: 8 Ã— 6
# Groups:   Machine, InputSet [8]
  Machine     InputSet Threads original tuned Percent
  <chr>       <chr>      <dbl>    <dbl> <dbl>   <dbl>
1 chi-arm     A-human       64    12.9   7.43   42.4 
2 chi-arm     C-HPRC        64    98.3  92.5     5.92
3 chi-intel   A-human      160     6.81  2.40   64.7 
4 chi-intel   C-HPRC       160    45.3  36.9    18.5 
5 local-amd   A-human      128     1.61  1.51    6.40
6 local-amd   C-HPRC       128    23.3  22.7     2.66
7 local-intel A-human       96    10.8   5.21   51.8 
8 local-intel C-HPRC        96    16.6  10.4    37.0
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.4.compare %>%
  left_join(improvement.7.4, by=c("InputSet", "Machine", "Threads")) %>%
  select(-original, -tuned) %>%
  print() -> df.7.4.compare
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 11
# Groups:   Machine, InputSet [8]
   Machine     InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>       <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>      <dbl>
 1 chi-arm     A-human      512      64 omp                0       256 tuning    12.9  original   42.4 
 2 chi-arm     C-HPRC       512      64 omp                0       256 tuning    98.3  original    5.92
 3 chi-intel   A-human      512     160 omp                0       256 tuning     6.81 original   64.7 
 4 chi-intel   C-HPRC       512     160 omp                0       256 tuning    45.3  original   18.5 
 5 local-amd   A-human      512     128 omp                0       256 tuning     1.61 original    6.40
 6 local-amd   C-HPRC       512     128 omp                0       256 tuning    23.3  original    2.66
 7 local-intel A-human      512      96 omp                0       256 tuning    10.8  original   51.8 
 8 local-intel C-HPRC       512      96 omp                0       256 tuning    16.6  original   37.0 
 9 chi-arm     A-human      512      64 omp                0      2048 tuning     7.43 tuned      42.4 
10 chi-arm     C-HPRC      1024      64 ws                 0      1024 tuning    92.5  tuned       5.92
11 chi-intel   A-human      256     160 omp                0      2048 tuning     2.40 tuned      64.7 
12 chi-intel   C-HPRC      1024     160 omp                0      2048 tuning    36.9  tuned      18.5 
13 local-amd   A-human      128     128 omp                0      1024 tuning     1.51 tuned       6.40
14 local-amd   C-HPRC       256     128 omp                0      2048 tuning    22.7  tuned       2.66
15 local-intel A-human     2048      96 omp                0      4096 tuning     5.21 tuned      51.8 
16 local-intel C-HPRC       128      96 omp                0      2048 tuning    10.4  tuned      37.0
#+end_example


#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 1200 :height 600 :session *R*
dodge_width <- 0.9
df.7.4.compare %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  ggplot(aes(x=Threads, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_grid(InputSet~Machine, scales="free") +
  theme_bw() 
#+end_src

#+RESULTS:
[[file:/tmp/babel-ahpp3K/figure7CXIDX.png]]
#+begin_src R :results output :session *R* :exports both
df.7.4.compare %>%
  filter(Setting == "tuned") %>%
  select(Machine, InputSet, Batches, Threads, Scheduler, CacheSize, Makespan, Percent) %>%
  arrange(Machine, InputSet) %>%
  rename(`% of gain` = Percent) %>%
  print(n=45)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 8
# Groups:   Machine, InputSet [8]
  Machine     InputSet Batches Threads Scheduler CacheSize Makespan `% of gain`
  <chr>       <chr>      <dbl>   <dbl> <chr>         <dbl>    <dbl>       <dbl>
1 chi-arm     A-human      512      64 omp            2048     7.43       42.4 
2 chi-arm     C-HPRC      1024      64 ws             1024    92.5         5.92
3 chi-intel   A-human      256     160 omp            2048     2.40       64.7 
4 chi-intel   C-HPRC      1024     160 omp            2048    36.9        18.5 
5 local-amd   A-human      128     128 omp            1024     1.51        6.40
6 local-amd   C-HPRC       256     128 omp            2048    22.7         2.66
7 local-intel A-human     2048      96 omp            4096     5.21       51.8 
8 local-intel C-HPRC       128      96 omp            2048    10.4        37.0
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.4.compare %>%
  group_by(Machine, InputSet) %>%
  filter(Threads == max(Threads)) %>%
  arrange(Setting) %>%
  mutate(Baseline = first(Makespan),
         Speedup = Baseline/Makespan) %>%
  ungroup() %>%
  group_by(InputSet) %>%
  mutate(GeoMean = exp(mean(log(Speedup)))) %>%
  print(n=24) -> df.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 14
# Groups:   InputSet [2]
   Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Setting Percent Baseline Speedup GeoMean
   <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
 1 chi-arm   A-human      512      64 omp                0       256 tuniâ€¦    12.9  originâ€¦   42.4     12.9     1       1.35
 2 chi-arm   C-HPRC       512      64 omp                0       256 tuniâ€¦    98.3  originâ€¦    5.92    98.3     1       1.10
 3 chi-intel A-human      512     160 omp                0       256 tuniâ€¦     6.81 originâ€¦   64.7      6.81    1       1.35
 4 chi-intel C-HPRC       512     160 omp                0       256 tuniâ€¦    45.3  originâ€¦   18.5     45.3     1       1.10
 5 local-amd A-human      512     128 omp                0       256 tuniâ€¦     1.61 originâ€¦    6.40     1.61    1       1.35
 6 local-amd C-HPRC       512     128 omp                0       256 tuniâ€¦    23.3  originâ€¦    2.66    23.3     1       1.10
 7 local-inâ€¦ A-human      512      96 omp                0       256 tuniâ€¦    10.8  originâ€¦   51.8     10.8     1       1.35
 8 local-inâ€¦ C-HPRC       512      96 omp                0       256 tuniâ€¦    16.6  originâ€¦   37.0     16.6     1       1.10
 9 chi-arm   A-human      512      64 omp                0      2048 tuniâ€¦     7.43 tuned     42.4     12.9     1.74    1.35
10 chi-arm   C-HPRC      1024      64 ws                 0      1024 tuniâ€¦    92.5  tuned      5.92    98.3     1.06    1.10
11 chi-intel A-human      256     160 omp                0      2048 tuniâ€¦     2.40 tuned     64.7      6.81    2.84    1.35
12 chi-intel C-HPRC      1024     160 omp                0      2048 tuniâ€¦    36.9  tuned     18.5     45.3     1.23    1.10
13 local-amd A-human      128     128 omp                0      1024 tuniâ€¦     1.51 tuned      6.40     1.61    1.07    1.35
14 local-amd C-HPRC       256     128 omp                0      2048 tuniâ€¦    22.7  tuned      2.66    23.3     1.03    1.10
15 local-inâ€¦ A-human     2048      96 omp                0      4096 tuniâ€¦     5.21 tuned     51.8     10.8     2.08    1.35
16 local-inâ€¦ C-HPRC       128      96 omp                0      2048 tuniâ€¦    10.4  tuned     37.0     16.6     1.59    1.10
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.speedup %>%
  filter(Setting == "tuned") %>%
  select(Machine, InputSet, Batches, Scheduler, CacheSize)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 8 Ã— 5
# Groups:   InputSet [2]
  Machine     InputSet Batches Scheduler CacheSize
  <chr>       <chr>      <dbl> <chr>         <dbl>
1 chi-arm     A-human      512 omp            2048
2 chi-arm     C-HPRC      1024 ws             1024
3 chi-intel   A-human      256 omp            2048
4 chi-intel   C-HPRC      1024 omp            2048
5 local-amd   A-human      128 omp            1024
6 local-amd   C-HPRC       256 omp            2048
7 local-intel A-human     2048 omp            4096
8 local-intel C-HPRC       128 omp            2048
#+end_example

#+begin_src R :results output :session *R* :exports both
df.7.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 16 Ã— 14
# Groups:   InputSet [2]
   Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test  Makespan Setting Percent Baseline Speedup GeoMean
   <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>    <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
 1 chi-arm   A-human      512      64 omp                0       256 tuniâ€¦    12.9  originâ€¦   42.4     12.9     1       1.35
 2 chi-arm   C-HPRC       512      64 omp                0       256 tuniâ€¦    98.3  originâ€¦    5.92    98.3     1       1.10
 3 chi-intel A-human      512     160 omp                0       256 tuniâ€¦     6.81 originâ€¦   64.7      6.81    1       1.35
 4 chi-intel C-HPRC       512     160 omp                0       256 tuniâ€¦    45.3  originâ€¦   18.5     45.3     1       1.10
 5 local-amd A-human      512     128 omp                0       256 tuniâ€¦     1.61 originâ€¦    6.40     1.61    1       1.35
 6 local-amd C-HPRC       512     128 omp                0       256 tuniâ€¦    23.3  originâ€¦    2.66    23.3     1       1.10
 7 local-inâ€¦ A-human      512      96 omp                0       256 tuniâ€¦    10.8  originâ€¦   51.8     10.8     1       1.35
 8 local-inâ€¦ C-HPRC       512      96 omp                0       256 tuniâ€¦    16.6  originâ€¦   37.0     16.6     1       1.10
 9 chi-arm   A-human      512      64 omp                0      2048 tuniâ€¦     7.43 tuned     42.4     12.9     1.74    1.35
10 chi-arm   C-HPRC      1024      64 ws                 0      1024 tuniâ€¦    92.5  tuned      5.92    98.3     1.06    1.10
11 chi-intel A-human      256     160 omp                0      2048 tuniâ€¦     2.40 tuned     64.7      6.81    2.84    1.35
12 chi-intel C-HPRC      1024     160 omp                0      2048 tuniâ€¦    36.9  tuned     18.5     45.3     1.23    1.10
13 local-amd A-human      128     128 omp                0      1024 tuniâ€¦     1.51 tuned      6.40     1.61    1.07    1.35
14 local-amd C-HPRC       256     128 omp                0      2048 tuniâ€¦    22.7  tuned      2.66    23.3     1.03    1.10
15 local-inâ€¦ A-human     2048      96 omp                0      4096 tuniâ€¦     5.21 tuned     51.8     10.8     2.08    1.35
16 local-inâ€¦ C-HPRC       128      96 omp                0      2048 tuniâ€¦    10.4  tuned     37.0     16.6     1.59    1.10
#+end_example

#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 700 :height 300 :session *R*
p <- df.7.speedup %>%
  mutate(Machine = factor(Machine, levels=c("local-intel", "local-amd", "chi-arm", "chi-intel"))) %>%
  ggplot(aes(x=Machine, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  facet_wrap(~InputSet, ncol=2, scales="free") +
  #ylim(0, 3) +
  #ylab("% of gain") +
    geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'tuned', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Speedup, 2), "x")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 0.7,
    
    # Set the font size for readability.
    size = 4
  ) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-ahpp3K/figurepbuWir.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/auto-tuning-results.pdf :exports both :width 7 :height 3.5 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/auto-tuning-results.pdf]]

#+begin_src R :results output :session *R* :exports both
df.7.speedup %>%
  filter(InputSet == "chm13") %>%
  arrange(Makespan) %>%
  print(n=24)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 6 Ã— 14
# Groups:   InputSet [1]
  Machine   InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting Percent Baseline Speedup GeoMean
  <chr>     <chr>      <dbl>   <dbl> <chr>          <dbl>     <dbl> <chr>     <dbl> <chr>     <dbl>    <dbl>   <dbl>   <dbl>
1 amd       chm13       1024     128 omp                0      4096 tuning     22.5 tuned      6.19     24.0    1.07    1.13
2 amd       chm13        512     128 omp                0       256 tuning     24.0 originâ€¦    6.19     24.0    1       1.13
3 intel     chm13        128      96 omp                0      2048 tuning     34.5 tuned     14.9      40.5    1.17    1.13
4 chi-intel chm13        512     160 omp                0      1024 tuning     39.2 tuned     41.0      66.5    1.70    1.13
5 intel     chm13        512      96 omp                0       256 tuning     40.5 originâ€¦   14.9      40.5    1       1.13
6 chi-intel chm13        512     160 omp                0       256 tuning     66.5 originâ€¦   41.0      66.5    1       1.13
#+end_example

*
* Extra experiment for rebuttal
Authors questioned how valid are the differences found on cache
accesses between miniGiraffe and Giraffe. Our hypothesis is that the
other functions performed by Giraffe interefere in the quality of the
data in the cache for every time the extension happens. To try to
validate this idea, I have changed miniGiraffe's code to include one
"dummy" function that can mix cache data up. Looking over Giraffe's
code, a DFS is performed in a step of the post-process of the
extensions found to align the extensions. What I am doing on
miniGiraffe to test the hypothesis is to do a version of this DFS
(highly based on what Giraffe is doing, but with probably different
inputs and not exactly following the pre logic before the DFS) to see
if this mix the miniGiraffe cache behavior. I have collected results
and I will parse them now

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

file = "./iiswc25/l1_with_dfs.csv"
l1 <- read_csv(file,
         skip=1,
         progress=FALSE,
         col_names=FALSE,
         col_types=cols()) %>%
  rename(Counter = X1, Total = X2, Thread = X3)
print(l1)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,021 Ã— 3
   Counter   Total Thread
   <chr>     <dbl>  <dbl>
 1 L1-misses   995      0
 2 L1-misses   426      0
 3 L1-misses   232      0
 4 L1-misses   400      0
 5 L1-misses   436      0
 6 L1-misses   371      0
 7 L1-misses   305      0
 8 L1-misses   339      0
 9 L1-misses   373      0
10 L1-misses   271      0
# â„¹ 1,011 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
l1 %>%
  group_by(Counter) %>%
  summarize(Result = sum(Total))
#+end_src

#+RESULTS:
: # A tibble: 1 Ã— 2
:   Counter   Result
:   <chr>      <dbl>
: 1 L1-misses 300541

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

file = "./iiswc25/ll_with_dfs.csv"
ll <- read_csv(file,
         skip=1,
         progress=FALSE,
         col_names=FALSE,
         col_types=cols()) %>%
  rename(Counter = X1, Total = X2, Thread = X3)
print(ll)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,020 Ã— 3
   Counter    Total Thread
   <chr>      <dbl>  <dbl>
 1 LLC-access   723      0
 2 LLC-misses   429      0
 3 LLC-access   121      0
 4 LLC-misses    71      0
 5 LLC-access    17      0
 6 LLC-misses    14      0
 7 LLC-access    34      0
 8 LLC-misses    32      0
 9 LLC-access    39      0
10 LLC-misses    38      0
# â„¹ 1,010 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
ll %>%
  group_by(Counter) %>%
  summarize(Result = sum(Total))
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 2
:   Counter    Result
:   <chr>       <dbl>
: 1 LLC-access  23677
: 2 LLC-misses  10277

#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

file = "./iiswc25/ipc_with_dfs.csv"
ipc <- read_csv(file,
         skip=1,
         progress=FALSE,
         col_names=FALSE,
         col_types=cols()) %>%
  rename(Counter = X1, Total = X2, Thread = X3)
print(ipc)
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,020 Ã— 3
   Counter       Total Thread
   <chr>         <dbl>  <dbl>
 1 instructions 261587      0
 2 cycles       414261      0
 3 instructions 162528      0
 4 cycles       141193      0
 5 instructions  59530      0
 6 cycles        43611      0
 7 instructions 415227      0
 8 cycles       218582      0
 9 instructions 335763      0
10 cycles       173805      0
# â„¹ 1,010 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
ipc %>%
  group_by(Counter) %>%
  summarize(Result = sum(Total))
#+end_src

#+RESULTS:
: # A tibble: 2 Ã— 2
:   Counter        Result
:   <chr>           <dbl>
: 1 cycles       30792714
: 2 instructions 50796340
* AE scripts
** Figure 5 - With results from one machine and one test case 
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}
#+end_src

#+RESULTS:

#+begin_src R :results output :session *R* :exports both
FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="miniGiraffe",
                                 recursive=TRUE,
                                 full.names=TRUE)
             ) %>%
  print()
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 48 Ã— 1
   SOURCE                                                                                                             
   <chr>                                                                                                              
 1 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_chm13_miniGiraffe256.csv 
 2 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_grch38_miniGiraffe256.csv
 3 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_omp_0_yeast_miniGiraffe256.csv 
 4 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_chm13_miniGiraffe256.csv  
 5 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_grch38_miniGiraffe256.csv 
 6 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_1_ws_0_yeast_miniGiraffe256.csv  
 7 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_chm13_miniGiraffe256.csv 
 8 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_grch38_miniGiraffe256.csv
 9 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_omp_0_yeast_miniGiraffe256.csv 
10 /soe/jessicadagostini/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/5-1/512_2_ws_0_chm13_miniGiraffe256.csv  
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example


#+begin_src R :results output :session *R* :exports both
df %>%
    mutate(DATA = map(SOURCE, read_traces)) %>%
    separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "EXP"), sep="/") %>%
    separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "InputSet", "CacheSize"), sep="_") %>%
    mutate(CacheSize = str_replace_all(CacheSize, "([minGrafe.csv])", "")) %>%
    select(-contains("XX")) %>%
    unnest(DATA) %>%
    mutate(CacheSize = ifelse(CacheSize == "NC", "0", CacheSize)) %>%
    mutate(Batches = as.integer(Batches),
           Threads = as.integer(Threads),
           Repetition = as.integer(Repetition),
           CacheSize = as.integer(CacheSize)) %>%
  print() -> df.5.1
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 1,626 Ã— 9
   Batches Threads Scheduler Repetition InputSet CacheSize Query           Runtime Thread
     <int>   <int> <chr>          <int> <chr>        <int> <chr>             <dbl>  <dbl>
 1     512       1 omp                0 chm13          256 reading-gbz      31.7        0
 2     512       1 omp                0 chm13          256 reading-seeds  1431.         0
 3     512       1 omp                0 chm13          256 seeds-loop    27045.         0
 4     512       1 omp                0 grch38         256 reading-gbz      21.8        0
 5     512       1 omp                0 grch38         256 reading-seeds   138.         0
 6     512       1 omp                0 grch38         256 seeds-loop     2741.         0
 7     512       1 omp                0 yeast          256 reading-gbz       0.612      0
 8     512       1 omp                0 yeast          256 reading-seeds    54.1        0
 9     512       1 omp                0 yeast          256 seeds-loop     4302.         0
10     512       1 ws                 0 chm13          256 reading-gbz      32.7        0
# â„¹ 1,616 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

For grouping makespan
#+begin_src R :results output :session *R* :exports both
df.5.1 %>%
  filter(Query == "seeds-loop") %>%
  group_by(Threads, Scheduler, Repetition, CacheSize, InputSet) %>%
  summarize(Makespan = max(Runtime)) %>%
  ungroup() %>%
  group_by(Threads, Scheduler, CacheSize, InputSet) %>%
  summarize(AvgMakespan = mean(Makespan),
            MedianMakespan = median(Makespan)) %>%
  print() -> df.5.1.makespan
#+end_src

#+RESULTS:
#+begin_example
`summarise()` has grouped output by 'Threads', 'Scheduler', 'Repetition', 'CacheSize'. You can override using the `.groups`
argument.
`summarise()` has grouped output by 'Threads', 'Scheduler', 'CacheSize'. You can override using the `.groups` argument.
# A tibble: 48 Ã— 6
# Groups:   Threads, Scheduler, CacheSize [16]
   Threads Scheduler CacheSize InputSet AvgMakespan MedianMakespan
     <int> <chr>         <int> <chr>          <dbl>          <dbl>
 1       1 omp             256 chm13         27045.         27045.
 2       1 omp             256 grch38         2741.          2741.
 3       1 omp             256 yeast          4302.          4302.
 4       1 ws              256 chm13         27395.         27395.
 5       1 ws              256 grch38         2767.          2767.
 6       1 ws              256 yeast          4322.          4322.
 7       2 omp             256 chm13         13687.         13687.
 8       2 omp             256 grch38         1395.          1395.
 9       2 omp             256 yeast          2209.          2209.
10       2 ws              256 chm13         13847.         13847.
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

#+begin_src R :results output :session *R* :exports both
df.5.1.makespan %>%
  ungroup() %>%
  arrange(Threads) %>%
  group_by(Scheduler, InputSet) %>%
  mutate(Baseline = first(AvgMakespan),
         Speedup = Baseline/AvgMakespan) %>%
  select(-MedianMakespan) %>%
  #write_csv("iiswc25/scalability_local-intel.csv") %>%
  print() -> df.5.1.speedup
#+end_src

#+RESULTS:
#+begin_example
# A tibble: 48 Ã— 7
# Groups:   Scheduler, InputSet [6]
   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
     <int> <chr>         <int> <chr>          <dbl>    <dbl>   <dbl>
 1       1 omp             256 chm13         27045.   27045.    1   
 2       1 omp             256 grch38         2741.    2741.    1   
 3       1 omp             256 yeast          4302.    4302.    1   
 4       1 ws              256 chm13         27395.   27395.    1   
 5       1 ws              256 grch38         2767.    2767.    1   
 6       1 ws              256 yeast          4322.    4322.    1   
 7       2 omp             256 chm13         13687.   27045.    1.98
 8       2 omp             256 grch38         1395.    2741.    1.96
 9       2 omp             256 yeast          2209.    4302.    1.95
10       2 ws              256 chm13         13847.   27395.    1.98
# â„¹ 38 more rows
# â„¹ Use `print(n = ...)` to see more rows
#+end_example

Line plot

#+begin_src R :results output :session *R* :exports both
colors_list <- c(
  "#f1a346",  # Light Amber
  "#7a4f91",  # Lavender Purple
  "#3c6e91",  # Steel Blue
  "#e67e22"  # Vivid Orange
)
#+end_src

#+RESULTS:


#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 800 :height 600 :session *R*
p <- df.5.1.speedup %>%
  filter(Scheduler == "omp") %>%
  #mutate(Machine = factor(Machine, c("local-intel", "local-amd", "chi-arm", "chi-intel"))) %>%
  ggplot(aes(x=Threads, y=Speedup, color=InputSet)) +
  geom_line() +
  geom_point() +
  geom_abline(intercept = 0, slope = 1, linetype = "dashed", color = "black") +
  scale_color_manual(values=colors_list) + 
  scale_x_continuous("Threads", breaks=df.5.1.speedup$Threads) +
  #facet_wrap(~Machine, scales="free_x") +
  ylim(0, 100) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 20),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 45, hjust = 1, size=15))
p
#+end_src

#+RESULTS:
[[file:/tmp/babel-kH7Wjq/figure9YZ5JC.png]]

#+begin_src R :results graphics file :file ./iiswc25/img/scalability-diff-machines.pdf :exports both :width 8 :height 6 :session *R*
p
#+end_src

#+RESULTS:
[[file:./iiswc25/img/scalability-diff-machines.pdf]]

#+begin_src R :results output :session *R* :exports both
options(digits = 5)
df.5 %>%
  filter(Machine == "chi-intel") %>%
  group_by(InputSet) %>%
  arrange(AvgMakespan) %>%
  filter(AvgMakespan == first(AvgMakespan)) %>%
  print() -> best_result
#+end_src

#+RESULTS:
: # A tibble: 3 Ã— 8
: # Groups:   InputSet [3]
:   Machine   Threads Scheduler CacheSize InputSet AvgMakespan Baseline Speedup
:   <chr>       <dbl> <chr>         <dbl> <chr>          <dbl>    <dbl>   <dbl>
: 1 chi-intel     128 omp             256 A-human         3.44     214.    62.3
: 2 chi-intel     160 omp             256 C-HPRC         59.4     3162.    53.3
: 3 chi-intel     160 omp             256 B-yeast        73.4     4946.    67.3

#+begin_src R :results output :session *R* :exports both
best_result$AvgMakespan
#+end_src

#+RESULTS:
: [1]  3.4376 59.3609 73.4389

** Figure 7 - With original results
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
  read_csv(file,
           progress=FALSE,
           col_names=TRUE,
           col_types=cols())
}


FOLDER="/soe/jessicadagostini/miniGiraffe/iiswc25"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="best",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )

df %>%
  mutate(DATA = map(SOURCE, read_traces)) %>%
  separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "EXP"), sep="/") %>%
  separate(EXP, c("XX5", "XX6", "XX7", "Machine"), sep="_") %>%
  mutate(Machine = str_replace_all(Machine, "(.csv)", "")) %>%
  select(-contains("XX")) %>%
  unnest(DATA) %>%
  mutate(Machine = case_when(Machine == "amd" ~ "local-amd",
                             Machine == "intel" ~ "local-intel",
                             TRUE ~ Machine),
         InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                              InputSet == "yeast" ~ "B-yeast",
                              InputSet == "chm13" ~ "D-HPRC",
                              InputSet == "grch38" ~ "C-HPRC")) -> df.7.compare

# Get speedups
df.7.compare %>%
  group_by(Machine, InputSet) %>%
  filter(Threads == max(Threads)) %>%
  arrange(Setting) %>%
  mutate(Baseline = first(Makespan),
         Speedup = Baseline/Makespan) %>%
  ungroup() %>%
  #group_by(InputSet) %>%
  mutate(GeoMean = exp(mean(log(Speedup)))) %>%
  mutate(Label = case_when(Setting == "tuned" ~ paste0(round(Speedup, 2), "x"),
                           Setting == "original" ~ NA_character_)) -> df.7.speedup

p <- df.7.speedup %>%
  filter(!is.na(InputSet)) %>%
  mutate(Machine = factor(Machine, levels=c("local-intel", "local-amd", "chi-arm", "chi-intel"))) %>%
  ggplot(aes(x=Machine, y=Makespan)) +
  geom_bar(aes(fill=Setting), stat = "identity", width = 0.8, position = "dodge") +
  facet_wrap(~InputSet, ncol=2, scales="free") +
  #coord_cartesian(ylim = c(0, 200)) +
  #ylim(0, 3) +
  ylab("Makespan (sec)") +
    geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    #data = . ,
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = Label),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    #position = position_dodge(width = 1),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 0.5,
    nudge_y = -0,
    # Set the font size for readability.
    size = 4
  ) +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))

ggsave("auto-tuning-results-paper.png", p)

print("TABLE 8 RESULTS")
df.7.speedup %>%
  filter(Setting == "tuned") %>%
  select(Machine, InputSet, Batches, Scheduler, CacheSize)
#+end_src

#+RESULTS:
#+begin_example
Saving 9.72 x 8.33 in image
Warning message:
Removed 16 rows containing missing values or values outside the scale range (`geom_text()`).
[1] "TABLE 8 RESULTS"
# A tibble: 17 Ã— 5
   Machine     InputSet Batches Scheduler CacheSize
   <chr>       <chr>      <dbl> <chr>         <dbl>
 1 local-amd   A-human      512 omp            2048
 2 local-amd   D-HPRC      1024 omp            4096
 3 local-amd   C-HPRC       128 omp            4096
 4 local-amd   B-yeast      128 omp             512
 5 chi-arm     A-human      256 omp            4096
 6 chi-arm     D-HPRC      1024 ws             2048
 7 chi-arm     C-HPRC       512 ws              256
 8 chi-arm     B-yeast      256 ws             1024
 9 chi-intel   A-human      128 omp            2048
10 chi-intel   D-HPRC       512 omp            1024
11 chi-intel   C-HPRC       128 omp            4096
12 chi-intel   B-yeast      128 ws             1024
13 local-intel A-human      256 omp            4096
14 local-intel D-HPRC       128 omp            2048
15 local-intel C-HPRC       256 omp            4096
16 local-intel <NA>         128 omp            2048
17 local-intel B-yeast      128 ws              512
#+end_example

** Figure 7 - With new results from one machine + one test case
#+begin_src R :results output :session *R* :exports both
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}

FOLDER="/home/cc/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df %>%
  mutate(DATA = map(SOURCE, read_traces)) %>%
  separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
  separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
  mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
  select(-contains("XX")) %>%
  unnest(DATA) %>%
  mutate(Batches = as.integer(Batches),
         Threads = as.integer(Threads),
         Repetition = as.integer(Repetition),
         CacheSize = as.integer(CacheSize),
         InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                              InputSet == "yeast" ~ "B-yeast",
                              InputSet == "chm13" ~ "D-HPRC",
                              InputSet == "grch38" ~ "C-HPRC")) -> df.7.1
df.7.1 %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) -> df.7.1.makespan

df.7.1.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Makespan == min(Makespan),
         Threads != 72) %>%
  mutate(Setting = "tuned") -> df.7.1.best

df.7.1.makespan %>%
  ungroup() %>%
  group_by(InputSet, Threads) %>%
  filter(Batches == 512 & Scheduler == "omp" & CacheSize == 256 & Test == "tuning") %>%
  mutate(Setting = "original") -> df.7.1.original

df.7.1.original %>%
  bind_rows(df.7.1.best) %>%
  print() -> df.7.1.compare

improvement.7.1 <- df.7.1.compare %>%
  
  # 1. Select only the columns needed for this operation.
  # This defines the "key" (InputSet, Threads) for pairing and the values to reshape.
  select(InputSet, Threads, Setting, Makespan) %>%
  
  # 2. Reshape the data from a "long" to a "wide" format.
  # This creates separate columns for 'original' and 'tuned' Makespan values.
  pivot_wider(
    names_from = Setting,
    values_from = Makespan
  ) %>%
  
  # 3. Remove rows where a pair could not be found 
  # (e.g., an 'original' without a 'tuned' counterpart).
  filter(!is.na(original) & !is.na(tuned)) %>%
  
  # 4. Calculate the percentage improvement.
  # Formula: ((Original - Tuned) / Original) * 100
  mutate(
    Percent = ((original - tuned) / original) * 100
  )

df.7.1.compare %>%
  filter(Threads != 72) %>%
  left_join(improvement.7.1, by=c("InputSet", "Threads")) %>%
  select(-original, -tuned) %>%
  write_csv("./iiswc25/best_results_tuning_intel.csv") %>%
  print() -> df.7.1.compare

dodge_width <- 0.9
p <- df.7.1.compare %>%
  filter(Threads != 72) %>%
  mutate(CacheSize = as.factor(CacheSize),
         Threads = as.factor(Threads)) %>%
  mutate(Machine = "chi-intel") %>%
  ggplot(aes(x=Machine, y=Makespan, fill=Setting)) +
  geom_bar(stat = "identity", width = 0.8, position = "dodge") +
  # Text annotation layer
  geom_text(
    # This is the key part:
    # We filter the data for this layer to only include 'original' executions
    # that have a percentage greater than 0.
    data = . %>% filter(Setting == 'original', !is.na(Percent)),
      # Define the aesthetics for the label.
    # We format the 'Percent' column to one decimal place and add a '%' sign.
    aes(label = paste0(round(Percent, 1), "%")),
    
    # Dodge the text to align with the corresponding bars.
    # It's crucial that this matches the bar's dodge width.
    position = position_dodge(width = 0.9),
    
    # Adjust the vertical position to be slightly above the bar.
    vjust = 1.5,
    
    # Set the font size for readability.
    size = 6
  ) +
  facet_wrap(~InputSet, scales="free") +
  theme_bw() +
  theme(legend.position = "top",
        text = element_text(size = 18),
        axis.text.y = element_text(angle = 45, hjust = 1, size=15),
        axis.text.x = element_text(angle = 15, hjust = 0.5, size=15))

ggsave("auto-tuning-results.png", plot = p)
print("SIMILAR TO TABLE 8 RESULTS")
df.7.1.compare %>%
  filter(Setting == "tuned") %>%
  select(InputSet, Batches, Scheduler, CacheSize)
#+end_src

#+RESULTS:
#+begin_example
Error in `summarize()`:
â„¹ In argument: `Makespan = max(Runtime)`.
Caused by error:
! object 'Runtime' not found
Run `rlang::last_trace()` to see where the error occurred.
# A tibble: 19 Ã— 9
# Groups:   InputSet, Threads [10]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting 
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>   
 1 1000GP            512      48 omp                0       256 tuning    1.08  original
 2 1000GP            512      96 omp                0       256 tuning    1.47  original
 3 chm13             512      48 omp                0       256 tuning   52.0   original
 4 chm13             512      72 omp                0       256 tuning   40.5   original
 5 chm13             512      96 omp                0       256 tuning   40.5   original
 6 grch38            512      48 omp                0       256 tuning   10.9   original
 7 grch38            512      96 omp                0       256 tuning   10.4   original
 8 grch38_random     512      96 omp                0       256 tuning   16.6   original
 9 yeast             512      48 omp                0       256 tuning    7.18  original
10 yeast             512      96 omp                0       256 tuning    5.84  original
11 1000GP            256      96 omp                0      4096 tuning    0.623 tuned   
12 1000GP            512      48 omp                0      1024 tuning    0.936 tuned   
13 chm13             128      96 omp                0      2048 tuning   34.5   tuned   
14 chm13            2048      48 omp                0      4096 tuning   48.8   tuned   
15 grch38            256      96 omp                0      4096 tuning    8.04  tuned   
16 grch38           1024      48 omp                0       128 tuning    8.86  tuned   
17 grch38_random     128      96 omp                0      2048 tuning   10.4   tuned   
18 yeast             128      48 omp                0      4096 tuning    5.91  tuned   
19 yeast             128      96 ws                 0       512 tuning    5.49  tuned
wrote 1.00TB in  0s, 66.58PB/s                                                                                                                          # A tibble: 18 Ã— 10
# Groups:   InputSet, Threads [9]
   InputSet      Batches Threads Scheduler Repetition CacheSize Test   Makespan Setting  Percent
   <chr>           <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>      <dbl>
 1 1000GP            512      48 omp                0       256 tuning    1.08  original   13.6 
 2 1000GP            512      96 omp                0       256 tuning    1.47  original   57.6 
 3 chm13             512      48 omp                0       256 tuning   52.0   original    6.05
 4 chm13             512      96 omp                0       256 tuning   40.5   original   14.9 
 5 grch38            512      48 omp                0       256 tuning   10.9   original   18.9 
 6 grch38            512      96 omp                0       256 tuning   10.4   original   22.5 
 7 grch38_random     512      96 omp                0       256 tuning   16.6   original   37.0 
 8 yeast             512      48 omp                0       256 tuning    7.18  original   17.7 
 9 yeast             512      96 omp                0       256 tuning    5.84  original    6.03
10 1000GP            256      96 omp                0      4096 tuning    0.623 tuned      57.6 
11 1000GP            512      48 omp                0      1024 tuning    0.936 tuned      13.6 
12 chm13             128      96 omp                0      2048 tuning   34.5   tuned      14.9 
13 chm13            2048      48 omp                0      4096 tuning   48.8   tuned       6.05
14 grch38            256      96 omp                0      4096 tuning    8.04  tuned      22.5 
15 grch38           1024      48 omp                0       128 tuning    8.86  tuned      18.9 
16 grch38_random     128      96 omp                0      2048 tuning   10.4   tuned      37.0 
17 yeast             128      48 omp                0      4096 tuning    5.91  tuned      17.7 
18 yeast             128      96 ws                 0       512 tuning    5.49  tuned       6.03
Saving 9.72 x 8.33 in image
[1] "SIMILAR TO TABLE 8 RESULTS"
Adding missing grouping variables: `Threads`
# A tibble: 9 Ã— 5
# Groups:   InputSet, Threads [9]
  Threads InputSet      Batches Scheduler CacheSize
    <int> <chr>           <int> <chr>         <int>
1      96 1000GP            256 omp            4096
2      48 1000GP            512 omp            1024
3      96 chm13             128 omp            2048
4      48 chm13            2048 omp            4096
5      96 grch38            256 omp            4096
6      48 grch38           1024 omp             128
7      96 grch38_random     128 omp            2048
8      48 yeast             128 omp            4096
9      96 yeast             128 ws              512
#+end_example
** Figure 8 - With new results from one machine +  one test case
#+begin_src R :results graphics file :file (org-babel-temp-file "figure" ".png") :exports both :width 600 :height 400 :session *R*
options(crayon.enabled = FALSE)
suppressMessages(library(tidyverse))
suppressMessages(library(stringr))

read_traces <- function(file) {
    read_csv(file,
             skip = 1,
             progress=FALSE,
             col_names=FALSE,
             col_types=cols()) %>%
        rename(Query = X1, Runtime = X2, Thread = X3)
}

FOLDER="/home/cc/miniGiraffe/iiswc25/intelxeonplatinum8260cpu@240ghz/tuning"
df <- tibble(SOURCE = list.files(FOLDER,
                                 pattern="csv",
                                 recursive=TRUE,
                                 full.names=TRUE)
             )
df %>%
  mutate(DATA = map(SOURCE, read_traces)) %>%
  separate(SOURCE, c("XX1", "XX2", "XX3", "XX4", "XX5", "XX6", "XX7", "InputSet", "EXP"), sep="/") %>%
  separate(EXP, c("Batches", "Threads", "Scheduler", "Repetition", "Test", "CacheSize"), sep="_") %>%
  mutate(CacheSize = str_replace_all(CacheSize, "([.csv])", "")) %>%
  select(-contains("XX")) %>%
  unnest(DATA) %>%
  mutate(Batches = as.integer(Batches),
         Threads = as.integer(Threads),
         Repetition = as.integer(Repetition),
         CacheSize = as.integer(CacheSize),
         InputSet = case_when(InputSet == "1000GP" ~ "A-human",
                              InputSet == "yeast" ~ "B-yeast",
                              InputSet == "chm13" ~ "D-HPRC",
                              InputSet == "grch38" ~ "C-HPRC")) -> df.7.1
df.7.1 %>%
  group_by(InputSet, Batches, Threads, Scheduler, Repetition, CacheSize, Test) %>%
  summarize(Makespan = max(Runtime)) -> df.7.1.makespan

#+begin_src R :results output :session *R* :exports both
df.7.1.makespan %>%
  mutate(CacheSize = as.factor(CacheSize),
         Batches = as.factor(Batches)) %>%
  ggplot(aes(x = CacheSize, y = Batches, fill = Makespan)) +
  geom_tile(color = "white", lwd = 1, linetype = 1) + # Creates the tiled heatmap
  scale_fill_gradient(low = "lightblue", high = "darkblue") + # Defines the color scale
  facet_wrap(~ Scheduler, ncol = 2) + # Creates a facet for each scheduler
  labs(
    #title = "Performance Heatmap by Scheduler",
    #subtitle = "Comparing Cache Size and Batch Size",
    x = "Init. CacheGBWT",
    y = "Batch Size",
    fill = "Makespan"
  ) +
  theme_bw(base_size = 14) + # A clean theme for the plot
  theme(
    strip.text = element_text( size = 12), # Style facet titles
    axis.text.x = element_text(angle = 45, hjust = 1), # Angle x-axis labels if needed
    legend.position = "bottom"
  ) -> p
p
#+end_src

#+begin_example
  InputSet Batches Threads Scheduler Repetition CacheSize Test   Makespan Machine  
   <chr>      <int>   <int> <chr>          <int>     <int> <chr>     <dbl> <chr>    
 1 chm13        128     160 omp                0       256 tuning     72.8 chi-intel
 2 chm13        128     160 omp                0       512 tuning     63.8 chi-intel
 3 chm13        128     160 omp                0      1024 tuning     53.0 chi-intel
 4 chm13        128     160 omp                0      2048 tuning     44.7 chi-intel
 5 chm13        128     160 omp                0      4096 tuning     41.5 chi-intel
 6 chm13        128     160 ws                 0       256 tuning     53.5 chi-intel
 7 chm13        128     160 ws                 0       512 tuning     50.5 chi-intel
 8 chm13        128     160 ws                 0      1024 tuning     47.7 chi-intel
 9 chm13        128     160 ws                 0      2048 tuning     61.3 chi-intel

#+end_example
